// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dialog.tl.proto

package dialog

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                                  TLConstructor = 0
	CRC32_updateDraftMessage                       TLConstructor = -155335502
	CRC32_dialogExt                                TLConstructor = -1109809056
	CRC32_dialogPinnedExt                          TLConstructor = 245834284
	CRC32_dialogFilterExt                          TLConstructor = -1496016642
	CRC32_simpleDialogsData                        TLConstructor = 492418141
	CRC32_savedDialogList                          TLConstructor = 2005919834
	CRC32_dialog_saveDraftMessage                  TLConstructor = 1321916826
	CRC32_dialog_clearDraftMessage                 TLConstructor = -76500326
	CRC32_dialog_getAllDrafts                      TLConstructor = -1394716698
	CRC32_dialog_clearAllDrafts                    TLConstructor = 1102614780
	CRC32_dialog_markDialogUnread                  TLConstructor = 1160941838
	CRC32_dialog_toggleDialogPin                   TLConstructor = -2038504145
	CRC32_dialog_getDialogUnreadMarkList           TLConstructor = -893634316
	CRC32_dialog_getDialogsByOffsetDate            TLConstructor = -1652652540
	CRC32_dialog_getDialogs                        TLConstructor = -2046091754
	CRC32_dialog_getDialogsByIdList                TLConstructor = -1390049167
	CRC32_dialog_getDialogsCount                   TLConstructor = -533089179
	CRC32_dialog_getPinnedDialogs                  TLConstructor = -1463673931
	CRC32_dialog_reorderPinnedDialogs              TLConstructor = -18664089
	CRC32_dialog_getDialogById                     TLConstructor = -1587594251
	CRC32_dialog_getTopMessage                     TLConstructor = -92425614
	CRC32_dialog_updateReadInbox                   TLConstructor = 489158840
	CRC32_dialog_updateReadOutbox                  TLConstructor = 1483799934
	CRC32_dialog_insertOrUpdateDialog              TLConstructor = 382601889
	CRC32_dialog_deleteDialog                      TLConstructor = 28515811
	CRC32_dialog_getUserPinnedMessage              TLConstructor = -1885617487
	CRC32_dialog_updateUserPinnedMessage           TLConstructor = 371388970
	CRC32_dialog_insertOrUpdateDialogFilter        TLConstructor = 178824068
	CRC32_dialog_deleteDialogFilter                TLConstructor = 31276695
	CRC32_dialog_updateDialogFiltersOrder          TLConstructor = -1321465025
	CRC32_dialog_getDialogFilters                  TLConstructor = 1818717244
	CRC32_dialog_getDialogFolder                   TLConstructor = 1092325045
	CRC32_dialog_editPeerFolders                   TLConstructor = 608601754
	CRC32_dialog_getChannelMessageReadParticipants TLConstructor = 683494715
	CRC32_dialog_setChatTheme                      TLConstructor = -374431190
	CRC32_dialog_setHistoryTTL                     TLConstructor = 165263532
	CRC32_dialog_getMyDialogsData                  TLConstructor = 2128645891
	CRC32_dialog_getSavedDialogs                   TLConstructor = 952227432
	CRC32_dialog_getPinnedSavedDialogs             TLConstructor = 1084471271
	CRC32_dialog_toggleSavedDialogPin              TLConstructor = 1156782041
	CRC32_dialog_reorderPinnedSavedDialogs         TLConstructor = -665007150
	CRC32_dialog_getDialogFilter                   TLConstructor = -209189348
	CRC32_dialog_getDialogFilterBySlug             TLConstructor = 1313177583
	CRC32_dialog_createDialogFilter                TLConstructor = -959749265
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	-155335502:  "CRC32_updateDraftMessage",
	-1109809056: "CRC32_dialogExt",
	245834284:   "CRC32_dialogPinnedExt",
	-1496016642: "CRC32_dialogFilterExt",
	492418141:   "CRC32_simpleDialogsData",
	2005919834:  "CRC32_savedDialogList",
	1321916826:  "CRC32_dialog_saveDraftMessage",
	-76500326:   "CRC32_dialog_clearDraftMessage",
	-1394716698: "CRC32_dialog_getAllDrafts",
	1102614780:  "CRC32_dialog_clearAllDrafts",
	1160941838:  "CRC32_dialog_markDialogUnread",
	-2038504145: "CRC32_dialog_toggleDialogPin",
	-893634316:  "CRC32_dialog_getDialogUnreadMarkList",
	-1652652540: "CRC32_dialog_getDialogsByOffsetDate",
	-2046091754: "CRC32_dialog_getDialogs",
	-1390049167: "CRC32_dialog_getDialogsByIdList",
	-533089179:  "CRC32_dialog_getDialogsCount",
	-1463673931: "CRC32_dialog_getPinnedDialogs",
	-18664089:   "CRC32_dialog_reorderPinnedDialogs",
	-1587594251: "CRC32_dialog_getDialogById",
	-92425614:   "CRC32_dialog_getTopMessage",
	489158840:   "CRC32_dialog_updateReadInbox",
	1483799934:  "CRC32_dialog_updateReadOutbox",
	382601889:   "CRC32_dialog_insertOrUpdateDialog",
	28515811:    "CRC32_dialog_deleteDialog",
	-1885617487: "CRC32_dialog_getUserPinnedMessage",
	371388970:   "CRC32_dialog_updateUserPinnedMessage",
	178824068:   "CRC32_dialog_insertOrUpdateDialogFilter",
	31276695:    "CRC32_dialog_deleteDialogFilter",
	-1321465025: "CRC32_dialog_updateDialogFiltersOrder",
	1818717244:  "CRC32_dialog_getDialogFilters",
	1092325045:  "CRC32_dialog_getDialogFolder",
	608601754:   "CRC32_dialog_editPeerFolders",
	683494715:   "CRC32_dialog_getChannelMessageReadParticipants",
	-374431190:  "CRC32_dialog_setChatTheme",
	165263532:   "CRC32_dialog_setHistoryTTL",
	2128645891:  "CRC32_dialog_getMyDialogsData",
	952227432:   "CRC32_dialog_getSavedDialogs",
	1084471271:  "CRC32_dialog_getPinnedSavedDialogs",
	1156782041:  "CRC32_dialog_toggleSavedDialogPin",
	-665007150:  "CRC32_dialog_reorderPinnedSavedDialogs",
	-209189348:  "CRC32_dialog_getDialogFilter",
	1313177583:  "CRC32_dialog_getDialogFilterBySlug",
	-959749265:  "CRC32_dialog_createDialogFilter",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                                  0,
	"CRC32_updateDraftMessage":                       -155335502,
	"CRC32_dialogExt":                                -1109809056,
	"CRC32_dialogPinnedExt":                          245834284,
	"CRC32_dialogFilterExt":                          -1496016642,
	"CRC32_simpleDialogsData":                        492418141,
	"CRC32_savedDialogList":                          2005919834,
	"CRC32_dialog_saveDraftMessage":                  1321916826,
	"CRC32_dialog_clearDraftMessage":                 -76500326,
	"CRC32_dialog_getAllDrafts":                      -1394716698,
	"CRC32_dialog_clearAllDrafts":                    1102614780,
	"CRC32_dialog_markDialogUnread":                  1160941838,
	"CRC32_dialog_toggleDialogPin":                   -2038504145,
	"CRC32_dialog_getDialogUnreadMarkList":           -893634316,
	"CRC32_dialog_getDialogsByOffsetDate":            -1652652540,
	"CRC32_dialog_getDialogs":                        -2046091754,
	"CRC32_dialog_getDialogsByIdList":                -1390049167,
	"CRC32_dialog_getDialogsCount":                   -533089179,
	"CRC32_dialog_getPinnedDialogs":                  -1463673931,
	"CRC32_dialog_reorderPinnedDialogs":              -18664089,
	"CRC32_dialog_getDialogById":                     -1587594251,
	"CRC32_dialog_getTopMessage":                     -92425614,
	"CRC32_dialog_updateReadInbox":                   489158840,
	"CRC32_dialog_updateReadOutbox":                  1483799934,
	"CRC32_dialog_insertOrUpdateDialog":              382601889,
	"CRC32_dialog_deleteDialog":                      28515811,
	"CRC32_dialog_getUserPinnedMessage":              -1885617487,
	"CRC32_dialog_updateUserPinnedMessage":           371388970,
	"CRC32_dialog_insertOrUpdateDialogFilter":        178824068,
	"CRC32_dialog_deleteDialogFilter":                31276695,
	"CRC32_dialog_updateDialogFiltersOrder":          -1321465025,
	"CRC32_dialog_getDialogFilters":                  1818717244,
	"CRC32_dialog_getDialogFolder":                   1092325045,
	"CRC32_dialog_editPeerFolders":                   608601754,
	"CRC32_dialog_getChannelMessageReadParticipants": 683494715,
	"CRC32_dialog_setChatTheme":                      -374431190,
	"CRC32_dialog_setHistoryTTL":                     165263532,
	"CRC32_dialog_getMyDialogsData":                  2128645891,
	"CRC32_dialog_getSavedDialogs":                   952227432,
	"CRC32_dialog_getPinnedSavedDialogs":             1084471271,
	"CRC32_dialog_toggleSavedDialogPin":              1156782041,
	"CRC32_dialog_reorderPinnedSavedDialogs":         -665007150,
	"CRC32_dialog_getDialogFilter":                   -209189348,
	"CRC32_dialog_getDialogFilterBySlug":             1313177583,
	"CRC32_dialog_createDialogFilter":                -959749265,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{0}
}

// DialogExt <--
//   - TL_dialogExt
type DialogExt struct {
	PredicateName        string          `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor   `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Order                int64           `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Dialog               *mtproto.Dialog `protobuf:"bytes,4,opt,name=dialog,proto3" json:"dialog,omitempty"`
	AvailableMinId       int32           `protobuf:"varint,5,opt,name=available_min_id,json=availableMinId,proto3" json:"available_min_id,omitempty"`
	Date                 int64           `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`
	ThemeEmoticon        string          `protobuf:"bytes,7,opt,name=theme_emoticon,json=themeEmoticon,proto3" json:"theme_emoticon,omitempty"`
	TtlPeriod            int32           `protobuf:"varint,8,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DialogExt) Reset()         { *m = DialogExt{} }
func (m *DialogExt) String() string { return proto.CompactTextString(m) }
func (*DialogExt) ProtoMessage()    {}
func (*DialogExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{0}
}
func (m *DialogExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogExt.Merge(m, src)
}
func (m *DialogExt) XXX_Size() int {
	return m.Size()
}
func (m *DialogExt) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogExt.DiscardUnknown(m)
}

var xxx_messageInfo_DialogExt proto.InternalMessageInfo

func (m *DialogExt) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *DialogExt) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *DialogExt) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *DialogExt) GetDialog() *mtproto.Dialog {
	if m != nil {
		return m.Dialog
	}
	return nil
}

func (m *DialogExt) GetAvailableMinId() int32 {
	if m != nil {
		return m.AvailableMinId
	}
	return 0
}

func (m *DialogExt) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *DialogExt) GetThemeEmoticon() string {
	if m != nil {
		return m.ThemeEmoticon
	}
	return ""
}

func (m *DialogExt) GetTtlPeriod() int32 {
	if m != nil {
		return m.TtlPeriod
	}
	return 0
}

type TLDialogExt struct {
	Data2                *DialogExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TLDialogExt) Reset()         { *m = TLDialogExt{} }
func (m *TLDialogExt) String() string { return proto.CompactTextString(m) }
func (*TLDialogExt) ProtoMessage()    {}
func (*TLDialogExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{1}
}
func (m *TLDialogExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogExt.Merge(m, src)
}
func (m *TLDialogExt) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogExt) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogExt.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogExt proto.InternalMessageInfo

func (m *TLDialogExt) GetData2() *DialogExt {
	if m != nil {
		return m.Data2
	}
	return nil
}

// DialogFilterExt <--
//   - TL_dialogFilterExt
type DialogFilterExt struct {
	PredicateName        string                `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor         `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Id                   int32                 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	JoinedBySlug         bool                  `protobuf:"varint,4,opt,name=joined_by_slug,json=joinedBySlug,proto3" json:"joined_by_slug,omitempty"`
	Slug                 string                `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	DialogFilter         *mtproto.DialogFilter `protobuf:"bytes,6,opt,name=dialog_filter,json=dialogFilter,proto3" json:"dialog_filter,omitempty"`
	Order                int64                 `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DialogFilterExt) Reset()         { *m = DialogFilterExt{} }
func (m *DialogFilterExt) String() string { return proto.CompactTextString(m) }
func (*DialogFilterExt) ProtoMessage()    {}
func (*DialogFilterExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{2}
}
func (m *DialogFilterExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogFilterExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogFilterExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogFilterExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogFilterExt.Merge(m, src)
}
func (m *DialogFilterExt) XXX_Size() int {
	return m.Size()
}
func (m *DialogFilterExt) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogFilterExt.DiscardUnknown(m)
}

var xxx_messageInfo_DialogFilterExt proto.InternalMessageInfo

func (m *DialogFilterExt) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *DialogFilterExt) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *DialogFilterExt) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DialogFilterExt) GetJoinedBySlug() bool {
	if m != nil {
		return m.JoinedBySlug
	}
	return false
}

func (m *DialogFilterExt) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *DialogFilterExt) GetDialogFilter() *mtproto.DialogFilter {
	if m != nil {
		return m.DialogFilter
	}
	return nil
}

func (m *DialogFilterExt) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

type TLDialogFilterExt struct {
	Data2                *DialogFilterExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLDialogFilterExt) Reset()         { *m = TLDialogFilterExt{} }
func (m *TLDialogFilterExt) String() string { return proto.CompactTextString(m) }
func (*TLDialogFilterExt) ProtoMessage()    {}
func (*TLDialogFilterExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{3}
}
func (m *TLDialogFilterExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogFilterExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogFilterExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogFilterExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogFilterExt.Merge(m, src)
}
func (m *TLDialogFilterExt) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogFilterExt) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogFilterExt.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogFilterExt proto.InternalMessageInfo

func (m *TLDialogFilterExt) GetData2() *DialogFilterExt {
	if m != nil {
		return m.Data2
	}
	return nil
}

// DialogPinnedExt <--
//   - TL_dialogPinnedExt
type DialogPinnedExt struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Order                int64         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DialogPinnedExt) Reset()         { *m = DialogPinnedExt{} }
func (m *DialogPinnedExt) String() string { return proto.CompactTextString(m) }
func (*DialogPinnedExt) ProtoMessage()    {}
func (*DialogPinnedExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{4}
}
func (m *DialogPinnedExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogPinnedExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogPinnedExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogPinnedExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogPinnedExt.Merge(m, src)
}
func (m *DialogPinnedExt) XXX_Size() int {
	return m.Size()
}
func (m *DialogPinnedExt) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogPinnedExt.DiscardUnknown(m)
}

var xxx_messageInfo_DialogPinnedExt proto.InternalMessageInfo

func (m *DialogPinnedExt) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *DialogPinnedExt) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *DialogPinnedExt) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *DialogPinnedExt) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *DialogPinnedExt) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

type TLDialogPinnedExt struct {
	Data2                *DialogPinnedExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLDialogPinnedExt) Reset()         { *m = TLDialogPinnedExt{} }
func (m *TLDialogPinnedExt) String() string { return proto.CompactTextString(m) }
func (*TLDialogPinnedExt) ProtoMessage()    {}
func (*TLDialogPinnedExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{5}
}
func (m *TLDialogPinnedExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogPinnedExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogPinnedExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogPinnedExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogPinnedExt.Merge(m, src)
}
func (m *TLDialogPinnedExt) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogPinnedExt) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogPinnedExt.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogPinnedExt proto.InternalMessageInfo

func (m *TLDialogPinnedExt) GetData2() *DialogPinnedExt {
	if m != nil {
		return m.Data2
	}
	return nil
}

// DialogsData <--
//   - TL_simpleDialogsData
type DialogsData struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Users                []int64       `protobuf:"varint,3,rep,packed,name=users,proto3" json:"users,omitempty"`
	Chats                []int64       `protobuf:"varint,4,rep,packed,name=chats,proto3" json:"chats,omitempty"`
	Channels             []int64       `protobuf:"varint,5,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DialogsData) Reset()         { *m = DialogsData{} }
func (m *DialogsData) String() string { return proto.CompactTextString(m) }
func (*DialogsData) ProtoMessage()    {}
func (*DialogsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{6}
}
func (m *DialogsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogsData.Merge(m, src)
}
func (m *DialogsData) XXX_Size() int {
	return m.Size()
}
func (m *DialogsData) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogsData.DiscardUnknown(m)
}

var xxx_messageInfo_DialogsData proto.InternalMessageInfo

func (m *DialogsData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *DialogsData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *DialogsData) GetUsers() []int64 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *DialogsData) GetChats() []int64 {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *DialogsData) GetChannels() []int64 {
	if m != nil {
		return m.Channels
	}
	return nil
}

type TLSimpleDialogsData struct {
	Data2                *DialogsData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TLSimpleDialogsData) Reset()         { *m = TLSimpleDialogsData{} }
func (m *TLSimpleDialogsData) String() string { return proto.CompactTextString(m) }
func (*TLSimpleDialogsData) ProtoMessage()    {}
func (*TLSimpleDialogsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{7}
}
func (m *TLSimpleDialogsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSimpleDialogsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSimpleDialogsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSimpleDialogsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSimpleDialogsData.Merge(m, src)
}
func (m *TLSimpleDialogsData) XXX_Size() int {
	return m.Size()
}
func (m *TLSimpleDialogsData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSimpleDialogsData.DiscardUnknown(m)
}

var xxx_messageInfo_TLSimpleDialogsData proto.InternalMessageInfo

func (m *TLSimpleDialogsData) GetData2() *DialogsData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// PeerWithDraftMessage <--
//   - TL_updateDraftMessage
type PeerWithDraftMessage struct {
	PredicateName        string                `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor         `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Peer                 *mtproto.Peer         `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Draft                *mtproto.DraftMessage `protobuf:"bytes,4,opt,name=draft,proto3" json:"draft,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PeerWithDraftMessage) Reset()         { *m = PeerWithDraftMessage{} }
func (m *PeerWithDraftMessage) String() string { return proto.CompactTextString(m) }
func (*PeerWithDraftMessage) ProtoMessage()    {}
func (*PeerWithDraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{8}
}
func (m *PeerWithDraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerWithDraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerWithDraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerWithDraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerWithDraftMessage.Merge(m, src)
}
func (m *PeerWithDraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *PeerWithDraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerWithDraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PeerWithDraftMessage proto.InternalMessageInfo

func (m *PeerWithDraftMessage) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *PeerWithDraftMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *PeerWithDraftMessage) GetPeer() *mtproto.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PeerWithDraftMessage) GetDraft() *mtproto.DraftMessage {
	if m != nil {
		return m.Draft
	}
	return nil
}

type TLUpdateDraftMessage struct {
	Data2                *PeerWithDraftMessage `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLUpdateDraftMessage) Reset()         { *m = TLUpdateDraftMessage{} }
func (m *TLUpdateDraftMessage) String() string { return proto.CompactTextString(m) }
func (*TLUpdateDraftMessage) ProtoMessage()    {}
func (*TLUpdateDraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{9}
}
func (m *TLUpdateDraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdateDraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdateDraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdateDraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdateDraftMessage.Merge(m, src)
}
func (m *TLUpdateDraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdateDraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdateDraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdateDraftMessage proto.InternalMessageInfo

func (m *TLUpdateDraftMessage) GetData2() *PeerWithDraftMessage {
	if m != nil {
		return m.Data2
	}
	return nil
}

// SavedDialogList <--
//   - TL_savedDialogList
type SavedDialogList struct {
	PredicateName        string                 `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor          `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Count                int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Dialogs              []*mtproto.SavedDialog `protobuf:"bytes,4,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SavedDialogList) Reset()         { *m = SavedDialogList{} }
func (m *SavedDialogList) String() string { return proto.CompactTextString(m) }
func (*SavedDialogList) ProtoMessage()    {}
func (*SavedDialogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{10}
}
func (m *SavedDialogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavedDialogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavedDialogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavedDialogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedDialogList.Merge(m, src)
}
func (m *SavedDialogList) XXX_Size() int {
	return m.Size()
}
func (m *SavedDialogList) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedDialogList.DiscardUnknown(m)
}

var xxx_messageInfo_SavedDialogList proto.InternalMessageInfo

func (m *SavedDialogList) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *SavedDialogList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *SavedDialogList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SavedDialogList) GetDialogs() []*mtproto.SavedDialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

type TLSavedDialogList struct {
	Data2                *SavedDialogList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLSavedDialogList) Reset()         { *m = TLSavedDialogList{} }
func (m *TLSavedDialogList) String() string { return proto.CompactTextString(m) }
func (*TLSavedDialogList) ProtoMessage()    {}
func (*TLSavedDialogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{11}
}
func (m *TLSavedDialogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSavedDialogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSavedDialogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSavedDialogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSavedDialogList.Merge(m, src)
}
func (m *TLSavedDialogList) XXX_Size() int {
	return m.Size()
}
func (m *TLSavedDialogList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSavedDialogList.DiscardUnknown(m)
}

var xxx_messageInfo_TLSavedDialogList proto.InternalMessageInfo

func (m *TLSavedDialogList) GetData2() *SavedDialogList {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogSaveDraftMessage struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32                 `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                 `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Message              *mtproto.DraftMessage `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLDialogSaveDraftMessage) Reset()         { *m = TLDialogSaveDraftMessage{} }
func (m *TLDialogSaveDraftMessage) String() string { return proto.CompactTextString(m) }
func (*TLDialogSaveDraftMessage) ProtoMessage()    {}
func (*TLDialogSaveDraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{12}
}
func (m *TLDialogSaveDraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogSaveDraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogSaveDraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogSaveDraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogSaveDraftMessage.Merge(m, src)
}
func (m *TLDialogSaveDraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogSaveDraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogSaveDraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogSaveDraftMessage proto.InternalMessageInfo

func (m *TLDialogSaveDraftMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogSaveDraftMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogSaveDraftMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogSaveDraftMessage) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogSaveDraftMessage) GetMessage() *mtproto.DraftMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogClearDraftMessage struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogClearDraftMessage) Reset()         { *m = TLDialogClearDraftMessage{} }
func (m *TLDialogClearDraftMessage) String() string { return proto.CompactTextString(m) }
func (*TLDialogClearDraftMessage) ProtoMessage()    {}
func (*TLDialogClearDraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{13}
}
func (m *TLDialogClearDraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogClearDraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogClearDraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogClearDraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogClearDraftMessage.Merge(m, src)
}
func (m *TLDialogClearDraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogClearDraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogClearDraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogClearDraftMessage proto.InternalMessageInfo

func (m *TLDialogClearDraftMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogClearDraftMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogClearDraftMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogClearDraftMessage) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetAllDrafts struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetAllDrafts) Reset()         { *m = TLDialogGetAllDrafts{} }
func (m *TLDialogGetAllDrafts) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetAllDrafts) ProtoMessage()    {}
func (*TLDialogGetAllDrafts) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{14}
}
func (m *TLDialogGetAllDrafts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetAllDrafts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetAllDrafts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetAllDrafts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetAllDrafts.Merge(m, src)
}
func (m *TLDialogGetAllDrafts) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetAllDrafts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetAllDrafts.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetAllDrafts proto.InternalMessageInfo

func (m *TLDialogGetAllDrafts) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetAllDrafts) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogClearAllDrafts struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogClearAllDrafts) Reset()         { *m = TLDialogClearAllDrafts{} }
func (m *TLDialogClearAllDrafts) String() string { return proto.CompactTextString(m) }
func (*TLDialogClearAllDrafts) ProtoMessage()    {}
func (*TLDialogClearAllDrafts) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{15}
}
func (m *TLDialogClearAllDrafts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogClearAllDrafts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogClearAllDrafts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogClearAllDrafts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogClearAllDrafts.Merge(m, src)
}
func (m *TLDialogClearAllDrafts) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogClearAllDrafts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogClearAllDrafts.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogClearAllDrafts proto.InternalMessageInfo

func (m *TLDialogClearAllDrafts) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogClearAllDrafts) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogMarkDialogUnread struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	UnreadMark           *mtproto.Bool `protobuf:"bytes,6,opt,name=unread_mark,json=unreadMark,proto3" json:"unread_mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogMarkDialogUnread) Reset()         { *m = TLDialogMarkDialogUnread{} }
func (m *TLDialogMarkDialogUnread) String() string { return proto.CompactTextString(m) }
func (*TLDialogMarkDialogUnread) ProtoMessage()    {}
func (*TLDialogMarkDialogUnread) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{16}
}
func (m *TLDialogMarkDialogUnread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogMarkDialogUnread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogMarkDialogUnread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogMarkDialogUnread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogMarkDialogUnread.Merge(m, src)
}
func (m *TLDialogMarkDialogUnread) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogMarkDialogUnread) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogMarkDialogUnread.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogMarkDialogUnread proto.InternalMessageInfo

func (m *TLDialogMarkDialogUnread) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogMarkDialogUnread) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogMarkDialogUnread) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogMarkDialogUnread) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogMarkDialogUnread) GetUnreadMark() *mtproto.Bool {
	if m != nil {
		return m.UnreadMark
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogToggleDialogPin struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Pinned               *mtproto.Bool `protobuf:"bytes,6,opt,name=pinned,proto3" json:"pinned,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogToggleDialogPin) Reset()         { *m = TLDialogToggleDialogPin{} }
func (m *TLDialogToggleDialogPin) String() string { return proto.CompactTextString(m) }
func (*TLDialogToggleDialogPin) ProtoMessage()    {}
func (*TLDialogToggleDialogPin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{17}
}
func (m *TLDialogToggleDialogPin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogToggleDialogPin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogToggleDialogPin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogToggleDialogPin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogToggleDialogPin.Merge(m, src)
}
func (m *TLDialogToggleDialogPin) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogToggleDialogPin) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogToggleDialogPin.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogToggleDialogPin proto.InternalMessageInfo

func (m *TLDialogToggleDialogPin) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogToggleDialogPin) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogToggleDialogPin) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogToggleDialogPin) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogToggleDialogPin) GetPinned() *mtproto.Bool {
	if m != nil {
		return m.Pinned
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogUnreadMarkList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogUnreadMarkList) Reset()         { *m = TLDialogGetDialogUnreadMarkList{} }
func (m *TLDialogGetDialogUnreadMarkList) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogUnreadMarkList) ProtoMessage()    {}
func (*TLDialogGetDialogUnreadMarkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{18}
}
func (m *TLDialogGetDialogUnreadMarkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogUnreadMarkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogUnreadMarkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogUnreadMarkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogUnreadMarkList.Merge(m, src)
}
func (m *TLDialogGetDialogUnreadMarkList) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogUnreadMarkList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogUnreadMarkList.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogUnreadMarkList proto.InternalMessageInfo

func (m *TLDialogGetDialogUnreadMarkList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogUnreadMarkList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogsByOffsetDate struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned        *mtproto.Bool `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	OffsetDate           int32         `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	Limit                int32         `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogsByOffsetDate) Reset()         { *m = TLDialogGetDialogsByOffsetDate{} }
func (m *TLDialogGetDialogsByOffsetDate) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogsByOffsetDate) ProtoMessage()    {}
func (*TLDialogGetDialogsByOffsetDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{19}
}
func (m *TLDialogGetDialogsByOffsetDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogsByOffsetDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogsByOffsetDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogsByOffsetDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogsByOffsetDate.Merge(m, src)
}
func (m *TLDialogGetDialogsByOffsetDate) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogsByOffsetDate) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogsByOffsetDate.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogsByOffsetDate proto.InternalMessageInfo

func (m *TLDialogGetDialogsByOffsetDate) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogsByOffsetDate) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogsByOffsetDate) GetExcludePinned() *mtproto.Bool {
	if m != nil {
		return m.ExcludePinned
	}
	return nil
}

func (m *TLDialogGetDialogsByOffsetDate) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLDialogGetDialogsByOffsetDate) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogs struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned        *mtproto.Bool `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	FolderId             int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogs) Reset()         { *m = TLDialogGetDialogs{} }
func (m *TLDialogGetDialogs) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogs) ProtoMessage()    {}
func (*TLDialogGetDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{20}
}
func (m *TLDialogGetDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogs.Merge(m, src)
}
func (m *TLDialogGetDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogs proto.InternalMessageInfo

func (m *TLDialogGetDialogs) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogs) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogs) GetExcludePinned() *mtproto.Bool {
	if m != nil {
		return m.ExcludePinned
	}
	return nil
}

func (m *TLDialogGetDialogs) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogsByIdList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IdList               []int64       `protobuf:"varint,4,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogsByIdList) Reset()         { *m = TLDialogGetDialogsByIdList{} }
func (m *TLDialogGetDialogsByIdList) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogsByIdList) ProtoMessage()    {}
func (*TLDialogGetDialogsByIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{21}
}
func (m *TLDialogGetDialogsByIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogsByIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogsByIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogsByIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogsByIdList.Merge(m, src)
}
func (m *TLDialogGetDialogsByIdList) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogsByIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogsByIdList.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogsByIdList proto.InternalMessageInfo

func (m *TLDialogGetDialogsByIdList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogsByIdList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogsByIdList) GetIdList() []int64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogsCount struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned        *mtproto.Bool `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	FolderId             int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogsCount) Reset()         { *m = TLDialogGetDialogsCount{} }
func (m *TLDialogGetDialogsCount) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogsCount) ProtoMessage()    {}
func (*TLDialogGetDialogsCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{22}
}
func (m *TLDialogGetDialogsCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogsCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogsCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogsCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogsCount.Merge(m, src)
}
func (m *TLDialogGetDialogsCount) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogsCount) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogsCount.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogsCount proto.InternalMessageInfo

func (m *TLDialogGetDialogsCount) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogsCount) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogsCount) GetExcludePinned() *mtproto.Bool {
	if m != nil {
		return m.ExcludePinned
	}
	return nil
}

func (m *TLDialogGetDialogsCount) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetPinnedDialogs struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FolderId             int32         `protobuf:"varint,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetPinnedDialogs) Reset()         { *m = TLDialogGetPinnedDialogs{} }
func (m *TLDialogGetPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetPinnedDialogs) ProtoMessage()    {}
func (*TLDialogGetPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{23}
}
func (m *TLDialogGetPinnedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetPinnedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetPinnedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetPinnedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetPinnedDialogs.Merge(m, src)
}
func (m *TLDialogGetPinnedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetPinnedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetPinnedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetPinnedDialogs proto.InternalMessageInfo

func (m *TLDialogGetPinnedDialogs) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetPinnedDialogs) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetPinnedDialogs) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogReorderPinnedDialogs struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Force                *mtproto.Bool `protobuf:"bytes,4,opt,name=force,proto3" json:"force,omitempty"`
	FolderId             int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	IdList               []int64       `protobuf:"varint,6,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogReorderPinnedDialogs) Reset()         { *m = TLDialogReorderPinnedDialogs{} }
func (m *TLDialogReorderPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLDialogReorderPinnedDialogs) ProtoMessage()    {}
func (*TLDialogReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{24}
}
func (m *TLDialogReorderPinnedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogReorderPinnedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogReorderPinnedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogReorderPinnedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogReorderPinnedDialogs.Merge(m, src)
}
func (m *TLDialogReorderPinnedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogReorderPinnedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogReorderPinnedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogReorderPinnedDialogs proto.InternalMessageInfo

func (m *TLDialogReorderPinnedDialogs) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogReorderPinnedDialogs) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogReorderPinnedDialogs) GetForce() *mtproto.Bool {
	if m != nil {
		return m.Force
	}
	return nil
}

func (m *TLDialogReorderPinnedDialogs) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *TLDialogReorderPinnedDialogs) GetIdList() []int64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogById struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogById) Reset()         { *m = TLDialogGetDialogById{} }
func (m *TLDialogGetDialogById) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogById) ProtoMessage()    {}
func (*TLDialogGetDialogById) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{25}
}
func (m *TLDialogGetDialogById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogById.Merge(m, src)
}
func (m *TLDialogGetDialogById) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogById) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogById.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogById proto.InternalMessageInfo

func (m *TLDialogGetDialogById) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogById) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogById) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogGetDialogById) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetTopMessage struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetTopMessage) Reset()         { *m = TLDialogGetTopMessage{} }
func (m *TLDialogGetTopMessage) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetTopMessage) ProtoMessage()    {}
func (*TLDialogGetTopMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{26}
}
func (m *TLDialogGetTopMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetTopMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetTopMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetTopMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetTopMessage.Merge(m, src)
}
func (m *TLDialogGetTopMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetTopMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetTopMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetTopMessage proto.InternalMessageInfo

func (m *TLDialogGetTopMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetTopMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetTopMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogGetTopMessage) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateReadInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ReadInboxId          int32         `protobuf:"varint,6,opt,name=read_inbox_id,json=readInboxId,proto3" json:"read_inbox_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogUpdateReadInbox) Reset()         { *m = TLDialogUpdateReadInbox{} }
func (m *TLDialogUpdateReadInbox) String() string { return proto.CompactTextString(m) }
func (*TLDialogUpdateReadInbox) ProtoMessage()    {}
func (*TLDialogUpdateReadInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{27}
}
func (m *TLDialogUpdateReadInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogUpdateReadInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogUpdateReadInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogUpdateReadInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogUpdateReadInbox.Merge(m, src)
}
func (m *TLDialogUpdateReadInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogUpdateReadInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogUpdateReadInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogUpdateReadInbox proto.InternalMessageInfo

func (m *TLDialogUpdateReadInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogUpdateReadInbox) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogUpdateReadInbox) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogUpdateReadInbox) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogUpdateReadInbox) GetReadInboxId() int32 {
	if m != nil {
		return m.ReadInboxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateReadOutbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ReadOutboxId         int32         `protobuf:"varint,6,opt,name=read_outbox_id,json=readOutboxId,proto3" json:"read_outbox_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogUpdateReadOutbox) Reset()         { *m = TLDialogUpdateReadOutbox{} }
func (m *TLDialogUpdateReadOutbox) String() string { return proto.CompactTextString(m) }
func (*TLDialogUpdateReadOutbox) ProtoMessage()    {}
func (*TLDialogUpdateReadOutbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{28}
}
func (m *TLDialogUpdateReadOutbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogUpdateReadOutbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogUpdateReadOutbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogUpdateReadOutbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogUpdateReadOutbox.Merge(m, src)
}
func (m *TLDialogUpdateReadOutbox) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogUpdateReadOutbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogUpdateReadOutbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogUpdateReadOutbox proto.InternalMessageInfo

func (m *TLDialogUpdateReadOutbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogUpdateReadOutbox) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogUpdateReadOutbox) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogUpdateReadOutbox) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogUpdateReadOutbox) GetReadOutboxId() int32 {
	if m != nil {
		return m.ReadOutboxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogInsertOrUpdateDialog struct {
	Constructor          TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32             `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64             `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	TopMessage           *types.Int32Value `protobuf:"bytes,6,opt,name=top_message,json=topMessage,proto3" json:"top_message,omitempty"`
	ReadOutboxMaxId      *types.Int32Value `protobuf:"bytes,7,opt,name=read_outbox_max_id,json=readOutboxMaxId,proto3" json:"read_outbox_max_id,omitempty"`
	ReadInboxMaxId       *types.Int32Value `protobuf:"bytes,8,opt,name=read_inbox_max_id,json=readInboxMaxId,proto3" json:"read_inbox_max_id,omitempty"`
	UnreadCount          *types.Int32Value `protobuf:"bytes,9,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	UnreadMark           bool              `protobuf:"varint,10,opt,name=unread_mark,json=unreadMark,proto3" json:"unread_mark,omitempty"`
	Date2                *types.Int64Value `protobuf:"bytes,11,opt,name=date2,proto3" json:"date2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLDialogInsertOrUpdateDialog) Reset()         { *m = TLDialogInsertOrUpdateDialog{} }
func (m *TLDialogInsertOrUpdateDialog) String() string { return proto.CompactTextString(m) }
func (*TLDialogInsertOrUpdateDialog) ProtoMessage()    {}
func (*TLDialogInsertOrUpdateDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{29}
}
func (m *TLDialogInsertOrUpdateDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogInsertOrUpdateDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogInsertOrUpdateDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogInsertOrUpdateDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogInsertOrUpdateDialog.Merge(m, src)
}
func (m *TLDialogInsertOrUpdateDialog) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogInsertOrUpdateDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogInsertOrUpdateDialog.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogInsertOrUpdateDialog proto.InternalMessageInfo

func (m *TLDialogInsertOrUpdateDialog) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogInsertOrUpdateDialog) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogInsertOrUpdateDialog) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogInsertOrUpdateDialog) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogInsertOrUpdateDialog) GetTopMessage() *types.Int32Value {
	if m != nil {
		return m.TopMessage
	}
	return nil
}

func (m *TLDialogInsertOrUpdateDialog) GetReadOutboxMaxId() *types.Int32Value {
	if m != nil {
		return m.ReadOutboxMaxId
	}
	return nil
}

func (m *TLDialogInsertOrUpdateDialog) GetReadInboxMaxId() *types.Int32Value {
	if m != nil {
		return m.ReadInboxMaxId
	}
	return nil
}

func (m *TLDialogInsertOrUpdateDialog) GetUnreadCount() *types.Int32Value {
	if m != nil {
		return m.UnreadCount
	}
	return nil
}

func (m *TLDialogInsertOrUpdateDialog) GetUnreadMark() bool {
	if m != nil {
		return m.UnreadMark
	}
	return false
}

func (m *TLDialogInsertOrUpdateDialog) GetDate2() *types.Int64Value {
	if m != nil {
		return m.Date2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogDeleteDialog struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogDeleteDialog) Reset()         { *m = TLDialogDeleteDialog{} }
func (m *TLDialogDeleteDialog) String() string { return proto.CompactTextString(m) }
func (*TLDialogDeleteDialog) ProtoMessage()    {}
func (*TLDialogDeleteDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{30}
}
func (m *TLDialogDeleteDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogDeleteDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogDeleteDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogDeleteDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogDeleteDialog.Merge(m, src)
}
func (m *TLDialogDeleteDialog) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogDeleteDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogDeleteDialog.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogDeleteDialog proto.InternalMessageInfo

func (m *TLDialogDeleteDialog) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogDeleteDialog) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogDeleteDialog) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogDeleteDialog) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetUserPinnedMessage struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetUserPinnedMessage) Reset()         { *m = TLDialogGetUserPinnedMessage{} }
func (m *TLDialogGetUserPinnedMessage) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetUserPinnedMessage) ProtoMessage()    {}
func (*TLDialogGetUserPinnedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{31}
}
func (m *TLDialogGetUserPinnedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetUserPinnedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetUserPinnedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetUserPinnedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetUserPinnedMessage.Merge(m, src)
}
func (m *TLDialogGetUserPinnedMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetUserPinnedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetUserPinnedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetUserPinnedMessage proto.InternalMessageInfo

func (m *TLDialogGetUserPinnedMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetUserPinnedMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetUserPinnedMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogGetUserPinnedMessage) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateUserPinnedMessage struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PinnedMsgId          int32         `protobuf:"varint,6,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogUpdateUserPinnedMessage) Reset()         { *m = TLDialogUpdateUserPinnedMessage{} }
func (m *TLDialogUpdateUserPinnedMessage) String() string { return proto.CompactTextString(m) }
func (*TLDialogUpdateUserPinnedMessage) ProtoMessage()    {}
func (*TLDialogUpdateUserPinnedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{32}
}
func (m *TLDialogUpdateUserPinnedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogUpdateUserPinnedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogUpdateUserPinnedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogUpdateUserPinnedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogUpdateUserPinnedMessage.Merge(m, src)
}
func (m *TLDialogUpdateUserPinnedMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogUpdateUserPinnedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogUpdateUserPinnedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogUpdateUserPinnedMessage proto.InternalMessageInfo

func (m *TLDialogUpdateUserPinnedMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogUpdateUserPinnedMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogUpdateUserPinnedMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogUpdateUserPinnedMessage) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogUpdateUserPinnedMessage) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogInsertOrUpdateDialogFilter struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   int32                 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	DialogFilter         *mtproto.DialogFilter `protobuf:"bytes,5,opt,name=dialog_filter,json=dialogFilter,proto3" json:"dialog_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLDialogInsertOrUpdateDialogFilter) Reset()         { *m = TLDialogInsertOrUpdateDialogFilter{} }
func (m *TLDialogInsertOrUpdateDialogFilter) String() string { return proto.CompactTextString(m) }
func (*TLDialogInsertOrUpdateDialogFilter) ProtoMessage()    {}
func (*TLDialogInsertOrUpdateDialogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{33}
}
func (m *TLDialogInsertOrUpdateDialogFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogInsertOrUpdateDialogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogInsertOrUpdateDialogFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogInsertOrUpdateDialogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogInsertOrUpdateDialogFilter.Merge(m, src)
}
func (m *TLDialogInsertOrUpdateDialogFilter) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogInsertOrUpdateDialogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogInsertOrUpdateDialogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogInsertOrUpdateDialogFilter proto.InternalMessageInfo

func (m *TLDialogInsertOrUpdateDialogFilter) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogInsertOrUpdateDialogFilter) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogInsertOrUpdateDialogFilter) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLDialogInsertOrUpdateDialogFilter) GetDialogFilter() *mtproto.DialogFilter {
	if m != nil {
		return m.DialogFilter
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogDeleteDialogFilter struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogDeleteDialogFilter) Reset()         { *m = TLDialogDeleteDialogFilter{} }
func (m *TLDialogDeleteDialogFilter) String() string { return proto.CompactTextString(m) }
func (*TLDialogDeleteDialogFilter) ProtoMessage()    {}
func (*TLDialogDeleteDialogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{34}
}
func (m *TLDialogDeleteDialogFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogDeleteDialogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogDeleteDialogFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogDeleteDialogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogDeleteDialogFilter.Merge(m, src)
}
func (m *TLDialogDeleteDialogFilter) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogDeleteDialogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogDeleteDialogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogDeleteDialogFilter proto.InternalMessageInfo

func (m *TLDialogDeleteDialogFilter) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogDeleteDialogFilter) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogDeleteDialogFilter) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateDialogFiltersOrder struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Order                []int32       `protobuf:"varint,4,rep,packed,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogUpdateDialogFiltersOrder) Reset()         { *m = TLDialogUpdateDialogFiltersOrder{} }
func (m *TLDialogUpdateDialogFiltersOrder) String() string { return proto.CompactTextString(m) }
func (*TLDialogUpdateDialogFiltersOrder) ProtoMessage()    {}
func (*TLDialogUpdateDialogFiltersOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{35}
}
func (m *TLDialogUpdateDialogFiltersOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogUpdateDialogFiltersOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogUpdateDialogFiltersOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogUpdateDialogFiltersOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogUpdateDialogFiltersOrder.Merge(m, src)
}
func (m *TLDialogUpdateDialogFiltersOrder) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogUpdateDialogFiltersOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogUpdateDialogFiltersOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogUpdateDialogFiltersOrder proto.InternalMessageInfo

func (m *TLDialogUpdateDialogFiltersOrder) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogUpdateDialogFiltersOrder) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogUpdateDialogFiltersOrder) GetOrder() []int32 {
	if m != nil {
		return m.Order
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFilters struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogFilters) Reset()         { *m = TLDialogGetDialogFilters{} }
func (m *TLDialogGetDialogFilters) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogFilters) ProtoMessage()    {}
func (*TLDialogGetDialogFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{36}
}
func (m *TLDialogGetDialogFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogFilters.Merge(m, src)
}
func (m *TLDialogGetDialogFilters) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogFilters.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogFilters proto.InternalMessageInfo

func (m *TLDialogGetDialogFilters) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogFilters) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFolder struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FolderId             int32         `protobuf:"varint,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogFolder) Reset()         { *m = TLDialogGetDialogFolder{} }
func (m *TLDialogGetDialogFolder) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogFolder) ProtoMessage()    {}
func (*TLDialogGetDialogFolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{37}
}
func (m *TLDialogGetDialogFolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogFolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogFolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogFolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogFolder.Merge(m, src)
}
func (m *TLDialogGetDialogFolder) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogFolder) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogFolder.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogFolder proto.InternalMessageInfo

func (m *TLDialogGetDialogFolder) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogFolder) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogFolder) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogEditPeerFolders struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerDialogList       []int64       `protobuf:"varint,4,rep,packed,name=peer_dialog_list,json=peerDialogList,proto3" json:"peer_dialog_list,omitempty"`
	FolderId             int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogEditPeerFolders) Reset()         { *m = TLDialogEditPeerFolders{} }
func (m *TLDialogEditPeerFolders) String() string { return proto.CompactTextString(m) }
func (*TLDialogEditPeerFolders) ProtoMessage()    {}
func (*TLDialogEditPeerFolders) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{38}
}
func (m *TLDialogEditPeerFolders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogEditPeerFolders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogEditPeerFolders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogEditPeerFolders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogEditPeerFolders.Merge(m, src)
}
func (m *TLDialogEditPeerFolders) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogEditPeerFolders) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogEditPeerFolders.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogEditPeerFolders proto.InternalMessageInfo

func (m *TLDialogEditPeerFolders) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogEditPeerFolders) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogEditPeerFolders) GetPeerDialogList() []int64 {
	if m != nil {
		return m.PeerDialogList
	}
	return nil
}

func (m *TLDialogEditPeerFolders) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetChannelMessageReadParticipants struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId            int64         `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MsgId                int32         `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetChannelMessageReadParticipants) Reset() {
	*m = TLDialogGetChannelMessageReadParticipants{}
}
func (m *TLDialogGetChannelMessageReadParticipants) String() string {
	return proto.CompactTextString(m)
}
func (*TLDialogGetChannelMessageReadParticipants) ProtoMessage() {}
func (*TLDialogGetChannelMessageReadParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{39}
}
func (m *TLDialogGetChannelMessageReadParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetChannelMessageReadParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetChannelMessageReadParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetChannelMessageReadParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetChannelMessageReadParticipants.Merge(m, src)
}
func (m *TLDialogGetChannelMessageReadParticipants) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetChannelMessageReadParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetChannelMessageReadParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetChannelMessageReadParticipants proto.InternalMessageInfo

func (m *TLDialogGetChannelMessageReadParticipants) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetChannelMessageReadParticipants) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetChannelMessageReadParticipants) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TLDialogGetChannelMessageReadParticipants) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogSetChatTheme struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ThemeEmoticon        string        `protobuf:"bytes,6,opt,name=theme_emoticon,json=themeEmoticon,proto3" json:"theme_emoticon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogSetChatTheme) Reset()         { *m = TLDialogSetChatTheme{} }
func (m *TLDialogSetChatTheme) String() string { return proto.CompactTextString(m) }
func (*TLDialogSetChatTheme) ProtoMessage()    {}
func (*TLDialogSetChatTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{40}
}
func (m *TLDialogSetChatTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogSetChatTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogSetChatTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogSetChatTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogSetChatTheme.Merge(m, src)
}
func (m *TLDialogSetChatTheme) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogSetChatTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogSetChatTheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogSetChatTheme proto.InternalMessageInfo

func (m *TLDialogSetChatTheme) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogSetChatTheme) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogSetChatTheme) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogSetChatTheme) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogSetChatTheme) GetThemeEmoticon() string {
	if m != nil {
		return m.ThemeEmoticon
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLDialogSetHistoryTTL struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	TtlPeriod            int32         `protobuf:"varint,6,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogSetHistoryTTL) Reset()         { *m = TLDialogSetHistoryTTL{} }
func (m *TLDialogSetHistoryTTL) String() string { return proto.CompactTextString(m) }
func (*TLDialogSetHistoryTTL) ProtoMessage()    {}
func (*TLDialogSetHistoryTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{41}
}
func (m *TLDialogSetHistoryTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogSetHistoryTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogSetHistoryTTL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogSetHistoryTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogSetHistoryTTL.Merge(m, src)
}
func (m *TLDialogSetHistoryTTL) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogSetHistoryTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogSetHistoryTTL.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogSetHistoryTTL proto.InternalMessageInfo

func (m *TLDialogSetHistoryTTL) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogSetHistoryTTL) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogSetHistoryTTL) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLDialogSetHistoryTTL) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLDialogSetHistoryTTL) GetTtlPeriod() int32 {
	if m != nil {
		return m.TtlPeriod
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetMyDialogsData struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	User                 bool          `protobuf:"varint,4,opt,name=user,proto3" json:"user,omitempty"`
	Chat                 bool          `protobuf:"varint,5,opt,name=chat,proto3" json:"chat,omitempty"`
	Channel              bool          `protobuf:"varint,6,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetMyDialogsData) Reset()         { *m = TLDialogGetMyDialogsData{} }
func (m *TLDialogGetMyDialogsData) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetMyDialogsData) ProtoMessage()    {}
func (*TLDialogGetMyDialogsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{42}
}
func (m *TLDialogGetMyDialogsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetMyDialogsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetMyDialogsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetMyDialogsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetMyDialogsData.Merge(m, src)
}
func (m *TLDialogGetMyDialogsData) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetMyDialogsData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetMyDialogsData.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetMyDialogsData proto.InternalMessageInfo

func (m *TLDialogGetMyDialogsData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetMyDialogsData) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetMyDialogsData) GetUser() bool {
	if m != nil {
		return m.User
	}
	return false
}

func (m *TLDialogGetMyDialogsData) GetChat() bool {
	if m != nil {
		return m.Chat
	}
	return false
}

func (m *TLDialogGetMyDialogsData) GetChannel() bool {
	if m != nil {
		return m.Channel
	}
	return false
}

// --------------------------------------------------------------------------------------------
type TLDialogGetSavedDialogs struct {
	Constructor          TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned        *mtproto.Bool     `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	OffsetDate           int32             `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId             int32             `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer           *mtproto.PeerUtil `protobuf:"bytes,7,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit                int32             `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLDialogGetSavedDialogs) Reset()         { *m = TLDialogGetSavedDialogs{} }
func (m *TLDialogGetSavedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetSavedDialogs) ProtoMessage()    {}
func (*TLDialogGetSavedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{43}
}
func (m *TLDialogGetSavedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetSavedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetSavedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetSavedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetSavedDialogs.Merge(m, src)
}
func (m *TLDialogGetSavedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetSavedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetSavedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetSavedDialogs proto.InternalMessageInfo

func (m *TLDialogGetSavedDialogs) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetSavedDialogs) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetSavedDialogs) GetExcludePinned() *mtproto.Bool {
	if m != nil {
		return m.ExcludePinned
	}
	return nil
}

func (m *TLDialogGetSavedDialogs) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLDialogGetSavedDialogs) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLDialogGetSavedDialogs) GetOffsetPeer() *mtproto.PeerUtil {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLDialogGetSavedDialogs) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetPinnedSavedDialogs struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetPinnedSavedDialogs) Reset()         { *m = TLDialogGetPinnedSavedDialogs{} }
func (m *TLDialogGetPinnedSavedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetPinnedSavedDialogs) ProtoMessage()    {}
func (*TLDialogGetPinnedSavedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{44}
}
func (m *TLDialogGetPinnedSavedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetPinnedSavedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetPinnedSavedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetPinnedSavedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetPinnedSavedDialogs.Merge(m, src)
}
func (m *TLDialogGetPinnedSavedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetPinnedSavedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetPinnedSavedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetPinnedSavedDialogs proto.InternalMessageInfo

func (m *TLDialogGetPinnedSavedDialogs) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetPinnedSavedDialogs) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogToggleSavedDialogPin struct {
	Constructor          TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Peer                 *mtproto.PeerUtil `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Pinned               *mtproto.Bool     `protobuf:"bytes,5,opt,name=pinned,proto3" json:"pinned,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLDialogToggleSavedDialogPin) Reset()         { *m = TLDialogToggleSavedDialogPin{} }
func (m *TLDialogToggleSavedDialogPin) String() string { return proto.CompactTextString(m) }
func (*TLDialogToggleSavedDialogPin) ProtoMessage()    {}
func (*TLDialogToggleSavedDialogPin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{45}
}
func (m *TLDialogToggleSavedDialogPin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogToggleSavedDialogPin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogToggleSavedDialogPin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogToggleSavedDialogPin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogToggleSavedDialogPin.Merge(m, src)
}
func (m *TLDialogToggleSavedDialogPin) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogToggleSavedDialogPin) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogToggleSavedDialogPin.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogToggleSavedDialogPin proto.InternalMessageInfo

func (m *TLDialogToggleSavedDialogPin) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogToggleSavedDialogPin) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogToggleSavedDialogPin) GetPeer() *mtproto.PeerUtil {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLDialogToggleSavedDialogPin) GetPinned() *mtproto.Bool {
	if m != nil {
		return m.Pinned
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogReorderPinnedSavedDialogs struct {
	Constructor          TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Force                *mtproto.Bool       `protobuf:"bytes,4,opt,name=force,proto3" json:"force,omitempty"`
	Order                []*mtproto.PeerUtil `protobuf:"bytes,5,rep,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLDialogReorderPinnedSavedDialogs) Reset()         { *m = TLDialogReorderPinnedSavedDialogs{} }
func (m *TLDialogReorderPinnedSavedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLDialogReorderPinnedSavedDialogs) ProtoMessage()    {}
func (*TLDialogReorderPinnedSavedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{46}
}
func (m *TLDialogReorderPinnedSavedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogReorderPinnedSavedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogReorderPinnedSavedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogReorderPinnedSavedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogReorderPinnedSavedDialogs.Merge(m, src)
}
func (m *TLDialogReorderPinnedSavedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogReorderPinnedSavedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogReorderPinnedSavedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogReorderPinnedSavedDialogs proto.InternalMessageInfo

func (m *TLDialogReorderPinnedSavedDialogs) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogReorderPinnedSavedDialogs) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogReorderPinnedSavedDialogs) GetForce() *mtproto.Bool {
	if m != nil {
		return m.Force
	}
	return nil
}

func (m *TLDialogReorderPinnedSavedDialogs) GetOrder() []*mtproto.PeerUtil {
	if m != nil {
		return m.Order
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFilter struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogFilter) Reset()         { *m = TLDialogGetDialogFilter{} }
func (m *TLDialogGetDialogFilter) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogFilter) ProtoMessage()    {}
func (*TLDialogGetDialogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{47}
}
func (m *TLDialogGetDialogFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogFilter.Merge(m, src)
}
func (m *TLDialogGetDialogFilter) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogFilter proto.InternalMessageInfo

func (m *TLDialogGetDialogFilter) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogFilter) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogFilter) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFilterBySlug struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Slug                 string        `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDialogGetDialogFilterBySlug) Reset()         { *m = TLDialogGetDialogFilterBySlug{} }
func (m *TLDialogGetDialogFilterBySlug) String() string { return proto.CompactTextString(m) }
func (*TLDialogGetDialogFilterBySlug) ProtoMessage()    {}
func (*TLDialogGetDialogFilterBySlug) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{48}
}
func (m *TLDialogGetDialogFilterBySlug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogGetDialogFilterBySlug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogGetDialogFilterBySlug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogGetDialogFilterBySlug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogGetDialogFilterBySlug.Merge(m, src)
}
func (m *TLDialogGetDialogFilterBySlug) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogGetDialogFilterBySlug) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogGetDialogFilterBySlug.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogGetDialogFilterBySlug proto.InternalMessageInfo

func (m *TLDialogGetDialogFilterBySlug) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogGetDialogFilterBySlug) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogGetDialogFilterBySlug) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLDialogCreateDialogFilter struct {
	Constructor          TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64            `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DialogFilter         *DialogFilterExt `protobuf:"bytes,4,opt,name=dialog_filter,json=dialogFilter,proto3" json:"dialog_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLDialogCreateDialogFilter) Reset()         { *m = TLDialogCreateDialogFilter{} }
func (m *TLDialogCreateDialogFilter) String() string { return proto.CompactTextString(m) }
func (*TLDialogCreateDialogFilter) ProtoMessage()    {}
func (*TLDialogCreateDialogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{49}
}
func (m *TLDialogCreateDialogFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDialogCreateDialogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDialogCreateDialogFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDialogCreateDialogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDialogCreateDialogFilter.Merge(m, src)
}
func (m *TLDialogCreateDialogFilter) XXX_Size() int {
	return m.Size()
}
func (m *TLDialogCreateDialogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDialogCreateDialogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TLDialogCreateDialogFilter proto.InternalMessageInfo

func (m *TLDialogCreateDialogFilter) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLDialogCreateDialogFilter) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLDialogCreateDialogFilter) GetDialogFilter() *DialogFilterExt {
	if m != nil {
		return m.DialogFilter
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_PeerWithDraftMessage struct {
	Datas                []*PeerWithDraftMessage `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Vector_PeerWithDraftMessage) Reset()         { *m = Vector_PeerWithDraftMessage{} }
func (m *Vector_PeerWithDraftMessage) String() string { return proto.CompactTextString(m) }
func (*Vector_PeerWithDraftMessage) ProtoMessage()    {}
func (*Vector_PeerWithDraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{50}
}
func (m *Vector_PeerWithDraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_PeerWithDraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_PeerWithDraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_PeerWithDraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_PeerWithDraftMessage.Merge(m, src)
}
func (m *Vector_PeerWithDraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *Vector_PeerWithDraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_PeerWithDraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_PeerWithDraftMessage proto.InternalMessageInfo

func (m *Vector_PeerWithDraftMessage) GetDatas() []*PeerWithDraftMessage {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_DialogPeer struct {
	Datas                []*mtproto.DialogPeer `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Vector_DialogPeer) Reset()         { *m = Vector_DialogPeer{} }
func (m *Vector_DialogPeer) String() string { return proto.CompactTextString(m) }
func (*Vector_DialogPeer) ProtoMessage()    {}
func (*Vector_DialogPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{51}
}
func (m *Vector_DialogPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_DialogPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_DialogPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_DialogPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_DialogPeer.Merge(m, src)
}
func (m *Vector_DialogPeer) XXX_Size() int {
	return m.Size()
}
func (m *Vector_DialogPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_DialogPeer.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_DialogPeer proto.InternalMessageInfo

func (m *Vector_DialogPeer) GetDatas() []*mtproto.DialogPeer {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_DialogExt struct {
	Datas                []*DialogExt `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Vector_DialogExt) Reset()         { *m = Vector_DialogExt{} }
func (m *Vector_DialogExt) String() string { return proto.CompactTextString(m) }
func (*Vector_DialogExt) ProtoMessage()    {}
func (*Vector_DialogExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{52}
}
func (m *Vector_DialogExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_DialogExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_DialogExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_DialogExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_DialogExt.Merge(m, src)
}
func (m *Vector_DialogExt) XXX_Size() int {
	return m.Size()
}
func (m *Vector_DialogExt) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_DialogExt.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_DialogExt proto.InternalMessageInfo

func (m *Vector_DialogExt) GetDatas() []*DialogExt {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_DialogFilterExt struct {
	Datas                []*DialogFilterExt `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Vector_DialogFilterExt) Reset()         { *m = Vector_DialogFilterExt{} }
func (m *Vector_DialogFilterExt) String() string { return proto.CompactTextString(m) }
func (*Vector_DialogFilterExt) ProtoMessage()    {}
func (*Vector_DialogFilterExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{53}
}
func (m *Vector_DialogFilterExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_DialogFilterExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_DialogFilterExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_DialogFilterExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_DialogFilterExt.Merge(m, src)
}
func (m *Vector_DialogFilterExt) XXX_Size() int {
	return m.Size()
}
func (m *Vector_DialogFilterExt) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_DialogFilterExt.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_DialogFilterExt proto.InternalMessageInfo

func (m *Vector_DialogFilterExt) GetDatas() []*DialogFilterExt {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_DialogPinnedExt struct {
	Datas                []*DialogPinnedExt `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Vector_DialogPinnedExt) Reset()         { *m = Vector_DialogPinnedExt{} }
func (m *Vector_DialogPinnedExt) String() string { return proto.CompactTextString(m) }
func (*Vector_DialogPinnedExt) ProtoMessage()    {}
func (*Vector_DialogPinnedExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{54}
}
func (m *Vector_DialogPinnedExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_DialogPinnedExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_DialogPinnedExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_DialogPinnedExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_DialogPinnedExt.Merge(m, src)
}
func (m *Vector_DialogPinnedExt) XXX_Size() int {
	return m.Size()
}
func (m *Vector_DialogPinnedExt) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_DialogPinnedExt.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_DialogPinnedExt proto.InternalMessageInfo

func (m *Vector_DialogPinnedExt) GetDatas() []*DialogPinnedExt {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_Long struct {
	Datas                []int64  `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector_Long) Reset()         { *m = Vector_Long{} }
func (m *Vector_Long) String() string { return proto.CompactTextString(m) }
func (*Vector_Long) ProtoMessage()    {}
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe6dcb8d4fc860, []int{55}
}
func (m *Vector_Long) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_Long) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_Long.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_Long) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_Long.Merge(m, src)
}
func (m *Vector_Long) XXX_Size() int {
	return m.Size()
}
func (m *Vector_Long) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_Long.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_Long proto.InternalMessageInfo

func (m *Vector_Long) GetDatas() []int64 {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterEnum("dialog.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*DialogExt)(nil), "dialog.DialogExt")
	proto.RegisterType((*TLDialogExt)(nil), "dialog.TL_dialogExt")
	proto.RegisterType((*DialogFilterExt)(nil), "dialog.DialogFilterExt")
	proto.RegisterType((*TLDialogFilterExt)(nil), "dialog.TL_dialogFilterExt")
	proto.RegisterType((*DialogPinnedExt)(nil), "dialog.DialogPinnedExt")
	proto.RegisterType((*TLDialogPinnedExt)(nil), "dialog.TL_dialogPinnedExt")
	proto.RegisterType((*DialogsData)(nil), "dialog.DialogsData")
	proto.RegisterType((*TLSimpleDialogsData)(nil), "dialog.TL_simpleDialogsData")
	proto.RegisterType((*PeerWithDraftMessage)(nil), "dialog.PeerWithDraftMessage")
	proto.RegisterType((*TLUpdateDraftMessage)(nil), "dialog.TL_updateDraftMessage")
	proto.RegisterType((*SavedDialogList)(nil), "dialog.SavedDialogList")
	proto.RegisterType((*TLSavedDialogList)(nil), "dialog.TL_savedDialogList")
	proto.RegisterType((*TLDialogSaveDraftMessage)(nil), "dialog.TL_dialog_saveDraftMessage")
	proto.RegisterType((*TLDialogClearDraftMessage)(nil), "dialog.TL_dialog_clearDraftMessage")
	proto.RegisterType((*TLDialogGetAllDrafts)(nil), "dialog.TL_dialog_getAllDrafts")
	proto.RegisterType((*TLDialogClearAllDrafts)(nil), "dialog.TL_dialog_clearAllDrafts")
	proto.RegisterType((*TLDialogMarkDialogUnread)(nil), "dialog.TL_dialog_markDialogUnread")
	proto.RegisterType((*TLDialogToggleDialogPin)(nil), "dialog.TL_dialog_toggleDialogPin")
	proto.RegisterType((*TLDialogGetDialogUnreadMarkList)(nil), "dialog.TL_dialog_getDialogUnreadMarkList")
	proto.RegisterType((*TLDialogGetDialogsByOffsetDate)(nil), "dialog.TL_dialog_getDialogsByOffsetDate")
	proto.RegisterType((*TLDialogGetDialogs)(nil), "dialog.TL_dialog_getDialogs")
	proto.RegisterType((*TLDialogGetDialogsByIdList)(nil), "dialog.TL_dialog_getDialogsByIdList")
	proto.RegisterType((*TLDialogGetDialogsCount)(nil), "dialog.TL_dialog_getDialogsCount")
	proto.RegisterType((*TLDialogGetPinnedDialogs)(nil), "dialog.TL_dialog_getPinnedDialogs")
	proto.RegisterType((*TLDialogReorderPinnedDialogs)(nil), "dialog.TL_dialog_reorderPinnedDialogs")
	proto.RegisterType((*TLDialogGetDialogById)(nil), "dialog.TL_dialog_getDialogById")
	proto.RegisterType((*TLDialogGetTopMessage)(nil), "dialog.TL_dialog_getTopMessage")
	proto.RegisterType((*TLDialogUpdateReadInbox)(nil), "dialog.TL_dialog_updateReadInbox")
	proto.RegisterType((*TLDialogUpdateReadOutbox)(nil), "dialog.TL_dialog_updateReadOutbox")
	proto.RegisterType((*TLDialogInsertOrUpdateDialog)(nil), "dialog.TL_dialog_insertOrUpdateDialog")
	proto.RegisterType((*TLDialogDeleteDialog)(nil), "dialog.TL_dialog_deleteDialog")
	proto.RegisterType((*TLDialogGetUserPinnedMessage)(nil), "dialog.TL_dialog_getUserPinnedMessage")
	proto.RegisterType((*TLDialogUpdateUserPinnedMessage)(nil), "dialog.TL_dialog_updateUserPinnedMessage")
	proto.RegisterType((*TLDialogInsertOrUpdateDialogFilter)(nil), "dialog.TL_dialog_insertOrUpdateDialogFilter")
	proto.RegisterType((*TLDialogDeleteDialogFilter)(nil), "dialog.TL_dialog_deleteDialogFilter")
	proto.RegisterType((*TLDialogUpdateDialogFiltersOrder)(nil), "dialog.TL_dialog_updateDialogFiltersOrder")
	proto.RegisterType((*TLDialogGetDialogFilters)(nil), "dialog.TL_dialog_getDialogFilters")
	proto.RegisterType((*TLDialogGetDialogFolder)(nil), "dialog.TL_dialog_getDialogFolder")
	proto.RegisterType((*TLDialogEditPeerFolders)(nil), "dialog.TL_dialog_editPeerFolders")
	proto.RegisterType((*TLDialogGetChannelMessageReadParticipants)(nil), "dialog.TL_dialog_getChannelMessageReadParticipants")
	proto.RegisterType((*TLDialogSetChatTheme)(nil), "dialog.TL_dialog_setChatTheme")
	proto.RegisterType((*TLDialogSetHistoryTTL)(nil), "dialog.TL_dialog_setHistoryTTL")
	proto.RegisterType((*TLDialogGetMyDialogsData)(nil), "dialog.TL_dialog_getMyDialogsData")
	proto.RegisterType((*TLDialogGetSavedDialogs)(nil), "dialog.TL_dialog_getSavedDialogs")
	proto.RegisterType((*TLDialogGetPinnedSavedDialogs)(nil), "dialog.TL_dialog_getPinnedSavedDialogs")
	proto.RegisterType((*TLDialogToggleSavedDialogPin)(nil), "dialog.TL_dialog_toggleSavedDialogPin")
	proto.RegisterType((*TLDialogReorderPinnedSavedDialogs)(nil), "dialog.TL_dialog_reorderPinnedSavedDialogs")
	proto.RegisterType((*TLDialogGetDialogFilter)(nil), "dialog.TL_dialog_getDialogFilter")
	proto.RegisterType((*TLDialogGetDialogFilterBySlug)(nil), "dialog.TL_dialog_getDialogFilterBySlug")
	proto.RegisterType((*TLDialogCreateDialogFilter)(nil), "dialog.TL_dialog_createDialogFilter")
	proto.RegisterType((*Vector_PeerWithDraftMessage)(nil), "dialog.Vector_PeerWithDraftMessage")
	proto.RegisterType((*Vector_DialogPeer)(nil), "dialog.Vector_DialogPeer")
	proto.RegisterType((*Vector_DialogExt)(nil), "dialog.Vector_DialogExt")
	proto.RegisterType((*Vector_DialogFilterExt)(nil), "dialog.Vector_DialogFilterExt")
	proto.RegisterType((*Vector_DialogPinnedExt)(nil), "dialog.Vector_DialogPinnedExt")
	proto.RegisterType((*Vector_Long)(nil), "dialog.Vector_Long")
}

func init() { proto.RegisterFile("dialog.tl.proto", fileDescriptor_0afe6dcb8d4fc860) }

var fileDescriptor_0afe6dcb8d4fc860 = []byte{
	// 3125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5b, 0x6b, 0x6c, 0x1c, 0xd5,
	0xf5, 0xf7, 0xd8, 0xbb, 0x7e, 0x1c, 0xc7, 0xce, 0x64, 0x92, 0x38, 0x9b, 0x75, 0xe2, 0xc7, 0xc4,
	0x89, 0x9d, 0x04, 0xec, 0x3f, 0x1b, 0x04, 0xd2, 0xbf, 0x08, 0x89, 0x38, 0xa4, 0xac, 0xb0, 0x13,
	0x77, 0x71, 0x40, 0xad, 0x68, 0x97, 0xf1, 0xce, 0xf5, 0x7a, 0x60, 0x77, 0x67, 0x35, 0x33, 0x9b,
	0xc6, 0x95, 0x2a, 0xf5, 0x01, 0xe2, 0x15, 0x50, 0xbf, 0x00, 0x52, 0x04, 0xe5, 0x51, 0x55, 0x6d,
	0x21, 0xe5, 0x51, 0x1a, 0x40, 0x25, 0x15, 0x15, 0x8f, 0x50, 0x21, 0x50, 0x11, 0x2d, 0x52, 0x1f,
	0xaa, 0x04, 0x01, 0xc2, 0xa3, 0x12, 0x21, 0x14, 0x48, 0x09, 0x81, 0x54, 0x73, 0xef, 0xbc, 0xee,
	0xdc, 0x3b, 0xb3, 0x6e, 0x15, 0xa7, 0x4b, 0xbe, 0x64, 0xe7, 0xde, 0x73, 0xcf, 0x3d, 0xe7, 0x77,
	0xcf, 0x3d, 0xf7, 0xdc, 0x73, 0xae, 0x61, 0xa9, 0xaa, 0x29, 0x25, 0xbd, 0x38, 0x6a, 0x95, 0x46,
	0xab, 0x86, 0x6e, 0xe9, 0x52, 0x2b, 0x69, 0x48, 0x9f, 0x5d, 0xd4, 0xac, 0xb9, 0xda, 0xcc, 0x68,
	0x41, 0x2f, 0x8f, 0x15, 0xf5, 0xa2, 0x3e, 0x86, 0xbb, 0x67, 0x6a, 0xb3, 0xf8, 0x0b, 0x7f, 0xe0,
	0x5f, 0x64, 0x58, 0xba, 0xaf, 0xa8, 0xeb, 0xc5, 0x12, 0xf2, 0xa9, 0xbe, 0x6d, 0x28, 0xd5, 0x2a,
	0x32, 0x4c, 0xa7, 0x3f, 0x6d, 0x16, 0xe6, 0x50, 0x59, 0xb1, 0xe7, 0x29, 0xe8, 0x06, 0xca, 0x5b,
	0xf3, 0x55, 0xe4, 0xf6, 0xad, 0xf6, 0xfb, 0x2c, 0x43, 0xa9, 0x98, 0x55, 0xdd, 0xb0, 0x9c, 0xae,
	0x15, 0x7e, 0x97, 0x39, 0x5f, 0x29, 0x90, 0x56, 0xf9, 0xc1, 0x66, 0xe8, 0xd8, 0x86, 0xc5, 0xbc,
	0x78, 0x8f, 0x25, 0xad, 0x87, 0xee, 0xaa, 0x81, 0x54, 0xad, 0xa0, 0x58, 0x28, 0x5f, 0x51, 0xca,
	0x28, 0x25, 0x0c, 0x08, 0x23, 0x1d, 0xb9, 0x2e, 0xaf, 0x75, 0x87, 0x52, 0x46, 0xd2, 0xf9, 0xd0,
	0x59, 0xd0, 0x2b, 0xa6, 0x65, 0xd4, 0x0a, 0x96, 0x6e, 0xa4, 0x9a, 0x07, 0x84, 0x91, 0xee, 0xcc,
	0xca, 0x51, 0x47, 0xff, 0xe9, 0x89, 0x71, 0xbf, 0x33, 0x17, 0xa4, 0x94, 0x56, 0x40, 0x52, 0x37,
	0x54, 0x64, 0xa4, 0x5a, 0x06, 0x84, 0x91, 0x96, 0x1c, 0xf9, 0x90, 0x86, 0xc1, 0x41, 0x2a, 0x95,
	0x18, 0x10, 0x46, 0x3a, 0x33, 0x4b, 0x47, 0xcb, 0x16, 0x96, 0x6e, 0x94, 0x48, 0x96, 0x73, 0xba,
	0xa5, 0x11, 0x10, 0x95, 0xdd, 0x8a, 0x56, 0x52, 0x66, 0x4a, 0x28, 0x5f, 0xd6, 0x2a, 0x79, 0x4d,
	0x4d, 0x25, 0x07, 0x84, 0x91, 0x64, 0xae, 0xdb, 0x6b, 0x9f, 0xd4, 0x2a, 0x59, 0x55, 0x92, 0x20,
	0xa1, 0x2a, 0x16, 0x4a, 0xb5, 0xe2, 0x79, 0xf0, 0x6f, 0x5b, 0x39, 0x6b, 0x0e, 0x95, 0x51, 0x1e,
	0x95, 0x75, 0x4b, 0x2b, 0xe8, 0x95, 0x54, 0x1b, 0x51, 0x0e, 0xb7, 0x5e, 0xec, 0x34, 0x4a, 0x6b,
	0x01, 0x2c, 0xab, 0x94, 0xaf, 0x22, 0x43, 0xd3, 0xd5, 0x54, 0x3b, 0x66, 0xdf, 0x61, 0x59, 0xa5,
	0x29, 0xdc, 0x20, 0x9f, 0x0f, 0x4b, 0xa6, 0x27, 0xf2, 0xaa, 0x07, 0xd9, 0x30, 0x24, 0x55, 0xc5,
	0x52, 0x32, 0x18, 0xa9, 0xce, 0xcc, 0x32, 0x17, 0x05, 0x0f, 0xd4, 0x1c, 0xe9, 0x97, 0x6f, 0x69,
	0x86, 0xa5, 0xa4, 0x71, 0xbb, 0x56, 0xb2, 0x90, 0x71, 0x26, 0xf0, 0xee, 0x86, 0x66, 0x4d, 0xc5,
	0x60, 0x27, 0x73, 0xcd, 0x9a, 0x2a, 0x0d, 0x41, 0xf7, 0xd5, 0xba, 0x56, 0x41, 0x6a, 0x7e, 0x66,
	0x3e, 0x6f, 0x96, 0x6a, 0x04, 0xf1, 0xf6, 0xdc, 0x12, 0xd2, 0xba, 0x75, 0xfe, 0xb2, 0x52, 0xad,
	0x68, 0x83, 0x87, 0xfb, 0x92, 0x58, 0x16, 0xfc, 0x5b, 0xfa, 0x7f, 0xe8, 0x22, 0xd3, 0xe5, 0x67,
	0xb1, 0xf4, 0x18, 0xd9, 0xce, 0xcc, 0xca, 0xd0, 0x52, 0x11, 0xd5, 0x72, 0x4b, 0xd4, 0xc0, 0x97,
	0xbf, 0xea, 0x6d, 0x81, 0x55, 0x97, 0xc7, 0x41, 0xf2, 0x80, 0xf4, 0x11, 0x39, 0x9b, 0x86, 0x73,
	0x15, 0x0d, 0xa7, 0x47, 0xe7, 0x82, 0xfa, 0x5b, 0xc1, 0x05, 0x75, 0x4a, 0xab, 0x54, 0x90, 0xfa,
	0xbf, 0x33, 0xe2, 0x5e, 0xe8, 0xa8, 0x22, 0x64, 0xe0, 0xdd, 0x88, 0x51, 0x4d, 0xe6, 0xda, 0xed,
	0x86, 0xe9, 0xf9, 0x2a, 0x92, 0x56, 0x41, 0x1b, 0xee, 0x74, 0xec, 0xb5, 0x25, 0xd7, 0x6a, 0x7f,
	0x66, 0x55, 0x0a, 0x04, 0x5f, 0x83, 0x78, 0x10, 0x3c, 0x3a, 0x17, 0x84, 0x03, 0x02, 0x74, 0x92,
	0x2e, 0x73, 0x9b, 0x62, 0x29, 0x67, 0x02, 0x80, 0x9a, 0x89, 0x0c, 0x33, 0xd5, 0x32, 0xd0, 0x62,
	0x03, 0x80, 0x3f, 0xec, 0xd6, 0xc2, 0x9c, 0x62, 0x99, 0xa9, 0x04, 0x69, 0xc5, 0x1f, 0x52, 0x1a,
	0xda, 0x0b, 0x73, 0x4a, 0xa5, 0x82, 0x4a, 0x66, 0x2a, 0x89, 0x3b, 0xbc, 0x6f, 0xf9, 0x22, 0x58,
	0x31, 0x3d, 0x91, 0x37, 0xb5, 0x72, 0xb5, 0x84, 0x82, 0xf2, 0x6f, 0xa4, 0xd5, 0x5f, 0x4e, 0xab,
	0x8f, 0x69, 0x5c, 0xd5, 0x0f, 0x09, 0xb0, 0x62, 0x0a, 0x21, 0xe3, 0x0a, 0xcd, 0x9a, 0xdb, 0x66,
	0x28, 0xb3, 0xd6, 0x24, 0x32, 0x4d, 0xa5, 0x88, 0x16, 0x1d, 0x83, 0x41, 0x48, 0xd8, 0x4b, 0x88,
	0x6d, 0xa0, 0x33, 0xd3, 0xe5, 0x6d, 0x03, 0x5b, 0x98, 0x1c, 0xee, 0x92, 0x36, 0x43, 0x52, 0xb5,
	0x45, 0x72, 0xbc, 0x5a, 0x60, 0xab, 0x04, 0x04, 0xcd, 0x11, 0x1a, 0xf9, 0x52, 0x58, 0x39, 0x3d,
	0x91, 0xaf, 0x55, 0x6d, 0x4f, 0x45, 0x29, 0x92, 0xa1, 0xc1, 0x58, 0xe3, 0xca, 0xc6, 0xd3, 0xda,
	0x45, 0xe5, 0x71, 0x01, 0x96, 0x5e, 0xa6, 0xec, 0x46, 0x2a, 0x41, 0x6c, 0x42, 0x33, 0xcf, 0xc8,
	0xae, 0x28, 0xe8, 0xb5, 0x8a, 0xe5, 0x78, 0x1b, 0xf2, 0x21, 0x8d, 0x42, 0x1b, 0x19, 0x4a, 0xcc,
	0xa2, 0x33, 0xb3, 0xc2, 0x43, 0x21, 0x20, 0x60, 0xce, 0x25, 0x72, 0xf6, 0x83, 0x19, 0x92, 0x3d,
	0x6a, 0x3f, 0x84, 0x74, 0x74, 0xd5, 0x7f, 0x55, 0x80, 0xb4, 0xb7, 0xab, 0x30, 0x33, 0x0a, 0xd1,
	0x90, 0x8a, 0xc2, 0x82, 0x55, 0x5c, 0x05, 0x6d, 0xb6, 0xa9, 0xe7, 0x1d, 0x97, 0xda, 0x92, 0x6b,
	0xb5, 0x3f, 0xb3, 0xea, 0x7f, 0xb7, 0xf7, 0xa5, 0x31, 0x68, 0x2b, 0x13, 0x91, 0x58, 0x67, 0x1a,
	0x5c, 0x54, 0x97, 0x4a, 0xfe, 0xa9, 0x00, 0xbd, 0xbe, 0x5e, 0x85, 0x12, 0x52, 0x8c, 0x46, 0x54,
	0x4c, 0xbe, 0x1a, 0x7a, 0x7c, 0x31, 0x8b, 0xc8, 0xba, 0xa8, 0x54, 0xc2, 0x72, 0x9a, 0xa7, 0x5f,
	0x42, 0xb9, 0x04, 0xa9, 0x10, 0x24, 0x8b, 0x39, 0xdb, 0x9f, 0x28, 0xcb, 0x2a, 0x2b, 0xc6, 0x35,
	0xc4, 0xfa, 0x76, 0x55, 0x0c, 0xa4, 0xa8, 0x0d, 0x63, 0x59, 0xa3, 0xd0, 0x59, 0xc3, 0x12, 0x61,
	0x11, 0x1d, 0xeb, 0xf2, 0x7d, 0xd4, 0x56, 0x5d, 0x2f, 0xe5, 0x80, 0x50, 0x4c, 0x2a, 0xc6, 0x35,
	0xf2, 0x0b, 0x02, 0xac, 0xf6, 0xd5, 0xb2, 0xf4, 0x62, 0xd1, 0x75, 0xc8, 0x53, 0x5a, 0xa5, 0x61,
	0xb4, 0x5a, 0x0f, 0xad, 0x55, 0x7c, 0xf4, 0xf1, 0x15, 0x72, 0x3a, 0xe5, 0x1a, 0x0c, 0x52, 0xd6,
	0x17, 0x5c, 0x21, 0x5b, 0x5b, 0xec, 0x51, 0x4e, 0xbf, 0x69, 0xbc, 0x2e, 0xc0, 0x00, 0x67, 0x5e,
	0x73, 0xeb, 0xfc, 0xce, 0xd9, 0x59, 0x13, 0x59, 0xdb, 0xec, 0x10, 0xf4, 0xf4, 0x43, 0x79, 0x2e,
	0x74, 0xa3, 0x3d, 0x85, 0x52, 0x4d, 0x45, 0x79, 0x07, 0x9c, 0x04, 0x0f, 0x9c, 0x2e, 0x87, 0x88,
	0xc4, 0x0e, 0x52, 0x3f, 0x74, 0xea, 0x58, 0xaa, 0x3c, 0x8e, 0x92, 0x49, 0x0c, 0x0d, 0xba, 0x2f,
	0xe8, 0x0a, 0x48, 0x96, 0xb4, 0xb2, 0x66, 0x61, 0xa8, 0x93, 0x39, 0xf2, 0x21, 0x3f, 0x29, 0xe0,
	0x13, 0x9b, 0xd1, 0xb1, 0x61, 0xf4, 0xea, 0x85, 0x8e, 0x59, 0xbd, 0xa4, 0xfa, 0xd6, 0x93, 0xcc,
	0xb5, 0x93, 0x86, 0xac, 0x2a, 0xdf, 0x28, 0xc0, 0x1a, 0xfe, 0x0a, 0x65, 0xd5, 0xc5, 0x31, 0x0a,
	0xbb, 0x43, 0x53, 0xf3, 0x25, 0xcd, 0xb4, 0x9c, 0xa8, 0xa8, 0x55, 0xc3, 0x53, 0xc9, 0xbf, 0xa3,
	0x76, 0x9c, 0x2f, 0xcb, 0x38, 0x3e, 0x35, 0xbf, 0x14, 0x70, 0xde, 0x4c, 0xf9, 0xc2, 0x22, 0xb2,
	0xc8, 0xa0, 0xc5, 0x33, 0x09, 0x4a, 0x9a, 0x44, 0x48, 0x9a, 0x97, 0x04, 0xe8, 0xf3, 0xa5, 0x31,
	0x10, 0x0e, 0xca, 0x17, 0x5b, 0xa2, 0x75, 0x90, 0x9c, 0xd5, 0x8d, 0x02, 0xe2, 0x83, 0x49, 0xfa,
	0x62, 0x41, 0x0c, 0x1a, 0x48, 0x2b, 0x65, 0x20, 0xf7, 0x0a, 0xb0, 0x8a, 0x63, 0x20, 0xb6, 0xad,
	0x36, 0xcc, 0x39, 0xcf, 0xc8, 0x38, 0xad, 0x57, 0x1b, 0x2d, 0x16, 0x79, 0x9e, 0xda, 0x68, 0x24,
	0xbe, 0xce, 0x21, 0x45, 0xcd, 0x56, 0x66, 0xf4, 0x3d, 0x0d, 0x73, 0xb4, 0xc9, 0xd0, 0x85, 0x8f,
	0x6b, 0xcd, 0x96, 0xca, 0xee, 0x26, 0x6e, 0xb7, 0xd3, 0x70, 0x25, 0xcd, 0xaa, 0xf6, 0x21, 0x9d,
	0xe6, 0x69, 0xb2, 0xb3, 0x66, 0x35, 0x92, 0x2a, 0x43, 0xd0, 0x8d, 0x55, 0xd1, 0xb1, 0x58, 0xbe,
	0x2e, 0x4b, 0x0c, 0x4f, 0xd6, 0xac, 0x2a, 0xef, 0x4d, 0x04, 0xb7, 0xab, 0x56, 0x31, 0x91, 0x61,
	0xed, 0x34, 0x76, 0x91, 0xeb, 0x0f, 0x49, 0xf6, 0x34, 0x8a, 0x42, 0x17, 0x40, 0xa7, 0xa5, 0x57,
	0xf3, 0x74, 0xa8, 0xde, 0x3b, 0x4a, 0x92, 0x74, 0xa3, 0x6e, 0x92, 0x6e, 0x34, 0x5b, 0xb1, 0xb6,
	0x64, 0x2e, 0x57, 0x4a, 0x35, 0x94, 0x03, 0xcb, 0xdf, 0x07, 0x97, 0x80, 0x14, 0x84, 0xa3, 0xac,
	0x60, 0x48, 0xda, 0xea, 0x33, 0x59, 0xea, 0xe3, 0x35, 0xa9, 0xec, 0xc9, 0xaa, 0xd2, 0x76, 0x58,
	0x16, 0xb0, 0x11, 0x87, 0x51, 0x7b, 0x7d, 0x46, 0xdd, 0x9e, 0x11, 0x11, 0x3e, 0x17, 0xc2, 0x12,
	0x27, 0x38, 0x24, 0xf7, 0xb5, 0x8e, 0xfa, 0x2c, 0x9c, 0x68, 0x92, 0x1c, 0x4e, 0xfd, 0x74, 0x70,
	0x09, 0x38, 0x81, 0x14, 0x88, 0x26, 0xa5, 0x73, 0xf0, 0x6d, 0x0d, 0x65, 0x52, 0x9d, 0xd1, 0x9c,
	0xcf, 0x3b, 0x97, 0x70, 0x26, 0x94, 0xf2, 0x3d, 0x42, 0xf0, 0xca, 0xa0, 0xa2, 0x12, 0x6a, 0x34,
	0x33, 0x90, 0x7f, 0x4e, 0x1d, 0x30, 0x45, 0x64, 0xed, 0x32, 0xdd, 0x03, 0xa6, 0xd1, 0x7c, 0xde,
	0x1f, 0x84, 0x60, 0x08, 0x4c, 0x3c, 0x45, 0xc3, 0x4a, 0x6b, 0xfb, 0x3e, 0x12, 0x92, 0xe4, 0xcb,
	0x66, 0x31, 0xe0, 0xfb, 0x48, 0xe3, 0xa4, 0x59, 0xcc, 0xaa, 0xf2, 0xb3, 0x02, 0x0c, 0xc5, 0xbb,
	0x0b, 0x27, 0xd5, 0x78, 0xfa, 0x95, 0x22, 0x29, 0xd4, 0x84, 0x97, 0x42, 0x65, 0x12, 0xa1, 0xc9,
	0x05, 0x27, 0x42, 0xe5, 0xef, 0x51, 0x11, 0x68, 0xd0, 0xcc, 0xcf, 0x94, 0xf8, 0xf2, 0x5e, 0x01,
	0xe4, 0xb0, 0x6d, 0x04, 0x45, 0x30, 0x77, 0xe2, 0x6c, 0xe6, 0xe9, 0x17, 0xc4, 0xcb, 0x9a, 0xda,
	0x81, 0x70, 0xd2, 0x4d, 0x02, 0x57, 0x42, 0x31, 0x24, 0x25, 0xca, 0x22, 0xdc, 0xd2, 0x6e, 0xe2,
	0xc7, 0xdd, 0xdb, 0x71, 0x3c, 0x76, 0xa6, 0x63, 0xd6, 0x5f, 0x53, 0xc2, 0x20, 0x55, 0xb3, 0xa6,
	0x10, 0x32, 0x88, 0x2c, 0x8b, 0x11, 0xae, 0x8e, 0x80, 0x88, 0xb7, 0xa0, 0x33, 0x61, 0xe0, 0x5a,
	0xd2, 0x6d, 0xb7, 0x07, 0x12, 0x6e, 0xb1, 0x81, 0xff, 0x01, 0x01, 0x36, 0x53, 0x18, 0x8e, 0x93,
	0x84, 0xae, 0x9b, 0xaf, 0x42, 0x8a, 0x3a, 0xa5, 0x18, 0x96, 0x56, 0xd0, 0xaa, 0x4a, 0x65, 0x31,
	0xd2, 0x30, 0xd2, 0x5a, 0x00, 0x27, 0x89, 0xec, 0xc2, 0xda, 0x92, 0xeb, 0x70, 0x5a, 0xb2, 0xaa,
	0xb4, 0x12, 0x5a, 0x1d, 0x57, 0x42, 0x44, 0x4f, 0x96, 0xb1, 0x13, 0x79, 0x9e, 0x3a, 0x64, 0x4c,
	0x2c, 0xb7, 0x35, 0x3d, 0x87, 0xca, 0xa8, 0x81, 0x52, 0x1c, 0xe1, 0x12, 0x55, 0x2b, 0xa7, 0x44,
	0x65, 0xdf, 0x1e, 0x57, 0x51, 0x9a, 0x5c, 0xa2, 0x99, 0x96, 0x6e, 0xcc, 0x4f, 0x4f, 0x4f, 0x34,
	0x8c, 0x2a, 0x74, 0x19, 0xad, 0x35, 0x5c, 0x46, 0x7b, 0x38, 0x7c, 0x7b, 0x9c, 0x9c, 0x0f, 0x96,
	0x00, 0x4e, 0xbf, 0x16, 0x12, 0x24, 0xec, 0x5f, 0x4e, 0xc1, 0x0b, 0xff, 0xb6, 0xdb, 0x0a, 0x73,
	0x8a, 0x85, 0x25, 0x6f, 0xcf, 0xe1, 0xdf, 0x52, 0x0a, 0xda, 0x1c, 0x4b, 0xc2, 0x42, 0xb7, 0xe7,
	0xdc, 0x4f, 0xf9, 0x81, 0xe6, 0x90, 0xef, 0x08, 0xa4, 0x9f, 0xcd, 0x2f, 0x4f, 0x6a, 0xa7, 0x17,
	0x3a, 0x1c, 0x02, 0xef, 0xac, 0x6d, 0x27, 0x0d, 0x59, 0x55, 0xca, 0x78, 0xa3, 0x71, 0x75, 0xa3,
	0xcd, 0xa9, 0x69, 0x06, 0xab, 0x1b, 0xbb, 0x2c, 0xad, 0xe4, 0x32, 0xb4, 0xbf, 0xfd, 0x5c, 0x51,
	0x7b, 0x30, 0x57, 0x64, 0x42, 0x3f, 0x27, 0x3b, 0xb0, 0xb8, 0x90, 0xd9, 0x1b, 0xa3, 0x2f, 0x9c,
	0xc8, 0x0c, 0x4c, 0xb9, 0x38, 0xd9, 0xcc, 0xf5, 0x4e, 0x29, 0x28, 0x11, 0x05, 0x16, 0x29, 0x07,
	0xf9, 0xe9, 0xcb, 0x64, 0x5c, 0xfa, 0xf2, 0x39, 0x01, 0xd6, 0x45, 0x24, 0x32, 0x16, 0xd9, 0xde,
	0x16, 0x94, 0xcd, 0x18, 0x76, 0x8f, 0xf1, 0x24, 0x2e, 0xe7, 0x70, 0xb4, 0x75, 0x4e, 0xf6, 0xef,
	0xf2, 0x0f, 0xda, 0x33, 0x15, 0xe7, 0x5c, 0x2f, 0x84, 0xec, 0x2f, 0x38, 0xbf, 0x53, 0xe7, 0x5e,
	0x14, 0x27, 0xe3, 0x55, 0xd5, 0x9d, 0xca, 0xb9, 0xfc, 0x20, 0x15, 0xf4, 0x15, 0x0c, 0xb4, 0xf8,
	0x31, 0xeb, 0x05, 0xe1, 0x18, 0x35, 0x11, 0x5f, 0x4c, 0xa7, 0xa3, 0xd4, 0xaf, 0x41, 0xef, 0xe5,
	0xc8, 0x9e, 0x20, 0xcf, 0xad, 0xac, 0x3a, 0x05, 0x49, 0x33, 0x25, 0x60, 0x0b, 0x58, 0x40, 0x41,
	0xd2, 0x94, 0x2f, 0x84, 0x65, 0x0e, 0x4b, 0x67, 0x23, 0xda, 0x1b, 0x62, 0x23, 0xcd, 0x68, 0x79,
	0x28, 0x82, 0xc6, 0x95, 0x54, 0x67, 0xfc, 0x57, 0x40, 0xa4, 0xc6, 0x07, 0x1e, 0x5e, 0xb8, 0xc3,
	0xa3, 0x1e, 0x5e, 0x98, 0xf2, 0x57, 0xa1, 0x87, 0x1a, 0xcc, 0x3c, 0x36, 0x70, 0x59, 0xc4, 0x3f,
	0x36, 0x60, 0x19, 0x31, 0x05, 0xfb, 0x08, 0x46, 0xa1, 0x82, 0xbd, 0x29, 0xaf, 0x83, 0x4e, 0x87,
	0xd1, 0x84, 0x5e, 0x29, 0xda, 0x0e, 0xd4, 0x1f, 0xdd, 0xe2, 0x10, 0x6d, 0x7a, 0xb1, 0x1b, 0xba,
	0xa8, 0xc5, 0x97, 0x96, 0x41, 0xd7, 0x78, 0x6e, 0x7c, 0x4b, 0x26, 0xbf, 0x6b, 0xc7, 0xa5, 0x3b,
	0x76, 0x5e, 0xb1, 0x43, 0x6c, 0x92, 0xd6, 0x43, 0x8a, 0x34, 0xb1, 0x95, 0x63, 0xf1, 0x57, 0x37,
	0x1e, 0x3f, 0x70, 0xca, 0xfe, 0x27, 0x48, 0x6b, 0x60, 0x29, 0x21, 0xf3, 0xde, 0xad, 0x88, 0xaf,
	0xbd, 0x7c, 0xe4, 0xfd, 0xcf, 0xdc, 0xde, 0x95, 0xc1, 0x5e, 0x4f, 0x5c, 0x71, 0xff, 0xb3, 0x77,
	0xd6, 0x24, 0x99, 0xee, 0xf5, 0x50, 0x11, 0xbf, 0x78, 0xe4, 0x95, 0xc7, 0x4e, 0x10, 0x0e, 0xfd,
	0xb0, 0x8a, 0xd0, 0x30, 0xc5, 0x7c, 0xf1, 0xef, 0xef, 0x1c, 0x79, 0x4f, 0x90, 0xd6, 0xba, 0x4c,
	0x42, 0xa5, 0x5d, 0xf1, 0xaf, 0x2f, 0x3f, 0x75, 0xb0, 0x4d, 0x5a, 0x0f, 0x6b, 0x83, 0x73, 0x30,
	0x35, 0x5b, 0x71, 0xdf, 0xa3, 0x0f, 0x7c, 0x92, 0x90, 0x36, 0x43, 0x1f, 0x45, 0xc6, 0x94, 0x40,
	0xc5, 0x7d, 0x6f, 0x3d, 0xfd, 0x37, 0x47, 0xe7, 0x0d, 0xb0, 0x9a, 0x22, 0x0e, 0x16, 0x22, 0xc5,
	0x23, 0x77, 0x7f, 0x7a, 0xc4, 0x91, 0x7d, 0x1d, 0xf4, 0xb2, 0x4c, 0x7d, 0xca, 0x93, 0xf7, 0x1e,
	0xbe, 0x25, 0xc1, 0x08, 0x18, 0x2e, 0xfd, 0x89, 0xb7, 0xde, 0xf7, 0xc2, 0x2f, 0x12, 0xd2, 0x46,
	0x58, 0x43, 0x91, 0x85, 0x4a, 0x69, 0xe2, 0x43, 0x2f, 0x7c, 0xf6, 0xe8, 0xbf, 0xc8, 0xb4, 0xe7,
	0xc0, 0x50, 0x58, 0x3c, 0x5e, 0xa5, 0x4a, 0xfc, 0xe8, 0xd8, 0x07, 0xaf, 0x9e, 0x24, 0x43, 0xfe,
	0x0f, 0xd6, 0xf1, 0x87, 0x50, 0x45, 0x26, 0xf1, 0xda, 0xbd, 0x27, 0xfe, 0xf1, 0x29, 0x19, 0x31,
	0xe4, 0xae, 0x0b, 0x33, 0x42, 0xbc, 0xfd, 0xe0, 0xfe, 0x87, 0x1d, 0x51, 0xce, 0x82, 0xfe, 0x48,
	0xbe, 0xa4, 0x34, 0x22, 0x1e, 0xfb, 0xd1, 0xed, 0xef, 0x3a, 0x78, 0x85, 0x75, 0x0c, 0x15, 0x2f,
	0xc4, 0xb7, 0xde, 0x39, 0xf2, 0xfd, 0x2f, 0x08, 0xe9, 0xa6, 0x10, 0x6a, 0xe1, 0x22, 0x81, 0x78,
	0xe0, 0xf1, 0x1b, 0x0e, 0x39, 0x6c, 0x47, 0x61, 0x90, 0xa2, 0xe5, 0xa5, 0xf0, 0xc5, 0xb7, 0xdf,
	0xdb, 0x7b, 0xdc, 0x59, 0xde, 0x61, 0x48, 0xf3, 0xc5, 0xb0, 0x65, 0x16, 0x3f, 0x3e, 0x7e, 0xf2,
	0xa6, 0x13, 0x91, 0x84, 0x7e, 0x9e, 0x5a, 0xfc, 0xf0, 0xcd, 0x4f, 0xfe, 0x78, 0xca, 0x05, 0x8b,
	0x56, 0x2c, 0x94, 0x2c, 0x16, 0x9f, 0x38, 0x76, 0xf7, 0xbb, 0x02, 0x63, 0x09, 0xe1, 0x44, 0xac,
	0xf8, 0xc5, 0x89, 0x67, 0x9e, 0x49, 0x4a, 0x1b, 0x43, 0xea, 0xf0, 0x72, 0x16, 0xe2, 0xbd, 0xb7,
	0x3d, 0xf1, 0x98, 0x20, 0x0d, 0x84, 0x0c, 0x35, 0x98, 0x17, 0x10, 0xdf, 0x78, 0xf2, 0xc5, 0x2e,
	0x06, 0x1b, 0x5e, 0xf6, 0x49, 0x7c, 0xe4, 0xba, 0xa3, 0x27, 0xbd, 0x05, 0x1d, 0xe2, 0xc8, 0xc8,
	0x0e, 0xb9, 0xff, 0xcd, 0x9b, 0x1f, 0xb1, 0x91, 0x1f, 0xae, 0x2b, 0x2a, 0xd9, 0xf5, 0xe2, 0xb5,
	0xcf, 0xdf, 0xb7, 0x4b, 0xda, 0x10, 0x32, 0x17, 0x36, 0x8f, 0x21, 0xde, 0xf1, 0xf9, 0x47, 0xdd,
	0x52, 0x06, 0xd6, 0x73, 0xa4, 0x60, 0x93, 0x0d, 0xe2, 0x53, 0xb7, 0x7f, 0x70, 0xa3, 0xe3, 0x8a,
	0xd6, 0xb3, 0x16, 0x43, 0x0d, 0x10, 0x0f, 0xfe, 0xf9, 0xae, 0x37, 0x5a, 0x99, 0xa5, 0x0a, 0x5d,
	0xe4, 0xc5, 0x03, 0x77, 0xbd, 0x7f, 0x43, 0x82, 0xa1, 0x0a, 0xdd, 0xb0, 0xc5, 0x7d, 0xb7, 0xec,
	0xbb, 0xaf, 0x59, 0x3a, 0x0f, 0x46, 0xc3, 0xbc, 0xe2, 0x2f, 0xb4, 0xe2, 0x93, 0xfb, 0x3e, 0x7e,
	0xae, 0x99, 0xf1, 0x2f, 0xc1, 0x0b, 0xa5, 0x78, 0xff, 0xb3, 0xbf, 0x79, 0xc9, 0xd9, 0x04, 0x83,
	0x21, 0xfb, 0xa3, 0xae, 0x6b, 0xe2, 0xfe, 0x63, 0x47, 0x76, 0xf0, 0xb4, 0xa6, 0xae, 0x43, 0xe2,
	0x0f, 0x7f, 0xfc, 0x83, 0xe3, 0x6d, 0x3c, 0xad, 0x83, 0x21, 0xa1, 0xf8, 0xce, 0xfe, 0xeb, 0x0f,
	0xb5, 0x48, 0x9b, 0x40, 0xe6, 0x6f, 0x3a, 0x8a, 0xf6, 0xed, 0xa3, 0xb7, 0x5e, 0x97, 0x60, 0xac,
	0x94, 0x17, 0x31, 0x8b, 0x7f, 0x79, 0xe8, 0xc5, 0x9f, 0x25, 0xa4, 0x2d, 0xb0, 0x21, 0x7a, 0x7f,
	0x52, 0xac, 0x5f, 0xb9, 0xe3, 0x9f, 0x4f, 0x7f, 0x5e, 0xc7, 0x57, 0x38, 0x76, 0x72, 0xe7, 0xde,
	0x7b, 0xee, 0x3c, 0xe5, 0xfa, 0x0a, 0x39, 0x8e, 0x94, 0x84, 0x6c, 0xe2, 0xd1, 0x53, 0xb7, 0x7d,
	0x98, 0x60, 0x1c, 0x16, 0x1b, 0x54, 0x89, 0x47, 0x0f, 0xfd, 0xf2, 0x31, 0xe2, 0x36, 0xd3, 0x89,
	0x1b, 0x7e, 0xd2, 0xd7, 0x94, 0x39, 0x98, 0x86, 0x8e, 0xdc, 0xd4, 0xb8, 0x93, 0x55, 0xde, 0x01,
	0xab, 0xa2, 0x9e, 0x07, 0xc9, 0x7e, 0xe4, 0x15, 0x75, 0x1c, 0xa5, 0xe9, 0xd8, 0x58, 0x6e, 0x92,
	0xa6, 0x20, 0x15, 0xf9, 0x2c, 0x67, 0x1d, 0xcb, 0x90, 0x21, 0x62, 0x39, 0x5e, 0x09, 0xcb, 0x79,
	0x2f, 0x68, 0xfa, 0x58, 0x66, 0xc1, 0xfe, 0xb4, 0x37, 0x59, 0x4c, 0x08, 0x27, 0x37, 0x49, 0x57,
	0xc1, 0x4a, 0xfe, 0x9b, 0x99, 0x81, 0x08, 0x61, 0xff, 0xe3, 0x19, 0x7c, 0x84, 0x99, 0x67, 0x32,
	0x1c, 0x84, 0xc3, 0x34, 0x2c, 0x1e, 0x93, 0xd0, 0x13, 0xf1, 0x3e, 0x65, 0x90, 0x65, 0x17, 0x22,
	0x49, 0x77, 0x7b, 0xdc, 0x70, 0x55, 0x43, 0x6e, 0x92, 0xe6, 0xa0, 0xaf, 0xce, 0x13, 0x91, 0x8d,
	0x5c, 0xa4, 0x79, 0xa4, 0xe9, 0xd5, 0x21, 0x48, 0xfc, 0x00, 0x56, 0x6e, 0x92, 0x10, 0xac, 0x8d,
	0x7f, 0x14, 0x32, 0x12, 0x33, 0x11, 0x45, 0x99, 0x4e, 0x71, 0xe7, 0xb9, 0x78, 0x8f, 0x85, 0xf1,
	0x59, 0xc6, 0xbe, 0xcb, 0x58, 0x13, 0xc7, 0x3a, 0x96, 0xdd, 0x37, 0x61, 0x75, 0xf4, 0x43, 0x89,
	0xa1, 0x78, 0x89, 0x09, 0x55, 0x1d, 0x69, 0x7b, 0x22, 0xde, 0x3e, 0x0c, 0xc6, 0xf1, 0xc6, 0x24,
	0x9c, 0xd5, 0xfc, 0xba, 0x67, 0x6c, 0xcc, 0x3b, 0x04, 0x99, 0xcb, 0x8f, 0xa2, 0x89, 0x95, 0xf4,
	0x72, 0xe8, 0x8d, 0x7b, 0x54, 0xb0, 0x81, 0x65, 0xcf, 0xa3, 0x63, 0xed, 0x79, 0x02, 0x56, 0x70,
	0x8b, 0xfb, 0xfd, 0x31, 0xfa, 0xdb, 0x04, 0x69, 0xf6, 0xa2, 0x23, 0x37, 0x49, 0xd9, 0x20, 0xb7,
	0x40, 0x19, 0x9e, 0xcf, 0xcd, 0x27, 0xe0, 0x60, 0x39, 0xe1, 0x2d, 0x4d, 0xb8, 0x5a, 0xce, 0x59,
	0x9a, 0x10, 0x09, 0xab, 0xa6, 0xef, 0x06, 0x98, 0x8a, 0xb5, 0x1c, 0xc7, 0x8e, 0xd0, 0xb0, 0xfc,
	0xfc, 0xe5, 0xe0, 0x16, 0x8d, 0x39, 0xcb, 0xc1, 0xa3, 0x63, 0xf9, 0x6e, 0xf7, 0xdc, 0x2d, 0x55,
	0x7d, 0xe4, 0xb8, 0xdb, 0x60, 0x3f, 0xcb, 0xe7, 0x0a, 0x4f, 0x3e, 0x6e, 0x89, 0x70, 0x03, 0x77,
	0x3d, 0x18, 0x3a, 0xce, 0xb2, 0x5c, 0xe9, 0x39, 0xac, 0xa8, 0x82, 0xde, 0xc6, 0x28, 0x3c, 0x59,
	0xf6, 0x8c, 0xd8, 0x33, 0x30, 0x58, 0xbf, 0xb8, 0x76, 0xd6, 0xc2, 0xc0, 0x25, 0xd4, 0xec, 0x1c,
	0x39, 0xcf, 0xa5, 0x70, 0x2a, 0x5f, 0x43, 0xf1, 0x40, 0x47, 0xf1, 0xfc, 0x16, 0xf4, 0xd7, 0x2b,
	0x65, 0x6d, 0x8a, 0x82, 0x85, 0xa5, 0x65, 0xf9, 0xe7, 0x83, 0x8e, 0x85, 0x2e, 0x4e, 0xc9, 0x31,
	0x1b, 0xd5, 0xa1, 0x49, 0xf7, 0x71, 0x1d, 0x8b, 0x77, 0x85, 0xc6, 0xf6, 0xd2, 0x13, 0x51, 0x8c,
	0x8a, 0x73, 0x84, 0x84, 0xa4, 0x8e, 0x03, 0xef, 0x89, 0x28, 0x2c, 0x71, 0x18, 0x87, 0x48, 0x22,
	0xe4, 0xf6, 0x12, 0x03, 0x72, 0x93, 0xb4, 0x1b, 0x46, 0x16, 0x5c, 0x00, 0xda, 0xc2, 0xd5, 0x24,
	0x7e, 0x50, 0x7a, 0x79, 0x48, 0x84, 0x09, 0xbd, 0x52, 0xa4, 0xf6, 0x29, 0x55, 0xc0, 0xe1, 0xec,
	0xd3, 0x60, 0x3f, 0xbb, 0xb0, 0x97, 0x78, 0x0e, 0x93, 0x2e, 0x9f, 0xf4, 0x73, 0x19, 0xf9, 0x04,
	0x2c, 0xa7, 0xe9, 0xa0, 0x89, 0xd0, 0x55, 0x0c, 0xbe, 0x89, 0x50, 0x34, 0x69, 0xde, 0x5f, 0x37,
	0x60, 0x3f, 0xd7, 0x13, 0x51, 0x68, 0xe0, 0xdb, 0x45, 0x90, 0x24, 0x1d, 0xf5, 0x40, 0x1e, 0x6f,
	0xf4, 0x35, 0xb1, 0x39, 0xf9, 0xe1, 0x98, 0xe3, 0x72, 0xa1, 0x73, 0xf8, 0x3e, 0x9a, 0x9b, 0x81,
	0xdf, 0x10, 0x15, 0xaf, 0xd1, 0x74, 0x2c, 0xd2, 0x57, 0xc1, 0x40, 0xdd, 0xb4, 0xf8, 0xe6, 0x3a,
	0xe7, 0x31, 0xa5, 0x03, 0xe7, 0x74, 0xe9, 0x89, 0xc8, 0x58, 0x0f, 0xd6, 0xdd, 0xed, 0xe9, 0xa8,
	0xf4, 0x61, 0x18, 0x75, 0x4e, 0x26, 0x7a, 0xb8, 0x2e, 0x77, 0x42, 0x18, 0x37, 0xc7, 0x95, 0x9e,
	0x7b, 0xe5, 0xe4, 0x98, 0x39, 0xee, 0x95, 0xa5, 0x8a, 0xe1, 0xbe, 0xf5, 0xb2, 0x0f, 0x5e, 0xef,
	0x13, 0x7e, 0x7f, 0xb8, 0x4f, 0x78, 0xf9, 0x70, 0x9f, 0xf0, 0xda, 0xe1, 0x3e, 0xe1, 0x1b, 0x17,
	0x05, 0xfe, 0xaa, 0xd1, 0x42, 0x4a, 0xb9, 0x68, 0x28, 0xfe, 0x8f, 0xb3, 0x4d, 0x64, 0xec, 0x46,
	0xc6, 0x98, 0x52, 0xad, 0x8e, 0xd9, 0x3f, 0xb5, 0x02, 0x1a, 0x9b, 0xd1, 0xbe, 0x33, 0x46, 0xf8,
	0x3b, 0xff, 0xcd, 0xb4, 0x62, 0xf0, 0xb7, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x92, 0x80,
	0xcc, 0x3a, 0x39, 0x00, 0x00,
}

func (this *DialogExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dialog.DialogExt{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	if this.Dialog != nil {
		s = append(s, "Dialog: "+fmt.Sprintf("%#v", this.Dialog)+",\n")
	}
	s = append(s, "AvailableMinId: "+fmt.Sprintf("%#v", this.AvailableMinId)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "ThemeEmoticon: "+fmt.Sprintf("%#v", this.ThemeEmoticon)+",\n")
	s = append(s, "TtlPeriod: "+fmt.Sprintf("%#v", this.TtlPeriod)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TLDialogExt{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogFilterExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.DialogFilterExt{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "JoinedBySlug: "+fmt.Sprintf("%#v", this.JoinedBySlug)+",\n")
	s = append(s, "Slug: "+fmt.Sprintf("%#v", this.Slug)+",\n")
	if this.DialogFilter != nil {
		s = append(s, "DialogFilter: "+fmt.Sprintf("%#v", this.DialogFilter)+",\n")
	}
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogFilterExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TLDialogFilterExt{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogPinnedExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.DialogPinnedExt{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogPinnedExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TLDialogPinnedExt{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.DialogsData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	s = append(s, "Chats: "+fmt.Sprintf("%#v", this.Chats)+",\n")
	s = append(s, "Channels: "+fmt.Sprintf("%#v", this.Channels)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSimpleDialogsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TLSimpleDialogsData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerWithDraftMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.PeerWithDraftMessage{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Draft != nil {
		s = append(s, "Draft: "+fmt.Sprintf("%#v", this.Draft)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUpdateDraftMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TLUpdateDraftMessage{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedDialogList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.SavedDialogList{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSavedDialogList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TLSavedDialogList{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogSaveDraftMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogSaveDraftMessage{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogClearDraftMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogClearDraftMessage{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetAllDrafts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TLDialogGetAllDrafts{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogClearAllDrafts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TLDialogClearAllDrafts{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogMarkDialogUnread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogMarkDialogUnread{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.UnreadMark != nil {
		s = append(s, "UnreadMark: "+fmt.Sprintf("%#v", this.UnreadMark)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogToggleDialogPin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogToggleDialogPin{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.Pinned != nil {
		s = append(s, "Pinned: "+fmt.Sprintf("%#v", this.Pinned)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogUnreadMarkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TLDialogGetDialogUnreadMarkList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogsByOffsetDate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogGetDialogsByOffsetDate{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.ExcludePinned != nil {
		s = append(s, "ExcludePinned: "+fmt.Sprintf("%#v", this.ExcludePinned)+",\n")
	}
	s = append(s, "OffsetDate: "+fmt.Sprintf("%#v", this.OffsetDate)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogGetDialogs{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.ExcludePinned != nil {
		s = append(s, "ExcludePinned: "+fmt.Sprintf("%#v", this.ExcludePinned)+",\n")
	}
	s = append(s, "FolderId: "+fmt.Sprintf("%#v", this.FolderId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogsByIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogGetDialogsByIdList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "IdList: "+fmt.Sprintf("%#v", this.IdList)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogsCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogGetDialogsCount{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.ExcludePinned != nil {
		s = append(s, "ExcludePinned: "+fmt.Sprintf("%#v", this.ExcludePinned)+",\n")
	}
	s = append(s, "FolderId: "+fmt.Sprintf("%#v", this.FolderId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetPinnedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogGetPinnedDialogs{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "FolderId: "+fmt.Sprintf("%#v", this.FolderId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogReorderPinnedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogReorderPinnedDialogs{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Force != nil {
		s = append(s, "Force: "+fmt.Sprintf("%#v", this.Force)+",\n")
	}
	s = append(s, "FolderId: "+fmt.Sprintf("%#v", this.FolderId)+",\n")
	s = append(s, "IdList: "+fmt.Sprintf("%#v", this.IdList)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogById) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogGetDialogById{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetTopMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogGetTopMessage{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogUpdateReadInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogUpdateReadInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "ReadInboxId: "+fmt.Sprintf("%#v", this.ReadInboxId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogUpdateReadOutbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogUpdateReadOutbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "ReadOutboxId: "+fmt.Sprintf("%#v", this.ReadOutboxId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogInsertOrUpdateDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.TLDialogInsertOrUpdateDialog{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.TopMessage != nil {
		s = append(s, "TopMessage: "+fmt.Sprintf("%#v", this.TopMessage)+",\n")
	}
	if this.ReadOutboxMaxId != nil {
		s = append(s, "ReadOutboxMaxId: "+fmt.Sprintf("%#v", this.ReadOutboxMaxId)+",\n")
	}
	if this.ReadInboxMaxId != nil {
		s = append(s, "ReadInboxMaxId: "+fmt.Sprintf("%#v", this.ReadInboxMaxId)+",\n")
	}
	if this.UnreadCount != nil {
		s = append(s, "UnreadCount: "+fmt.Sprintf("%#v", this.UnreadCount)+",\n")
	}
	s = append(s, "UnreadMark: "+fmt.Sprintf("%#v", this.UnreadMark)+",\n")
	if this.Date2 != nil {
		s = append(s, "Date2: "+fmt.Sprintf("%#v", this.Date2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogDeleteDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogDeleteDialog{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetUserPinnedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogGetUserPinnedMessage{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogUpdateUserPinnedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogUpdateUserPinnedMessage{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "PinnedMsgId: "+fmt.Sprintf("%#v", this.PinnedMsgId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogInsertOrUpdateDialogFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogInsertOrUpdateDialogFilter{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.DialogFilter != nil {
		s = append(s, "DialogFilter: "+fmt.Sprintf("%#v", this.DialogFilter)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogDeleteDialogFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogDeleteDialogFilter{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogUpdateDialogFiltersOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogUpdateDialogFiltersOrder{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogFilters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TLDialogGetDialogFilters{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogFolder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogGetDialogFolder{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "FolderId: "+fmt.Sprintf("%#v", this.FolderId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogEditPeerFolders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogEditPeerFolders{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerDialogList: "+fmt.Sprintf("%#v", this.PeerDialogList)+",\n")
	s = append(s, "FolderId: "+fmt.Sprintf("%#v", this.FolderId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetChannelMessageReadParticipants) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogGetChannelMessageReadParticipants{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "MsgId: "+fmt.Sprintf("%#v", this.MsgId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogSetChatTheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogSetChatTheme{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "ThemeEmoticon: "+fmt.Sprintf("%#v", this.ThemeEmoticon)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogSetHistoryTTL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogSetHistoryTTL{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "TtlPeriod: "+fmt.Sprintf("%#v", this.TtlPeriod)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetMyDialogsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TLDialogGetMyDialogsData{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "Chat: "+fmt.Sprintf("%#v", this.Chat)+",\n")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetSavedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.TLDialogGetSavedDialogs{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.ExcludePinned != nil {
		s = append(s, "ExcludePinned: "+fmt.Sprintf("%#v", this.ExcludePinned)+",\n")
	}
	s = append(s, "OffsetDate: "+fmt.Sprintf("%#v", this.OffsetDate)+",\n")
	s = append(s, "OffsetId: "+fmt.Sprintf("%#v", this.OffsetId)+",\n")
	if this.OffsetPeer != nil {
		s = append(s, "OffsetPeer: "+fmt.Sprintf("%#v", this.OffsetPeer)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetPinnedSavedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TLDialogGetPinnedSavedDialogs{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogToggleSavedDialogPin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogToggleSavedDialogPin{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Pinned != nil {
		s = append(s, "Pinned: "+fmt.Sprintf("%#v", this.Pinned)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogReorderPinnedSavedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TLDialogReorderPinnedSavedDialogs{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Force != nil {
		s = append(s, "Force: "+fmt.Sprintf("%#v", this.Force)+",\n")
	}
	if this.Order != nil {
		s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogGetDialogFilter{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogGetDialogFilterBySlug) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogGetDialogFilterBySlug{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Slug: "+fmt.Sprintf("%#v", this.Slug)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDialogCreateDialogFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TLDialogCreateDialogFilter{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.DialogFilter != nil {
		s = append(s, "DialogFilter: "+fmt.Sprintf("%#v", this.DialogFilter)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_PeerWithDraftMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Vector_PeerWithDraftMessage{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_DialogPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Vector_DialogPeer{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_DialogExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Vector_DialogExt{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_DialogFilterExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Vector_DialogFilterExt{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_DialogPinnedExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Vector_DialogPinnedExt{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_Long) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Vector_Long{")
	s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDialogTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCDialogClient is the client API for RPCDialog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCDialogClient interface {
	DialogSaveDraftMessage(ctx context.Context, in *TLDialogSaveDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogClearDraftMessage(ctx context.Context, in *TLDialogClearDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetAllDrafts(ctx context.Context, in *TLDialogGetAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error)
	DialogClearAllDrafts(ctx context.Context, in *TLDialogClearAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error)
	DialogMarkDialogUnread(ctx context.Context, in *TLDialogMarkDialogUnread, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogToggleDialogPin(ctx context.Context, in *TLDialogToggleDialogPin, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogGetDialogUnreadMarkList(ctx context.Context, in *TLDialogGetDialogUnreadMarkList, opts ...grpc.CallOption) (*Vector_DialogPeer, error)
	DialogGetDialogsByOffsetDate(ctx context.Context, in *TLDialogGetDialogsByOffsetDate, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogGetDialogs(ctx context.Context, in *TLDialogGetDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogGetDialogsByIdList(ctx context.Context, in *TLDialogGetDialogsByIdList, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogGetDialogsCount(ctx context.Context, in *TLDialogGetDialogsCount, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogGetPinnedDialogs(ctx context.Context, in *TLDialogGetPinnedDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogReorderPinnedDialogs(ctx context.Context, in *TLDialogReorderPinnedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetDialogById(ctx context.Context, in *TLDialogGetDialogById, opts ...grpc.CallOption) (*DialogExt, error)
	DialogGetTopMessage(ctx context.Context, in *TLDialogGetTopMessage, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogUpdateReadInbox(ctx context.Context, in *TLDialogUpdateReadInbox, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogUpdateReadOutbox(ctx context.Context, in *TLDialogUpdateReadOutbox, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialog(ctx context.Context, in *TLDialogInsertOrUpdateDialog, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogDeleteDialog(ctx context.Context, in *TLDialogDeleteDialog, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetUserPinnedMessage(ctx context.Context, in *TLDialogGetUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogUpdateUserPinnedMessage(ctx context.Context, in *TLDialogUpdateUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialogFilter(ctx context.Context, in *TLDialogInsertOrUpdateDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogDeleteDialogFilter(ctx context.Context, in *TLDialogDeleteDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogUpdateDialogFiltersOrder(ctx context.Context, in *TLDialogUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetDialogFilters(ctx context.Context, in *TLDialogGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterExt, error)
	DialogGetDialogFolder(ctx context.Context, in *TLDialogGetDialogFolder, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogEditPeerFolders(ctx context.Context, in *TLDialogEditPeerFolders, opts ...grpc.CallOption) (*Vector_DialogPinnedExt, error)
	DialogGetChannelMessageReadParticipants(ctx context.Context, in *TLDialogGetChannelMessageReadParticipants, opts ...grpc.CallOption) (*Vector_Long, error)
	DialogSetChatTheme(ctx context.Context, in *TLDialogSetChatTheme, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogSetHistoryTTL(ctx context.Context, in *TLDialogSetHistoryTTL, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetMyDialogsData(ctx context.Context, in *TLDialogGetMyDialogsData, opts ...grpc.CallOption) (*DialogsData, error)
	DialogGetSavedDialogs(ctx context.Context, in *TLDialogGetSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error)
	DialogGetPinnedSavedDialogs(ctx context.Context, in *TLDialogGetPinnedSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error)
	DialogToggleSavedDialogPin(ctx context.Context, in *TLDialogToggleSavedDialogPin, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogReorderPinnedSavedDialogs(ctx context.Context, in *TLDialogReorderPinnedSavedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetDialogFilter(ctx context.Context, in *TLDialogGetDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error)
	DialogGetDialogFilterBySlug(ctx context.Context, in *TLDialogGetDialogFilterBySlug, opts ...grpc.CallOption) (*DialogFilterExt, error)
	DialogCreateDialogFilter(ctx context.Context, in *TLDialogCreateDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error)
}

type rPCDialogClient struct {
	cc *grpc.ClientConn
}

func NewRPCDialogClient(cc *grpc.ClientConn) RPCDialogClient {
	return &rPCDialogClient{cc}
}

func (c *rPCDialogClient) DialogSaveDraftMessage(ctx context.Context, in *TLDialogSaveDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_saveDraftMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogClearDraftMessage(ctx context.Context, in *TLDialogClearDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_clearDraftMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetAllDrafts(ctx context.Context, in *TLDialogGetAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error) {
	out := new(Vector_PeerWithDraftMessage)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getAllDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogClearAllDrafts(ctx context.Context, in *TLDialogClearAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error) {
	out := new(Vector_PeerWithDraftMessage)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_clearAllDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogMarkDialogUnread(ctx context.Context, in *TLDialogMarkDialogUnread, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_markDialogUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogToggleDialogPin(ctx context.Context, in *TLDialogToggleDialogPin, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_toggleDialogPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogUnreadMarkList(ctx context.Context, in *TLDialogGetDialogUnreadMarkList, opts ...grpc.CallOption) (*Vector_DialogPeer, error) {
	out := new(Vector_DialogPeer)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogUnreadMarkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogsByOffsetDate(ctx context.Context, in *TLDialogGetDialogsByOffsetDate, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogsByOffsetDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogs(ctx context.Context, in *TLDialogGetDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogsByIdList(ctx context.Context, in *TLDialogGetDialogsByIdList, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogsByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogsCount(ctx context.Context, in *TLDialogGetDialogsCount, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetPinnedDialogs(ctx context.Context, in *TLDialogGetPinnedDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogReorderPinnedDialogs(ctx context.Context, in *TLDialogReorderPinnedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_reorderPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogById(ctx context.Context, in *TLDialogGetDialogById, opts ...grpc.CallOption) (*DialogExt, error) {
	out := new(DialogExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetTopMessage(ctx context.Context, in *TLDialogGetTopMessage, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getTopMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateReadInbox(ctx context.Context, in *TLDialogUpdateReadInbox, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_updateReadInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateReadOutbox(ctx context.Context, in *TLDialogUpdateReadOutbox, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_updateReadOutbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogInsertOrUpdateDialog(ctx context.Context, in *TLDialogInsertOrUpdateDialog, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_insertOrUpdateDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogDeleteDialog(ctx context.Context, in *TLDialogDeleteDialog, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_deleteDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetUserPinnedMessage(ctx context.Context, in *TLDialogGetUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getUserPinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateUserPinnedMessage(ctx context.Context, in *TLDialogUpdateUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_updateUserPinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogInsertOrUpdateDialogFilter(ctx context.Context, in *TLDialogInsertOrUpdateDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_insertOrUpdateDialogFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogDeleteDialogFilter(ctx context.Context, in *TLDialogDeleteDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_deleteDialogFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateDialogFiltersOrder(ctx context.Context, in *TLDialogUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_updateDialogFiltersOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFilters(ctx context.Context, in *TLDialogGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterExt, error) {
	out := new(Vector_DialogFilterExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFolder(ctx context.Context, in *TLDialogGetDialogFolder, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogEditPeerFolders(ctx context.Context, in *TLDialogEditPeerFolders, opts ...grpc.CallOption) (*Vector_DialogPinnedExt, error) {
	out := new(Vector_DialogPinnedExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_editPeerFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetChannelMessageReadParticipants(ctx context.Context, in *TLDialogGetChannelMessageReadParticipants, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getChannelMessageReadParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogSetChatTheme(ctx context.Context, in *TLDialogSetChatTheme, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_setChatTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogSetHistoryTTL(ctx context.Context, in *TLDialogSetHistoryTTL, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_setHistoryTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetMyDialogsData(ctx context.Context, in *TLDialogGetMyDialogsData, opts ...grpc.CallOption) (*DialogsData, error) {
	out := new(DialogsData)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getMyDialogsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetSavedDialogs(ctx context.Context, in *TLDialogGetSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error) {
	out := new(SavedDialogList)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getSavedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetPinnedSavedDialogs(ctx context.Context, in *TLDialogGetPinnedSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error) {
	out := new(SavedDialogList)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getPinnedSavedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogToggleSavedDialogPin(ctx context.Context, in *TLDialogToggleSavedDialogPin, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_toggleSavedDialogPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogReorderPinnedSavedDialogs(ctx context.Context, in *TLDialogReorderPinnedSavedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_reorderPinnedSavedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFilter(ctx context.Context, in *TLDialogGetDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error) {
	out := new(DialogFilterExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFilterBySlug(ctx context.Context, in *TLDialogGetDialogFilterBySlug, opts ...grpc.CallOption) (*DialogFilterExt, error) {
	out := new(DialogFilterExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_getDialogFilterBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogCreateDialogFilter(ctx context.Context, in *TLDialogCreateDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error) {
	out := new(DialogFilterExt)
	err := c.cc.Invoke(ctx, "/dialog.RPCDialog/dialog_createDialogFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCDialogServer is the server API for RPCDialog service.
type RPCDialogServer interface {
	DialogSaveDraftMessage(context.Context, *TLDialogSaveDraftMessage) (*mtproto.Bool, error)
	DialogClearDraftMessage(context.Context, *TLDialogClearDraftMessage) (*mtproto.Bool, error)
	DialogGetAllDrafts(context.Context, *TLDialogGetAllDrafts) (*Vector_PeerWithDraftMessage, error)
	DialogClearAllDrafts(context.Context, *TLDialogClearAllDrafts) (*Vector_PeerWithDraftMessage, error)
	DialogMarkDialogUnread(context.Context, *TLDialogMarkDialogUnread) (*mtproto.Bool, error)
	DialogToggleDialogPin(context.Context, *TLDialogToggleDialogPin) (*mtproto.Int32, error)
	DialogGetDialogUnreadMarkList(context.Context, *TLDialogGetDialogUnreadMarkList) (*Vector_DialogPeer, error)
	DialogGetDialogsByOffsetDate(context.Context, *TLDialogGetDialogsByOffsetDate) (*Vector_DialogExt, error)
	DialogGetDialogs(context.Context, *TLDialogGetDialogs) (*Vector_DialogExt, error)
	DialogGetDialogsByIdList(context.Context, *TLDialogGetDialogsByIdList) (*Vector_DialogExt, error)
	DialogGetDialogsCount(context.Context, *TLDialogGetDialogsCount) (*mtproto.Int32, error)
	DialogGetPinnedDialogs(context.Context, *TLDialogGetPinnedDialogs) (*Vector_DialogExt, error)
	DialogReorderPinnedDialogs(context.Context, *TLDialogReorderPinnedDialogs) (*mtproto.Bool, error)
	DialogGetDialogById(context.Context, *TLDialogGetDialogById) (*DialogExt, error)
	DialogGetTopMessage(context.Context, *TLDialogGetTopMessage) (*mtproto.Int32, error)
	DialogUpdateReadInbox(context.Context, *TLDialogUpdateReadInbox) (*mtproto.Bool, error)
	DialogUpdateReadOutbox(context.Context, *TLDialogUpdateReadOutbox) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialog(context.Context, *TLDialogInsertOrUpdateDialog) (*mtproto.Bool, error)
	DialogDeleteDialog(context.Context, *TLDialogDeleteDialog) (*mtproto.Bool, error)
	DialogGetUserPinnedMessage(context.Context, *TLDialogGetUserPinnedMessage) (*mtproto.Int32, error)
	DialogUpdateUserPinnedMessage(context.Context, *TLDialogUpdateUserPinnedMessage) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialogFilter(context.Context, *TLDialogInsertOrUpdateDialogFilter) (*mtproto.Bool, error)
	DialogDeleteDialogFilter(context.Context, *TLDialogDeleteDialogFilter) (*mtproto.Bool, error)
	DialogUpdateDialogFiltersOrder(context.Context, *TLDialogUpdateDialogFiltersOrder) (*mtproto.Bool, error)
	DialogGetDialogFilters(context.Context, *TLDialogGetDialogFilters) (*Vector_DialogFilterExt, error)
	DialogGetDialogFolder(context.Context, *TLDialogGetDialogFolder) (*Vector_DialogExt, error)
	DialogEditPeerFolders(context.Context, *TLDialogEditPeerFolders) (*Vector_DialogPinnedExt, error)
	DialogGetChannelMessageReadParticipants(context.Context, *TLDialogGetChannelMessageReadParticipants) (*Vector_Long, error)
	DialogSetChatTheme(context.Context, *TLDialogSetChatTheme) (*mtproto.Bool, error)
	DialogSetHistoryTTL(context.Context, *TLDialogSetHistoryTTL) (*mtproto.Bool, error)
	DialogGetMyDialogsData(context.Context, *TLDialogGetMyDialogsData) (*DialogsData, error)
	DialogGetSavedDialogs(context.Context, *TLDialogGetSavedDialogs) (*SavedDialogList, error)
	DialogGetPinnedSavedDialogs(context.Context, *TLDialogGetPinnedSavedDialogs) (*SavedDialogList, error)
	DialogToggleSavedDialogPin(context.Context, *TLDialogToggleSavedDialogPin) (*mtproto.Bool, error)
	DialogReorderPinnedSavedDialogs(context.Context, *TLDialogReorderPinnedSavedDialogs) (*mtproto.Bool, error)
	DialogGetDialogFilter(context.Context, *TLDialogGetDialogFilter) (*DialogFilterExt, error)
	DialogGetDialogFilterBySlug(context.Context, *TLDialogGetDialogFilterBySlug) (*DialogFilterExt, error)
	DialogCreateDialogFilter(context.Context, *TLDialogCreateDialogFilter) (*DialogFilterExt, error)
}

// UnimplementedRPCDialogServer can be embedded to have forward compatible implementations.
type UnimplementedRPCDialogServer struct {
}

func (*UnimplementedRPCDialogServer) DialogSaveDraftMessage(ctx context.Context, req *TLDialogSaveDraftMessage) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogSaveDraftMessage not implemented")
}
func (*UnimplementedRPCDialogServer) DialogClearDraftMessage(ctx context.Context, req *TLDialogClearDraftMessage) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogClearDraftMessage not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetAllDrafts(ctx context.Context, req *TLDialogGetAllDrafts) (*Vector_PeerWithDraftMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetAllDrafts not implemented")
}
func (*UnimplementedRPCDialogServer) DialogClearAllDrafts(ctx context.Context, req *TLDialogClearAllDrafts) (*Vector_PeerWithDraftMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogClearAllDrafts not implemented")
}
func (*UnimplementedRPCDialogServer) DialogMarkDialogUnread(ctx context.Context, req *TLDialogMarkDialogUnread) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogMarkDialogUnread not implemented")
}
func (*UnimplementedRPCDialogServer) DialogToggleDialogPin(ctx context.Context, req *TLDialogToggleDialogPin) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogToggleDialogPin not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogUnreadMarkList(ctx context.Context, req *TLDialogGetDialogUnreadMarkList) (*Vector_DialogPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogUnreadMarkList not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogsByOffsetDate(ctx context.Context, req *TLDialogGetDialogsByOffsetDate) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogsByOffsetDate not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogs(ctx context.Context, req *TLDialogGetDialogs) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogs not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogsByIdList(ctx context.Context, req *TLDialogGetDialogsByIdList) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogsByIdList not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogsCount(ctx context.Context, req *TLDialogGetDialogsCount) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogsCount not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetPinnedDialogs(ctx context.Context, req *TLDialogGetPinnedDialogs) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetPinnedDialogs not implemented")
}
func (*UnimplementedRPCDialogServer) DialogReorderPinnedDialogs(ctx context.Context, req *TLDialogReorderPinnedDialogs) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogReorderPinnedDialogs not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogById(ctx context.Context, req *TLDialogGetDialogById) (*DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogById not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetTopMessage(ctx context.Context, req *TLDialogGetTopMessage) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetTopMessage not implemented")
}
func (*UnimplementedRPCDialogServer) DialogUpdateReadInbox(ctx context.Context, req *TLDialogUpdateReadInbox) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateReadInbox not implemented")
}
func (*UnimplementedRPCDialogServer) DialogUpdateReadOutbox(ctx context.Context, req *TLDialogUpdateReadOutbox) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateReadOutbox not implemented")
}
func (*UnimplementedRPCDialogServer) DialogInsertOrUpdateDialog(ctx context.Context, req *TLDialogInsertOrUpdateDialog) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogInsertOrUpdateDialog not implemented")
}
func (*UnimplementedRPCDialogServer) DialogDeleteDialog(ctx context.Context, req *TLDialogDeleteDialog) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogDeleteDialog not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetUserPinnedMessage(ctx context.Context, req *TLDialogGetUserPinnedMessage) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetUserPinnedMessage not implemented")
}
func (*UnimplementedRPCDialogServer) DialogUpdateUserPinnedMessage(ctx context.Context, req *TLDialogUpdateUserPinnedMessage) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateUserPinnedMessage not implemented")
}
func (*UnimplementedRPCDialogServer) DialogInsertOrUpdateDialogFilter(ctx context.Context, req *TLDialogInsertOrUpdateDialogFilter) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogInsertOrUpdateDialogFilter not implemented")
}
func (*UnimplementedRPCDialogServer) DialogDeleteDialogFilter(ctx context.Context, req *TLDialogDeleteDialogFilter) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogDeleteDialogFilter not implemented")
}
func (*UnimplementedRPCDialogServer) DialogUpdateDialogFiltersOrder(ctx context.Context, req *TLDialogUpdateDialogFiltersOrder) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateDialogFiltersOrder not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogFilters(ctx context.Context, req *TLDialogGetDialogFilters) (*Vector_DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFilters not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogFolder(ctx context.Context, req *TLDialogGetDialogFolder) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFolder not implemented")
}
func (*UnimplementedRPCDialogServer) DialogEditPeerFolders(ctx context.Context, req *TLDialogEditPeerFolders) (*Vector_DialogPinnedExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogEditPeerFolders not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetChannelMessageReadParticipants(ctx context.Context, req *TLDialogGetChannelMessageReadParticipants) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetChannelMessageReadParticipants not implemented")
}
func (*UnimplementedRPCDialogServer) DialogSetChatTheme(ctx context.Context, req *TLDialogSetChatTheme) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogSetChatTheme not implemented")
}
func (*UnimplementedRPCDialogServer) DialogSetHistoryTTL(ctx context.Context, req *TLDialogSetHistoryTTL) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogSetHistoryTTL not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetMyDialogsData(ctx context.Context, req *TLDialogGetMyDialogsData) (*DialogsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetMyDialogsData not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetSavedDialogs(ctx context.Context, req *TLDialogGetSavedDialogs) (*SavedDialogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetSavedDialogs not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetPinnedSavedDialogs(ctx context.Context, req *TLDialogGetPinnedSavedDialogs) (*SavedDialogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetPinnedSavedDialogs not implemented")
}
func (*UnimplementedRPCDialogServer) DialogToggleSavedDialogPin(ctx context.Context, req *TLDialogToggleSavedDialogPin) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogToggleSavedDialogPin not implemented")
}
func (*UnimplementedRPCDialogServer) DialogReorderPinnedSavedDialogs(ctx context.Context, req *TLDialogReorderPinnedSavedDialogs) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogReorderPinnedSavedDialogs not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogFilter(ctx context.Context, req *TLDialogGetDialogFilter) (*DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFilter not implemented")
}
func (*UnimplementedRPCDialogServer) DialogGetDialogFilterBySlug(ctx context.Context, req *TLDialogGetDialogFilterBySlug) (*DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFilterBySlug not implemented")
}
func (*UnimplementedRPCDialogServer) DialogCreateDialogFilter(ctx context.Context, req *TLDialogCreateDialogFilter) (*DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogCreateDialogFilter not implemented")
}

func RegisterRPCDialogServer(s *grpc.Server, srv RPCDialogServer) {
	s.RegisterService(&_RPCDialog_serviceDesc, srv)
}

func _RPCDialog_DialogSaveDraftMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogSaveDraftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogSaveDraftMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogSaveDraftMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogSaveDraftMessage(ctx, req.(*TLDialogSaveDraftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogClearDraftMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogClearDraftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogClearDraftMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogClearDraftMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogClearDraftMessage(ctx, req.(*TLDialogClearDraftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetAllDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetAllDrafts(ctx, req.(*TLDialogGetAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogClearAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogClearAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogClearAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogClearAllDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogClearAllDrafts(ctx, req.(*TLDialogClearAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogMarkDialogUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogMarkDialogUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogMarkDialogUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogMarkDialogUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogMarkDialogUnread(ctx, req.(*TLDialogMarkDialogUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogToggleDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogToggleDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogToggleDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogToggleDialogPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogToggleDialogPin(ctx, req.(*TLDialogToggleDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogUnreadMarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogUnreadMarkList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogUnreadMarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogUnreadMarkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogUnreadMarkList(ctx, req.(*TLDialogGetDialogUnreadMarkList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogsByOffsetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogsByOffsetDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogsByOffsetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogsByOffsetDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogsByOffsetDate(ctx, req.(*TLDialogGetDialogsByOffsetDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogs(ctx, req.(*TLDialogGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogsByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogsByIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogsByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogsByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogsByIdList(ctx, req.(*TLDialogGetDialogsByIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogsCount(ctx, req.(*TLDialogGetDialogsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetPinnedDialogs(ctx, req.(*TLDialogGetPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogReorderPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogReorderPinnedDialogs(ctx, req.(*TLDialogReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogById(ctx, req.(*TLDialogGetDialogById))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetTopMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetTopMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetTopMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetTopMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetTopMessage(ctx, req.(*TLDialogGetTopMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateReadInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateReadInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateReadInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogUpdateReadInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateReadInbox(ctx, req.(*TLDialogUpdateReadInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateReadOutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateReadOutbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateReadOutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogUpdateReadOutbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateReadOutbox(ctx, req.(*TLDialogUpdateReadOutbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogInsertOrUpdateDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogInsertOrUpdateDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogInsertOrUpdateDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialog(ctx, req.(*TLDialogInsertOrUpdateDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogDeleteDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogDeleteDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogDeleteDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogDeleteDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogDeleteDialog(ctx, req.(*TLDialogDeleteDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetUserPinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetUserPinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetUserPinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetUserPinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetUserPinnedMessage(ctx, req.(*TLDialogGetUserPinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateUserPinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateUserPinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateUserPinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogUpdateUserPinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateUserPinnedMessage(ctx, req.(*TLDialogUpdateUserPinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogInsertOrUpdateDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogInsertOrUpdateDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogInsertOrUpdateDialogFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialogFilter(ctx, req.(*TLDialogInsertOrUpdateDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogDeleteDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogDeleteDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogDeleteDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogDeleteDialogFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogDeleteDialogFilter(ctx, req.(*TLDialogDeleteDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateDialogFiltersOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateDialogFiltersOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateDialogFiltersOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogUpdateDialogFiltersOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateDialogFiltersOrder(ctx, req.(*TLDialogUpdateDialogFiltersOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFilters(ctx, req.(*TLDialogGetDialogFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFolder(ctx, req.(*TLDialogGetDialogFolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogEditPeerFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogEditPeerFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogEditPeerFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogEditPeerFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogEditPeerFolders(ctx, req.(*TLDialogEditPeerFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetChannelMessageReadParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetChannelMessageReadParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetChannelMessageReadParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetChannelMessageReadParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetChannelMessageReadParticipants(ctx, req.(*TLDialogGetChannelMessageReadParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogSetChatTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogSetChatTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogSetChatTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogSetChatTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogSetChatTheme(ctx, req.(*TLDialogSetChatTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogSetHistoryTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogSetHistoryTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogSetHistoryTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogSetHistoryTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogSetHistoryTTL(ctx, req.(*TLDialogSetHistoryTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetMyDialogsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetMyDialogsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetMyDialogsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetMyDialogsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetMyDialogsData(ctx, req.(*TLDialogGetMyDialogsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetSavedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetSavedDialogs(ctx, req.(*TLDialogGetSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetPinnedSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetPinnedSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetPinnedSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetPinnedSavedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetPinnedSavedDialogs(ctx, req.(*TLDialogGetPinnedSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogToggleSavedDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogToggleSavedDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogToggleSavedDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogToggleSavedDialogPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogToggleSavedDialogPin(ctx, req.(*TLDialogToggleSavedDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogReorderPinnedSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogReorderPinnedSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogReorderPinnedSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogReorderPinnedSavedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogReorderPinnedSavedDialogs(ctx, req.(*TLDialogReorderPinnedSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFilter(ctx, req.(*TLDialogGetDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFilterBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFilterBySlug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFilterBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogGetDialogFilterBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFilterBySlug(ctx, req.(*TLDialogGetDialogFilterBySlug))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogCreateDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogCreateDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogCreateDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RPCDialog/DialogCreateDialogFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogCreateDialogFilter(ctx, req.(*TLDialogCreateDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCDialog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.RPCDialog",
	HandlerType: (*RPCDialogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "dialog_saveDraftMessage",
			Handler:    _RPCDialog_DialogSaveDraftMessage_Handler,
		},
		{
			MethodName: "dialog_clearDraftMessage",
			Handler:    _RPCDialog_DialogClearDraftMessage_Handler,
		},
		{
			MethodName: "dialog_getAllDrafts",
			Handler:    _RPCDialog_DialogGetAllDrafts_Handler,
		},
		{
			MethodName: "dialog_clearAllDrafts",
			Handler:    _RPCDialog_DialogClearAllDrafts_Handler,
		},
		{
			MethodName: "dialog_markDialogUnread",
			Handler:    _RPCDialog_DialogMarkDialogUnread_Handler,
		},
		{
			MethodName: "dialog_toggleDialogPin",
			Handler:    _RPCDialog_DialogToggleDialogPin_Handler,
		},
		{
			MethodName: "dialog_getDialogUnreadMarkList",
			Handler:    _RPCDialog_DialogGetDialogUnreadMarkList_Handler,
		},
		{
			MethodName: "dialog_getDialogsByOffsetDate",
			Handler:    _RPCDialog_DialogGetDialogsByOffsetDate_Handler,
		},
		{
			MethodName: "dialog_getDialogs",
			Handler:    _RPCDialog_DialogGetDialogs_Handler,
		},
		{
			MethodName: "dialog_getDialogsByIdList",
			Handler:    _RPCDialog_DialogGetDialogsByIdList_Handler,
		},
		{
			MethodName: "dialog_getDialogsCount",
			Handler:    _RPCDialog_DialogGetDialogsCount_Handler,
		},
		{
			MethodName: "dialog_getPinnedDialogs",
			Handler:    _RPCDialog_DialogGetPinnedDialogs_Handler,
		},
		{
			MethodName: "dialog_reorderPinnedDialogs",
			Handler:    _RPCDialog_DialogReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "dialog_getDialogById",
			Handler:    _RPCDialog_DialogGetDialogById_Handler,
		},
		{
			MethodName: "dialog_getTopMessage",
			Handler:    _RPCDialog_DialogGetTopMessage_Handler,
		},
		{
			MethodName: "dialog_updateReadInbox",
			Handler:    _RPCDialog_DialogUpdateReadInbox_Handler,
		},
		{
			MethodName: "dialog_updateReadOutbox",
			Handler:    _RPCDialog_DialogUpdateReadOutbox_Handler,
		},
		{
			MethodName: "dialog_insertOrUpdateDialog",
			Handler:    _RPCDialog_DialogInsertOrUpdateDialog_Handler,
		},
		{
			MethodName: "dialog_deleteDialog",
			Handler:    _RPCDialog_DialogDeleteDialog_Handler,
		},
		{
			MethodName: "dialog_getUserPinnedMessage",
			Handler:    _RPCDialog_DialogGetUserPinnedMessage_Handler,
		},
		{
			MethodName: "dialog_updateUserPinnedMessage",
			Handler:    _RPCDialog_DialogUpdateUserPinnedMessage_Handler,
		},
		{
			MethodName: "dialog_insertOrUpdateDialogFilter",
			Handler:    _RPCDialog_DialogInsertOrUpdateDialogFilter_Handler,
		},
		{
			MethodName: "dialog_deleteDialogFilter",
			Handler:    _RPCDialog_DialogDeleteDialogFilter_Handler,
		},
		{
			MethodName: "dialog_updateDialogFiltersOrder",
			Handler:    _RPCDialog_DialogUpdateDialogFiltersOrder_Handler,
		},
		{
			MethodName: "dialog_getDialogFilters",
			Handler:    _RPCDialog_DialogGetDialogFilters_Handler,
		},
		{
			MethodName: "dialog_getDialogFolder",
			Handler:    _RPCDialog_DialogGetDialogFolder_Handler,
		},
		{
			MethodName: "dialog_editPeerFolders",
			Handler:    _RPCDialog_DialogEditPeerFolders_Handler,
		},
		{
			MethodName: "dialog_getChannelMessageReadParticipants",
			Handler:    _RPCDialog_DialogGetChannelMessageReadParticipants_Handler,
		},
		{
			MethodName: "dialog_setChatTheme",
			Handler:    _RPCDialog_DialogSetChatTheme_Handler,
		},
		{
			MethodName: "dialog_setHistoryTTL",
			Handler:    _RPCDialog_DialogSetHistoryTTL_Handler,
		},
		{
			MethodName: "dialog_getMyDialogsData",
			Handler:    _RPCDialog_DialogGetMyDialogsData_Handler,
		},
		{
			MethodName: "dialog_getSavedDialogs",
			Handler:    _RPCDialog_DialogGetSavedDialogs_Handler,
		},
		{
			MethodName: "dialog_getPinnedSavedDialogs",
			Handler:    _RPCDialog_DialogGetPinnedSavedDialogs_Handler,
		},
		{
			MethodName: "dialog_toggleSavedDialogPin",
			Handler:    _RPCDialog_DialogToggleSavedDialogPin_Handler,
		},
		{
			MethodName: "dialog_reorderPinnedSavedDialogs",
			Handler:    _RPCDialog_DialogReorderPinnedSavedDialogs_Handler,
		},
		{
			MethodName: "dialog_getDialogFilter",
			Handler:    _RPCDialog_DialogGetDialogFilter_Handler,
		},
		{
			MethodName: "dialog_getDialogFilterBySlug",
			Handler:    _RPCDialog_DialogGetDialogFilterBySlug_Handler,
		},
		{
			MethodName: "dialog_createDialogFilter",
			Handler:    _RPCDialog_DialogCreateDialogFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dialog.tl.proto",
}

func (m *DialogExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TtlPeriod != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.TtlPeriod))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ThemeEmoticon) > 0 {
		i -= len(m.ThemeEmoticon)
		copy(dAtA[i:], m.ThemeEmoticon)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.ThemeEmoticon)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Date != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x30
	}
	if m.AvailableMinId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.AvailableMinId))
		i--
		dAtA[i] = 0x28
	}
	if m.Dialog != nil {
		{
			size, err := m.Dialog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Order != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DialogFilterExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogFilterExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogFilterExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Order != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x38
	}
	if m.DialogFilter != nil {
		{
			size, err := m.DialogFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x2a
	}
	if m.JoinedBySlug {
		i--
		if m.JoinedBySlug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogFilterExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogFilterExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogFilterExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DialogPinnedExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogPinnedExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogPinnedExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.Order != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogPinnedExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogPinnedExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogPinnedExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DialogsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channels) > 0 {
		dAtA7 := make([]byte, len(m.Channels)*10)
		var j6 int
		for _, num1 := range m.Channels {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintDialogTl(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Chats) > 0 {
		dAtA9 := make([]byte, len(m.Chats)*10)
		var j8 int
		for _, num1 := range m.Chats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintDialogTl(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Users) > 0 {
		dAtA11 := make([]byte, len(m.Users)*10)
		var j10 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintDialogTl(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSimpleDialogsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSimpleDialogsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSimpleDialogsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerWithDraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerWithDraftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerWithDraftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Draft != nil {
		{
			size, err := m.Draft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUpdateDraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdateDraftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdateDraftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SavedDialogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedDialogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavedDialogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDialogTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Count != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSavedDialogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSavedDialogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSavedDialogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogSaveDraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogSaveDraftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogSaveDraftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogClearDraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogClearDraftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogClearDraftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetAllDrafts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetAllDrafts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetAllDrafts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogClearAllDrafts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogClearAllDrafts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogClearAllDrafts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogMarkDialogUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogMarkDialogUnread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogMarkDialogUnread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UnreadMark != nil {
		{
			size, err := m.UnreadMark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogToggleDialogPin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogToggleDialogPin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogToggleDialogPin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pinned != nil {
		{
			size, err := m.Pinned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogUnreadMarkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogUnreadMarkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogUnreadMarkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogsByOffsetDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogsByOffsetDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogsByOffsetDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.OffsetDate != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x28
	}
	if m.ExcludePinned != nil {
		{
			size, err := m.ExcludePinned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x28
	}
	if m.ExcludePinned != nil {
		{
			size, err := m.ExcludePinned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogsByIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogsByIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogsByIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdList) > 0 {
		dAtA23 := make([]byte, len(m.IdList)*10)
		var j22 int
		for _, num1 := range m.IdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintDialogTl(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogsCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogsCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x28
	}
	if m.ExcludePinned != nil {
		{
			size, err := m.ExcludePinned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetPinnedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogReorderPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogReorderPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogReorderPinnedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdList) > 0 {
		dAtA26 := make([]byte, len(m.IdList)*10)
		var j25 int
		for _, num1 := range m.IdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		i -= j25
		copy(dAtA[i:], dAtA26[:j25])
		i = encodeVarintDialogTl(dAtA, i, uint64(j25))
		i--
		dAtA[i] = 0x32
	}
	if m.FolderId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x28
	}
	if m.Force != nil {
		{
			size, err := m.Force.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetTopMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetTopMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetTopMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogUpdateReadInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogUpdateReadInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogUpdateReadInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadInboxId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.ReadInboxId))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogUpdateReadOutbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogUpdateReadOutbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogUpdateReadOutbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadOutboxId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.ReadOutboxId))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogInsertOrUpdateDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogInsertOrUpdateDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogInsertOrUpdateDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Date2 != nil {
		{
			size, err := m.Date2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.UnreadMark {
		i--
		if m.UnreadMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.UnreadCount != nil {
		{
			size, err := m.UnreadCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ReadInboxMaxId != nil {
		{
			size, err := m.ReadInboxMaxId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ReadOutboxMaxId != nil {
		{
			size, err := m.ReadOutboxMaxId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TopMessage != nil {
		{
			size, err := m.TopMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogDeleteDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogDeleteDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogDeleteDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetUserPinnedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetUserPinnedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetUserPinnedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogUpdateUserPinnedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogUpdateUserPinnedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogUpdateUserPinnedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PinnedMsgId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PinnedMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogInsertOrUpdateDialogFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogInsertOrUpdateDialogFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogInsertOrUpdateDialogFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DialogFilter != nil {
		{
			size, err := m.DialogFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Id != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogDeleteDialogFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogDeleteDialogFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogDeleteDialogFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogUpdateDialogFiltersOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogUpdateDialogFiltersOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogUpdateDialogFiltersOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Order) > 0 {
		dAtA35 := make([]byte, len(m.Order)*10)
		var j34 int
		for _, num1 := range m.Order {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		i -= j34
		copy(dAtA[i:], dAtA35[:j34])
		i = encodeVarintDialogTl(dAtA, i, uint64(j34))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogFolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogFolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogFolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogEditPeerFolders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogEditPeerFolders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogEditPeerFolders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PeerDialogList) > 0 {
		dAtA37 := make([]byte, len(m.PeerDialogList)*10)
		var j36 int
		for _, num1 := range m.PeerDialogList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		i -= j36
		copy(dAtA[i:], dAtA37[:j36])
		i = encodeVarintDialogTl(dAtA, i, uint64(j36))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetChannelMessageReadParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetChannelMessageReadParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetChannelMessageReadParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChannelId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogSetChatTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogSetChatTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogSetChatTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ThemeEmoticon) > 0 {
		i -= len(m.ThemeEmoticon)
		copy(dAtA[i:], m.ThemeEmoticon)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.ThemeEmoticon)))
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogSetHistoryTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogSetHistoryTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogSetHistoryTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TtlPeriod != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.TtlPeriod))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetMyDialogsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetMyDialogsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetMyDialogsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Channel {
		i--
		if m.Channel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Chat {
		i--
		if m.Chat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.User {
		i--
		if m.User {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetSavedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetSavedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetSavedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if m.OffsetPeer != nil {
		{
			size, err := m.OffsetPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OffsetId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x30
	}
	if m.OffsetDate != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x28
	}
	if m.ExcludePinned != nil {
		{
			size, err := m.ExcludePinned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetPinnedSavedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetPinnedSavedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetPinnedSavedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogToggleSavedDialogPin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogToggleSavedDialogPin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogToggleSavedDialogPin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pinned != nil {
		{
			size, err := m.Pinned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogReorderPinnedSavedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogReorderPinnedSavedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogReorderPinnedSavedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Order) > 0 {
		for iNdEx := len(m.Order) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Order[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDialogTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Force != nil {
		{
			size, err := m.Force.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogGetDialogFilterBySlug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogGetDialogFilterBySlug) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogGetDialogFilterBySlug) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintDialogTl(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLDialogCreateDialogFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDialogCreateDialogFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDialogCreateDialogFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DialogFilter != nil {
		{
			size, err := m.DialogFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDialogTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintDialogTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vector_PeerWithDraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_PeerWithDraftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_PeerWithDraftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDialogTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_DialogPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_DialogPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_DialogPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDialogTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_DialogExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_DialogExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_DialogExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDialogTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_DialogFilterExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_DialogFilterExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_DialogFilterExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDialogTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_DialogPinnedExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_DialogPinnedExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_DialogPinnedExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDialogTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_Long) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_Long) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_Long) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		dAtA45 := make([]byte, len(m.Datas)*10)
		var j44 int
		for _, num1 := range m.Datas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA45[j44] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j44++
			}
			dAtA45[j44] = uint8(num)
			j44++
		}
		i -= j44
		copy(dAtA[i:], dAtA45[:j44])
		i = encodeVarintDialogTl(dAtA, i, uint64(j44))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDialogTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovDialogTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DialogExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.Order != 0 {
		n += 1 + sovDialogTl(uint64(m.Order))
	}
	if m.Dialog != nil {
		l = m.Dialog.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.AvailableMinId != 0 {
		n += 1 + sovDialogTl(uint64(m.AvailableMinId))
	}
	if m.Date != 0 {
		n += 1 + sovDialogTl(uint64(m.Date))
	}
	l = len(m.ThemeEmoticon)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.TtlPeriod != 0 {
		n += 1 + sovDialogTl(uint64(m.TtlPeriod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DialogFilterExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovDialogTl(uint64(m.Id))
	}
	if m.JoinedBySlug {
		n += 2
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.DialogFilter != nil {
		l = m.DialogFilter.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Order != 0 {
		n += 1 + sovDialogTl(uint64(m.Order))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogFilterExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DialogPinnedExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.Order != 0 {
		n += 1 + sovDialogTl(uint64(m.Order))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogPinnedExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DialogsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if len(m.Chats) > 0 {
		l = 0
		for _, e := range m.Chats {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if len(m.Channels) > 0 {
		l = 0
		for _, e := range m.Channels {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSimpleDialogsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerWithDraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Draft != nil {
		l = m.Draft.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUpdateDraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SavedDialogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.Count != 0 {
		n += 1 + sovDialogTl(uint64(m.Count))
	}
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovDialogTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSavedDialogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogSaveDraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogClearDraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetAllDrafts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogClearAllDrafts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogMarkDialogUnread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.UnreadMark != nil {
		l = m.UnreadMark.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogToggleDialogPin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.Pinned != nil {
		l = m.Pinned.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogUnreadMarkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogsByOffsetDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.ExcludePinned != nil {
		l = m.ExcludePinned.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovDialogTl(uint64(m.OffsetDate))
	}
	if m.Limit != 0 {
		n += 1 + sovDialogTl(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.ExcludePinned != nil {
		l = m.ExcludePinned.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.FolderId != 0 {
		n += 1 + sovDialogTl(uint64(m.FolderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogsByIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if len(m.IdList) > 0 {
		l = 0
		for _, e := range m.IdList {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogsCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.ExcludePinned != nil {
		l = m.ExcludePinned.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.FolderId != 0 {
		n += 1 + sovDialogTl(uint64(m.FolderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetPinnedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.FolderId != 0 {
		n += 1 + sovDialogTl(uint64(m.FolderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogReorderPinnedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.Force != nil {
		l = m.Force.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.FolderId != 0 {
		n += 1 + sovDialogTl(uint64(m.FolderId))
	}
	if len(m.IdList) > 0 {
		l = 0
		for _, e := range m.IdList {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetTopMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogUpdateReadInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.ReadInboxId != 0 {
		n += 1 + sovDialogTl(uint64(m.ReadInboxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogUpdateReadOutbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.ReadOutboxId != 0 {
		n += 1 + sovDialogTl(uint64(m.ReadOutboxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogInsertOrUpdateDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.TopMessage != nil {
		l = m.TopMessage.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.ReadOutboxMaxId != nil {
		l = m.ReadOutboxMaxId.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.ReadInboxMaxId != nil {
		l = m.ReadInboxMaxId.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.UnreadCount != nil {
		l = m.UnreadCount.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.UnreadMark {
		n += 2
	}
	if m.Date2 != nil {
		l = m.Date2.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogDeleteDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetUserPinnedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogUpdateUserPinnedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.PinnedMsgId != 0 {
		n += 1 + sovDialogTl(uint64(m.PinnedMsgId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogInsertOrUpdateDialogFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovDialogTl(uint64(m.Id))
	}
	if m.DialogFilter != nil {
		l = m.DialogFilter.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogDeleteDialogFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovDialogTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogUpdateDialogFiltersOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if len(m.Order) > 0 {
		l = 0
		for _, e := range m.Order {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogFolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.FolderId != 0 {
		n += 1 + sovDialogTl(uint64(m.FolderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogEditPeerFolders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if len(m.PeerDialogList) > 0 {
		l = 0
		for _, e := range m.PeerDialogList {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if m.FolderId != 0 {
		n += 1 + sovDialogTl(uint64(m.FolderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetChannelMessageReadParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovDialogTl(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovDialogTl(uint64(m.MsgId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogSetChatTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	l = len(m.ThemeEmoticon)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogSetHistoryTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovDialogTl(uint64(m.PeerId))
	}
	if m.TtlPeriod != 0 {
		n += 1 + sovDialogTl(uint64(m.TtlPeriod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetMyDialogsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.User {
		n += 2
	}
	if m.Chat {
		n += 2
	}
	if m.Channel {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetSavedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.ExcludePinned != nil {
		l = m.ExcludePinned.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovDialogTl(uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovDialogTl(uint64(m.OffsetId))
	}
	if m.OffsetPeer != nil {
		l = m.OffsetPeer.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovDialogTl(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetPinnedSavedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogToggleSavedDialogPin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.Pinned != nil {
		l = m.Pinned.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogReorderPinnedSavedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.Force != nil {
		l = m.Force.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if len(m.Order) > 0 {
		for _, e := range m.Order {
			l = e.Size()
			n += 1 + l + sovDialogTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovDialogTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogGetDialogFilterBySlug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDialogCreateDialogFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovDialogTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovDialogTl(uint64(m.UserId))
	}
	if m.DialogFilter != nil {
		l = m.DialogFilter.Size()
		n += 1 + l + sovDialogTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_PeerWithDraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovDialogTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_DialogPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovDialogTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_DialogExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovDialogTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_DialogFilterExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovDialogTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_DialogPinnedExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovDialogTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_Long) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		l = 0
		for _, e := range m.Datas {
			l += sovDialogTl(uint64(e))
		}
		n += 1 + sovDialogTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDialogTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDialogTl(x uint64) (n int) {
	return sovDialogTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DialogExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dialog == nil {
				m.Dialog = &mtproto.Dialog{}
			}
			if err := m.Dialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableMinId", wireType)
			}
			m.AvailableMinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableMinId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThemeEmoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThemeEmoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlPeriod", wireType)
			}
			m.TtlPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialogExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialogExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &DialogExt{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogFilterExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogFilterExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogFilterExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedBySlug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JoinedBySlug = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DialogFilter == nil {
				m.DialogFilter = &mtproto.DialogFilter{}
			}
			if err := m.DialogFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogFilterExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialogFilterExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialogFilterExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &DialogFilterExt{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogPinnedExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogPinnedExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogPinnedExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogPinnedExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialogPinnedExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialogPinnedExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &DialogPinnedExt{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Users) == 0 {
					m.Users = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chats = append(m.Chats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Chats) == 0 {
					m.Chats = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chats = append(m.Chats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channels = append(m.Channels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Channels) == 0 {
					m.Channels = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channels = append(m.Channels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSimpleDialogsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_simpleDialogsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_simpleDialogsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &DialogsData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerWithDraftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerWithDraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerWithDraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &mtproto.Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Draft == nil {
				m.Draft = &mtproto.DraftMessage{}
			}
			if err := m.Draft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdateDraftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updateDraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updateDraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &PeerWithDraftMessage{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedDialogList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedDialogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedDialogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &mtproto.SavedDialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSavedDialogList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_savedDialogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_savedDialogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &SavedDialogList{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogSaveDraftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_saveDraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_saveDraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &mtproto.DraftMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogClearDraftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_clearDraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_clearDraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetAllDrafts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getAllDrafts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getAllDrafts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogClearAllDrafts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_clearAllDrafts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_clearAllDrafts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogMarkDialogUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_markDialogUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_markDialogUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnreadMark == nil {
				m.UnreadMark = &mtproto.Bool{}
			}
			if err := m.UnreadMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogToggleDialogPin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_toggleDialogPin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_toggleDialogPin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pinned == nil {
				m.Pinned = &mtproto.Bool{}
			}
			if err := m.Pinned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogUnreadMarkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogUnreadMarkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogUnreadMarkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogsByOffsetDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogsByOffsetDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogsByOffsetDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExcludePinned == nil {
				m.ExcludePinned = &mtproto.Bool{}
			}
			if err := m.ExcludePinned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExcludePinned == nil {
				m.ExcludePinned = &mtproto.Bool{}
			}
			if err := m.ExcludePinned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogsByIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogsByIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogsByIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExcludePinned == nil {
				m.ExcludePinned = &mtproto.Bool{}
			}
			if err := m.ExcludePinned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogReorderPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_reorderPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_reorderPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Force == nil {
				m.Force = &mtproto.Bool{}
			}
			if err := m.Force.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetTopMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getTopMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getTopMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogUpdateReadInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_updateReadInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_updateReadInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxId", wireType)
			}
			m.ReadInboxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogUpdateReadOutbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_updateReadOutbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_updateReadOutbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxId", wireType)
			}
			m.ReadOutboxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogInsertOrUpdateDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_insertOrUpdateDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_insertOrUpdateDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopMessage == nil {
				m.TopMessage = &types.Int32Value{}
			}
			if err := m.TopMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadOutboxMaxId == nil {
				m.ReadOutboxMaxId = &types.Int32Value{}
			}
			if err := m.ReadOutboxMaxId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadInboxMaxId == nil {
				m.ReadInboxMaxId = &types.Int32Value{}
			}
			if err := m.ReadInboxMaxId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnreadCount == nil {
				m.UnreadCount = &types.Int32Value{}
			}
			if err := m.UnreadCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadMark = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date2 == nil {
				m.Date2 = &types.Int64Value{}
			}
			if err := m.Date2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogDeleteDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_deleteDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_deleteDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetUserPinnedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getUserPinnedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getUserPinnedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogUpdateUserPinnedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_updateUserPinnedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_updateUserPinnedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogInsertOrUpdateDialogFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_insertOrUpdateDialogFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_insertOrUpdateDialogFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DialogFilter == nil {
				m.DialogFilter = &mtproto.DialogFilter{}
			}
			if err := m.DialogFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogDeleteDialogFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_deleteDialogFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_deleteDialogFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogUpdateDialogFiltersOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_updateDialogFiltersOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_updateDialogFiltersOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Order = append(m.Order, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Order) == 0 {
					m.Order = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Order = append(m.Order, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogFolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogFolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogFolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogEditPeerFolders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_editPeerFolders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_editPeerFolders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PeerDialogList = append(m.PeerDialogList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PeerDialogList) == 0 {
					m.PeerDialogList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PeerDialogList = append(m.PeerDialogList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerDialogList", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetChannelMessageReadParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getChannelMessageReadParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getChannelMessageReadParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogSetChatTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_setChatTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_setChatTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThemeEmoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThemeEmoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogSetHistoryTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_setHistoryTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_setHistoryTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlPeriod", wireType)
			}
			m.TtlPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetMyDialogsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getMyDialogsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getMyDialogsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.User = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Chat = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetSavedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getSavedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getSavedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExcludePinned == nil {
				m.ExcludePinned = &mtproto.Bool{}
			}
			if err := m.ExcludePinned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetPeer == nil {
				m.OffsetPeer = &mtproto.PeerUtil{}
			}
			if err := m.OffsetPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetPinnedSavedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getPinnedSavedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getPinnedSavedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogToggleSavedDialogPin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_toggleSavedDialogPin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_toggleSavedDialogPin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &mtproto.PeerUtil{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pinned == nil {
				m.Pinned = &mtproto.Bool{}
			}
			if err := m.Pinned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogReorderPinnedSavedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_reorderPinnedSavedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_reorderPinnedSavedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Force == nil {
				m.Force = &mtproto.Bool{}
			}
			if err := m.Force.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = append(m.Order, &mtproto.PeerUtil{})
			if err := m.Order[len(m.Order)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogGetDialogFilterBySlug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_getDialogFilterBySlug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_getDialogFilterBySlug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDialogCreateDialogFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dialog_createDialogFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dialog_createDialogFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DialogFilter == nil {
				m.DialogFilter = &DialogFilterExt{}
			}
			if err := m.DialogFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_PeerWithDraftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_PeerWithDraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_PeerWithDraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &PeerWithDraftMessage{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_DialogPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_DialogPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_DialogPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &mtproto.DialogPeer{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_DialogExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_DialogExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_DialogExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &DialogExt{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_DialogFilterExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_DialogFilterExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_DialogFilterExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &DialogFilterExt{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_DialogPinnedExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_DialogPinnedExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_DialogPinnedExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDialogTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &DialogPinnedExt{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_Long) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_Long: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_Long: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Datas = append(m.Datas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDialogTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Datas) == 0 {
					m.Datas = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Datas = append(m.Datas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDialogTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDialogTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDialogTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDialogTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDialogTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDialogTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDialogTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDialogTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDialogTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDialogTl = fmt.Errorf("proto: unexpected end of group")
)
