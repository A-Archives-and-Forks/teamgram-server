// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: code.tl.proto

package code

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                  TLConstructor = 0
	CRC32_phoneCodeTransaction     TLConstructor = -2089576808
	CRC32_code_createPhoneCode     TLConstructor = 1612963998
	CRC32_code_getPhoneCode        TLConstructor = 1638179065
	CRC32_code_deletePhoneCode     TLConstructor = -1498387888
	CRC32_code_updatePhoneCodeData TLConstructor = -1231746411
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	-2089576808: "CRC32_phoneCodeTransaction",
	1612963998:  "CRC32_code_createPhoneCode",
	1638179065:  "CRC32_code_getPhoneCode",
	-1498387888: "CRC32_code_deletePhoneCode",
	-1231746411: "CRC32_code_updatePhoneCodeData",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                  0,
	"CRC32_phoneCodeTransaction":     -2089576808,
	"CRC32_code_createPhoneCode":     1612963998,
	"CRC32_code_getPhoneCode":        1638179065,
	"CRC32_code_deletePhoneCode":     -1498387888,
	"CRC32_code_updatePhoneCodeData": -1231746411,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_de28ee98d4359e5d, []int{0}
}

// PhoneCodeTransaction <--
//  + TL_phoneCodeTransaction
//
type PhoneCodeTransaction struct {
	PredicateName         string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor           TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=code.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId             int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId             int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Phone                 string        `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneNumberRegistered bool          `protobuf:"varint,6,opt,name=phone_number_registered,json=phoneNumberRegistered,proto3" json:"phone_number_registered,omitempty"`
	PhoneCode             string        `protobuf:"bytes,7,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	PhoneCodeHash         string        `protobuf:"bytes,8,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCodeExpired      int32         `protobuf:"varint,9,opt,name=phone_code_expired,json=phoneCodeExpired,proto3" json:"phone_code_expired,omitempty"`
	PhoneCodeExtraData    string        `protobuf:"bytes,10,opt,name=phone_code_extra_data,json=phoneCodeExtraData,proto3" json:"phone_code_extra_data,omitempty"`
	SentCodeType          int32         `protobuf:"varint,11,opt,name=sent_code_type,json=sentCodeType,proto3" json:"sent_code_type,omitempty"`
	FlashCallPattern      string        `protobuf:"bytes,12,opt,name=flash_call_pattern,json=flashCallPattern,proto3" json:"flash_call_pattern,omitempty"`
	NextCodeType          int32         `protobuf:"varint,13,opt,name=next_code_type,json=nextCodeType,proto3" json:"next_code_type,omitempty"`
	State                 int32         `protobuf:"varint,14,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *PhoneCodeTransaction) Reset()         { *m = PhoneCodeTransaction{} }
func (m *PhoneCodeTransaction) String() string { return proto.CompactTextString(m) }
func (*PhoneCodeTransaction) ProtoMessage()    {}
func (*PhoneCodeTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_de28ee98d4359e5d, []int{0}
}
func (m *PhoneCodeTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneCodeTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneCodeTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneCodeTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneCodeTransaction.Merge(m, src)
}
func (m *PhoneCodeTransaction) XXX_Size() int {
	return m.Size()
}
func (m *PhoneCodeTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneCodeTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneCodeTransaction proto.InternalMessageInfo

func (m *PhoneCodeTransaction) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *PhoneCodeTransaction) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *PhoneCodeTransaction) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *PhoneCodeTransaction) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PhoneCodeTransaction) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PhoneCodeTransaction) GetPhoneNumberRegistered() bool {
	if m != nil {
		return m.PhoneNumberRegistered
	}
	return false
}

func (m *PhoneCodeTransaction) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *PhoneCodeTransaction) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *PhoneCodeTransaction) GetPhoneCodeExpired() int32 {
	if m != nil {
		return m.PhoneCodeExpired
	}
	return 0
}

func (m *PhoneCodeTransaction) GetPhoneCodeExtraData() string {
	if m != nil {
		return m.PhoneCodeExtraData
	}
	return ""
}

func (m *PhoneCodeTransaction) GetSentCodeType() int32 {
	if m != nil {
		return m.SentCodeType
	}
	return 0
}

func (m *PhoneCodeTransaction) GetFlashCallPattern() string {
	if m != nil {
		return m.FlashCallPattern
	}
	return ""
}

func (m *PhoneCodeTransaction) GetNextCodeType() int32 {
	if m != nil {
		return m.NextCodeType
	}
	return 0
}

func (m *PhoneCodeTransaction) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type TLPhoneCodeTransaction struct {
	Data2                *PhoneCodeTransaction `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLPhoneCodeTransaction) Reset()         { *m = TLPhoneCodeTransaction{} }
func (m *TLPhoneCodeTransaction) String() string { return proto.CompactTextString(m) }
func (*TLPhoneCodeTransaction) ProtoMessage()    {}
func (*TLPhoneCodeTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_de28ee98d4359e5d, []int{1}
}
func (m *TLPhoneCodeTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneCodeTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneCodeTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneCodeTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneCodeTransaction.Merge(m, src)
}
func (m *TLPhoneCodeTransaction) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneCodeTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneCodeTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneCodeTransaction proto.InternalMessageInfo

func (m *TLPhoneCodeTransaction) GetData2() *PhoneCodeTransaction {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLCodeCreatePhoneCode struct {
	Constructor           TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=code.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId             int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId             int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Phone                 string        `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneNumberRegistered bool          `protobuf:"varint,6,opt,name=phone_number_registered,json=phoneNumberRegistered,proto3" json:"phone_number_registered,omitempty"`
	SentCodeType          int32         `protobuf:"varint,7,opt,name=sent_code_type,json=sentCodeType,proto3" json:"sent_code_type,omitempty"`
	NextCodeType          int32         `protobuf:"varint,8,opt,name=next_code_type,json=nextCodeType,proto3" json:"next_code_type,omitempty"`
	State                 int32         `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *TLCodeCreatePhoneCode) Reset()         { *m = TLCodeCreatePhoneCode{} }
func (m *TLCodeCreatePhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLCodeCreatePhoneCode) ProtoMessage()    {}
func (*TLCodeCreatePhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_de28ee98d4359e5d, []int{2}
}
func (m *TLCodeCreatePhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLCodeCreatePhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLCodeCreatePhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLCodeCreatePhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLCodeCreatePhoneCode.Merge(m, src)
}
func (m *TLCodeCreatePhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLCodeCreatePhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLCodeCreatePhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLCodeCreatePhoneCode proto.InternalMessageInfo

func (m *TLCodeCreatePhoneCode) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLCodeCreatePhoneCode) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLCodeCreatePhoneCode) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *TLCodeCreatePhoneCode) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLCodeCreatePhoneCode) GetPhoneNumberRegistered() bool {
	if m != nil {
		return m.PhoneNumberRegistered
	}
	return false
}

func (m *TLCodeCreatePhoneCode) GetSentCodeType() int32 {
	if m != nil {
		return m.SentCodeType
	}
	return 0
}

func (m *TLCodeCreatePhoneCode) GetNextCodeType() int32 {
	if m != nil {
		return m.NextCodeType
	}
	return 0
}

func (m *TLCodeCreatePhoneCode) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLCodeGetPhoneCode struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=code.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Phone                string        `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneCodeHash        string        `protobuf:"bytes,5,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLCodeGetPhoneCode) Reset()         { *m = TLCodeGetPhoneCode{} }
func (m *TLCodeGetPhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLCodeGetPhoneCode) ProtoMessage()    {}
func (*TLCodeGetPhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_de28ee98d4359e5d, []int{3}
}
func (m *TLCodeGetPhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLCodeGetPhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLCodeGetPhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLCodeGetPhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLCodeGetPhoneCode.Merge(m, src)
}
func (m *TLCodeGetPhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLCodeGetPhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLCodeGetPhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLCodeGetPhoneCode proto.InternalMessageInfo

func (m *TLCodeGetPhoneCode) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLCodeGetPhoneCode) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLCodeGetPhoneCode) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLCodeGetPhoneCode) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLCodeDeletePhoneCode struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=code.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Phone                string        `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneCodeHash        string        `protobuf:"bytes,5,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLCodeDeletePhoneCode) Reset()         { *m = TLCodeDeletePhoneCode{} }
func (m *TLCodeDeletePhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLCodeDeletePhoneCode) ProtoMessage()    {}
func (*TLCodeDeletePhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_de28ee98d4359e5d, []int{4}
}
func (m *TLCodeDeletePhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLCodeDeletePhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLCodeDeletePhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLCodeDeletePhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLCodeDeletePhoneCode.Merge(m, src)
}
func (m *TLCodeDeletePhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLCodeDeletePhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLCodeDeletePhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLCodeDeletePhoneCode proto.InternalMessageInfo

func (m *TLCodeDeletePhoneCode) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLCodeDeletePhoneCode) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLCodeDeletePhoneCode) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLCodeDeletePhoneCode) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLCodeUpdatePhoneCodeData struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=code.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64                 `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Phone                string                `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneCodeHash        string                `protobuf:"bytes,5,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	CodeData             *PhoneCodeTransaction `protobuf:"bytes,6,opt,name=code_data,json=codeData,proto3" json:"code_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLCodeUpdatePhoneCodeData) Reset()         { *m = TLCodeUpdatePhoneCodeData{} }
func (m *TLCodeUpdatePhoneCodeData) String() string { return proto.CompactTextString(m) }
func (*TLCodeUpdatePhoneCodeData) ProtoMessage()    {}
func (*TLCodeUpdatePhoneCodeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_de28ee98d4359e5d, []int{5}
}
func (m *TLCodeUpdatePhoneCodeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLCodeUpdatePhoneCodeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLCodeUpdatePhoneCodeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLCodeUpdatePhoneCodeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLCodeUpdatePhoneCodeData.Merge(m, src)
}
func (m *TLCodeUpdatePhoneCodeData) XXX_Size() int {
	return m.Size()
}
func (m *TLCodeUpdatePhoneCodeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLCodeUpdatePhoneCodeData.DiscardUnknown(m)
}

var xxx_messageInfo_TLCodeUpdatePhoneCodeData proto.InternalMessageInfo

func (m *TLCodeUpdatePhoneCodeData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLCodeUpdatePhoneCodeData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLCodeUpdatePhoneCodeData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLCodeUpdatePhoneCodeData) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLCodeUpdatePhoneCodeData) GetCodeData() *PhoneCodeTransaction {
	if m != nil {
		return m.CodeData
	}
	return nil
}

func init() {
	proto.RegisterEnum("code.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*PhoneCodeTransaction)(nil), "code.PhoneCodeTransaction")
	proto.RegisterType((*TLPhoneCodeTransaction)(nil), "code.TL_phoneCodeTransaction")
	proto.RegisterType((*TLCodeCreatePhoneCode)(nil), "code.TL_code_createPhoneCode")
	proto.RegisterType((*TLCodeGetPhoneCode)(nil), "code.TL_code_getPhoneCode")
	proto.RegisterType((*TLCodeDeletePhoneCode)(nil), "code.TL_code_deletePhoneCode")
	proto.RegisterType((*TLCodeUpdatePhoneCodeData)(nil), "code.TL_code_updatePhoneCodeData")
}

func init() { proto.RegisterFile("code.tl.proto", fileDescriptor_de28ee98d4359e5d) }

var fileDescriptor_de28ee98d4359e5d = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xbd, 0x8f, 0xe3, 0x44,
	0x14, 0xcf, 0xec, 0x25, 0xd9, 0x64, 0x72, 0x09, 0xbe, 0x21, 0xa7, 0x35, 0x46, 0x67, 0x42, 0xc4,
	0x47, 0x04, 0x5c, 0x02, 0x39, 0x01, 0x15, 0xcd, 0x05, 0x10, 0xa7, 0x3d, 0x72, 0x2b, 0xb3, 0x08,
	0x89, 0xc6, 0x9a, 0xd8, 0xef, 0x6c, 0x0b, 0xc7, 0x63, 0x8d, 0x27, 0x70, 0xa1, 0xa3, 0xa3, 0x41,
	0x48, 0x48, 0x27, 0x21, 0x21, 0xd1, 0x50, 0x22, 0xa8, 0xa0, 0xa0, 0x42, 0x5b, 0x20, 0x51, 0xa1,
	0x2b, 0xee, 0x0f, 0x80, 0x6d, 0xa1, 0xa0, 0xe4, 0xa3, 0x08, 0x9a, 0x71, 0x12, 0x3b, 0x89, 0xb9,
	0x2b, 0x10, 0x88, 0x6b, 0xa2, 0x99, 0xf7, 0xfb, 0xcd, 0xef, 0xbd, 0x79, 0x1f, 0x13, 0xe3, 0xa6,
	0xc3, 0x5c, 0xe8, 0x8b, 0xb0, 0x1f, 0x73, 0x26, 0x18, 0x29, 0xcb, 0xad, 0x71, 0xd1, 0x0b, 0x84,
	0x3f, 0x9b, 0xf4, 0x1d, 0x36, 0x1d, 0x78, 0xcc, 0x63, 0x03, 0x05, 0x4e, 0x66, 0xd7, 0xd5, 0x4e,
	0x6d, 0xd4, 0x2a, 0x3d, 0x64, 0x98, 0x1e, 0x63, 0x5e, 0x08, 0x19, 0xeb, 0x1d, 0x4e, 0xe3, 0x18,
	0x78, 0xb2, 0xc4, 0x8d, 0xc4, 0xf1, 0x61, 0x4a, 0xa5, 0x17, 0x87, 0x71, 0xb0, 0xc5, 0x3c, 0x86,
	0x15, 0xf6, 0x40, 0x86, 0x09, 0x4e, 0xa3, 0x24, 0x66, 0x5c, 0x2c, 0xa1, 0x76, 0x06, 0x25, 0xf3,
	0xc8, 0x49, 0xad, 0xdd, 0x6f, 0xca, 0xb8, 0x7d, 0xe4, 0xb3, 0x08, 0x46, 0xcc, 0x85, 0x63, 0x79,
	0x84, 0x3a, 0x22, 0x60, 0x11, 0x79, 0x14, 0xb7, 0x62, 0x0e, 0x6e, 0xe0, 0x50, 0x01, 0x76, 0x44,
	0xa7, 0xa0, 0xa3, 0x0e, 0xea, 0xd5, 0xad, 0xe6, 0xda, 0x3a, 0xa6, 0x53, 0x20, 0xcf, 0xe2, 0x86,
	0xc3, 0xa2, 0x44, 0xf0, 0x99, 0x23, 0x18, 0xd7, 0xf7, 0x3a, 0xa8, 0xd7, 0x1a, 0xde, 0xdf, 0x57,
	0x69, 0x38, 0xbe, 0x3a, 0xca, 0x20, 0x2b, 0xcf, 0x23, 0x26, 0x6e, 0xd0, 0x99, 0xf0, 0xed, 0xb7,
	0x60, 0x6e, 0x07, 0xae, 0x7e, 0xa6, 0x83, 0x7a, 0x67, 0xac, 0xba, 0x34, 0x1d, 0xc2, 0xfc, 0x8a,
	0x4b, 0x2e, 0x60, 0x9c, 0x40, 0x92, 0x04, 0x2c, 0x92, 0x70, 0x39, 0x85, 0x97, 0x96, 0x2b, 0x2e,
	0x69, 0xe3, 0x4a, 0x2c, 0x83, 0xd6, 0x2b, 0x2a, 0xa6, 0x74, 0x43, 0x9e, 0xc3, 0x07, 0x6a, 0x61,
	0x47, 0xb3, 0xe9, 0x04, 0xb8, 0xcd, 0xc1, 0x0b, 0x12, 0x01, 0x1c, 0x5c, 0xbd, 0xda, 0x41, 0xbd,
	0x9a, 0x75, 0x5e, 0xc1, 0x63, 0x85, 0x5a, 0x6b, 0x50, 0x3a, 0x4b, 0xcf, 0xc9, 0xa8, 0xf5, 0x7d,
	0x25, 0x59, 0x8f, 0x57, 0x49, 0x21, 0x8f, 0xe1, 0xfb, 0x32, 0xd8, 0xf6, 0x69, 0xe2, 0xeb, 0xb5,
	0x65, 0x2a, 0x56, 0x9c, 0x57, 0x68, 0xe2, 0x93, 0xa7, 0x30, 0xc9, 0xf1, 0xe0, 0x46, 0x1c, 0x48,
	0xcf, 0xf5, 0x0e, 0xea, 0x55, 0x2c, 0x6d, 0x4d, 0x7d, 0x29, 0xb5, 0x93, 0x67, 0xf0, 0xf9, 0x0d,
	0xb6, 0xe0, 0xd4, 0x76, 0xa9, 0xa0, 0x3a, 0x56, 0xda, 0x24, 0x77, 0x40, 0x70, 0xfa, 0x22, 0x15,
	0x94, 0x3c, 0x82, 0x5b, 0x09, 0x44, 0x22, 0x3d, 0x21, 0xab, 0xae, 0x37, 0x94, 0xf8, 0x59, 0x69,
	0x55, 0xf5, 0x9b, 0xc7, 0x20, 0xc3, 0xb8, 0x1e, 0xd2, 0xc4, 0xb7, 0x1d, 0x1a, 0x86, 0x76, 0x4c,
	0x85, 0x00, 0x1e, 0xe9, 0x67, 0x95, 0xaa, 0xa6, 0x90, 0x11, 0x0d, 0xc3, 0xa3, 0xd4, 0x2e, 0x35,
	0x23, 0xb8, 0x91, 0xd7, 0x6c, 0xa6, 0x9a, 0xd2, 0xba, 0xd6, 0x6c, 0xe3, 0x4a, 0x22, 0xa8, 0x00,
	0xbd, 0xa5, 0xc0, 0x74, 0xd3, 0x3d, 0xc4, 0x07, 0xc7, 0x57, 0xed, 0xb8, 0xa8, 0x7b, 0x9e, 0xc6,
	0x15, 0x79, 0x99, 0xa1, 0x6a, 0x9a, 0xc6, 0xd0, 0x48, 0x1b, 0xa2, 0xa8, 0xd1, 0xac, 0x94, 0xd8,
	0xfd, 0x76, 0x4f, 0xa9, 0xa9, 0x38, 0x1c, 0x0e, 0x54, 0xc0, 0x9a, 0xbd, 0xdd, 0x64, 0xe8, 0x5e,
	0x6c, 0xb2, 0xdd, 0xe2, 0xed, 0x17, 0x14, 0x6f, 0xb7, 0x1c, 0xb5, 0x3b, 0x95, 0xa3, 0x9e, 0x2f,
	0xc7, 0xe7, 0x08, 0xb7, 0x57, 0x19, 0xf4, 0x40, 0xfc, 0xeb, 0xe9, 0x5b, 0xe7, 0xa7, 0x9c, 0xcf,
	0x4f, 0xc1, 0xb4, 0x54, 0x0a, 0xa6, 0xa5, 0xfb, 0x25, 0xca, 0xea, 0xed, 0x42, 0x08, 0xff, 0x41,
	0xbd, 0xff, 0x59, 0xc0, 0x3f, 0x23, 0xfc, 0xe0, 0x2a, 0xe0, 0x59, 0xec, 0xe6, 0x1b, 0x54, 0x4d,
	0xe7, 0xff, 0x31, 0x68, 0xf2, 0x3c, 0xae, 0xa7, 0x19, 0x96, 0x2f, 0x4b, 0xf5, 0xae, 0xb3, 0x58,
	0x73, 0x96, 0xb7, 0x79, 0xe2, 0x17, 0x84, 0x9b, 0x1b, 0x51, 0x93, 0x73, 0xb8, 0x39, 0xb2, 0x46,
	0x97, 0x86, 0xf6, 0xeb, 0xe3, 0xc3, 0xf1, 0xb5, 0x37, 0xc6, 0x5a, 0x89, 0x3c, 0x8e, 0x8d, 0xd4,
	0x54, 0xf4, 0x06, 0x68, 0x1f, 0x7f, 0xf1, 0xc3, 0x27, 0xbf, 0x2d, 0x16, 0x8b, 0x05, 0x22, 0xdd,
	0x15, 0xb1, 0x68, 0xbc, 0xb5, 0x4f, 0x4f, 0x3e, 0x7c, 0xaf, 0x4a, 0x1e, 0xc2, 0x07, 0x39, 0x4e,
	0xbe, 0x81, 0xb5, 0xdf, 0x4f, 0x3e, 0xfa, 0xa0, 0x9a, 0x79, 0x2b, 0xea, 0x19, 0xed, 0xd6, 0xed,
	0x93, 0xaf, 0xff, 0x48, 0xbd, 0x3d, 0x89, 0xcd, 0x1c, 0xb1, 0xa0, 0x56, 0xda, 0xcd, 0x9b, 0xb7,
	0xbf, 0xfa, 0x53, 0x91, 0x8d, 0xf2, 0xfb, 0x9f, 0x99, 0xa5, 0xe1, 0x77, 0x7b, 0x78, 0xdf, 0x3a,
	0x1a, 0xa9, 0xee, 0x7b, 0x0d, 0xb7, 0x0b, 0x5f, 0xa1, 0x0b, 0xab, 0x5a, 0x16, 0xde, 0xc2, 0xb8,
	0x43, 0x5e, 0xbb, 0x25, 0xf2, 0x2a, 0x3e, 0xb7, 0x3b, 0x98, 0xc6, 0xa6, 0x62, 0x1e, 0xbb, 0x8b,
	0xdc, 0xcb, 0xcb, 0x18, 0xb7, 0x27, 0x67, 0x2b, 0xc6, 0x2d, 0xd8, 0x68, 0xf6, 0xa7, 0x42, 0xfd,
	0xef, 0xf7, 0x2f, 0x33, 0x16, 0x76, 0x4b, 0x64, 0x8c, 0xf5, 0xbf, 0x6d, 0xe8, 0x87, 0x37, 0xb5,
	0x0a, 0x28, 0x3b, 0x7a, 0x97, 0xaf, 0xfd, 0xfa, 0x93, 0x89, 0xbe, 0x3f, 0x35, 0xd1, 0xad, 0x53,
	0x13, 0xfd, 0x78, 0x6a, 0xa2, 0x37, 0x5f, 0xc8, 0x7d, 0xfc, 0x08, 0xa0, 0x53, 0x8f, 0xd3, 0x6c,
	0x71, 0x31, 0x01, 0xfe, 0x36, 0xf0, 0x01, 0x8d, 0xe3, 0x81, 0x5c, 0x06, 0x0e, 0x0c, 0x26, 0xc1,
	0xbb, 0x03, 0xe9, 0x50, 0xfd, 0x4c, 0xaa, 0x4a, 0xfe, 0xd2, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x44, 0x52, 0x9b, 0x97, 0x59, 0x09, 0x00, 0x00,
}

func (this *PhoneCodeTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&code.PhoneCodeTransaction{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "PhoneNumberRegistered: "+fmt.Sprintf("%#v", this.PhoneNumberRegistered)+",\n")
	s = append(s, "PhoneCode: "+fmt.Sprintf("%#v", this.PhoneCode)+",\n")
	s = append(s, "PhoneCodeHash: "+fmt.Sprintf("%#v", this.PhoneCodeHash)+",\n")
	s = append(s, "PhoneCodeExpired: "+fmt.Sprintf("%#v", this.PhoneCodeExpired)+",\n")
	s = append(s, "PhoneCodeExtraData: "+fmt.Sprintf("%#v", this.PhoneCodeExtraData)+",\n")
	s = append(s, "SentCodeType: "+fmt.Sprintf("%#v", this.SentCodeType)+",\n")
	s = append(s, "FlashCallPattern: "+fmt.Sprintf("%#v", this.FlashCallPattern)+",\n")
	s = append(s, "NextCodeType: "+fmt.Sprintf("%#v", this.NextCodeType)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLPhoneCodeTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&code.TLPhoneCodeTransaction{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLCodeCreatePhoneCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&code.TLCodeCreatePhoneCode{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "PhoneNumberRegistered: "+fmt.Sprintf("%#v", this.PhoneNumberRegistered)+",\n")
	s = append(s, "SentCodeType: "+fmt.Sprintf("%#v", this.SentCodeType)+",\n")
	s = append(s, "NextCodeType: "+fmt.Sprintf("%#v", this.NextCodeType)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLCodeGetPhoneCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&code.TLCodeGetPhoneCode{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "PhoneCodeHash: "+fmt.Sprintf("%#v", this.PhoneCodeHash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLCodeDeletePhoneCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&code.TLCodeDeletePhoneCode{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "PhoneCodeHash: "+fmt.Sprintf("%#v", this.PhoneCodeHash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLCodeUpdatePhoneCodeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&code.TLCodeUpdatePhoneCodeData{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "PhoneCodeHash: "+fmt.Sprintf("%#v", this.PhoneCodeHash)+",\n")
	if this.CodeData != nil {
		s = append(s, "CodeData: "+fmt.Sprintf("%#v", this.CodeData)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCodeTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCCodeClient is the client API for RPCCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCCodeClient interface {
	CodeCreatePhoneCode(ctx context.Context, in *TLCodeCreatePhoneCode, opts ...grpc.CallOption) (*PhoneCodeTransaction, error)
	CodeGetPhoneCode(ctx context.Context, in *TLCodeGetPhoneCode, opts ...grpc.CallOption) (*PhoneCodeTransaction, error)
	CodeDeletePhoneCode(ctx context.Context, in *TLCodeDeletePhoneCode, opts ...grpc.CallOption) (*mtproto.Bool, error)
	CodeUpdatePhoneCodeData(ctx context.Context, in *TLCodeUpdatePhoneCodeData, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type rPCCodeClient struct {
	cc *grpc.ClientConn
}

func NewRPCCodeClient(cc *grpc.ClientConn) RPCCodeClient {
	return &rPCCodeClient{cc}
}

func (c *rPCCodeClient) CodeCreatePhoneCode(ctx context.Context, in *TLCodeCreatePhoneCode, opts ...grpc.CallOption) (*PhoneCodeTransaction, error) {
	out := new(PhoneCodeTransaction)
	err := c.cc.Invoke(ctx, "/code.RPCCode/code_createPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCodeClient) CodeGetPhoneCode(ctx context.Context, in *TLCodeGetPhoneCode, opts ...grpc.CallOption) (*PhoneCodeTransaction, error) {
	out := new(PhoneCodeTransaction)
	err := c.cc.Invoke(ctx, "/code.RPCCode/code_getPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCodeClient) CodeDeletePhoneCode(ctx context.Context, in *TLCodeDeletePhoneCode, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/code.RPCCode/code_deletePhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCodeClient) CodeUpdatePhoneCodeData(ctx context.Context, in *TLCodeUpdatePhoneCodeData, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/code.RPCCode/code_updatePhoneCodeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCCodeServer is the server API for RPCCode service.
type RPCCodeServer interface {
	CodeCreatePhoneCode(context.Context, *TLCodeCreatePhoneCode) (*PhoneCodeTransaction, error)
	CodeGetPhoneCode(context.Context, *TLCodeGetPhoneCode) (*PhoneCodeTransaction, error)
	CodeDeletePhoneCode(context.Context, *TLCodeDeletePhoneCode) (*mtproto.Bool, error)
	CodeUpdatePhoneCodeData(context.Context, *TLCodeUpdatePhoneCodeData) (*mtproto.Bool, error)
}

// UnimplementedRPCCodeServer can be embedded to have forward compatible implementations.
type UnimplementedRPCCodeServer struct {
}

func (*UnimplementedRPCCodeServer) CodeCreatePhoneCode(ctx context.Context, req *TLCodeCreatePhoneCode) (*PhoneCodeTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeCreatePhoneCode not implemented")
}
func (*UnimplementedRPCCodeServer) CodeGetPhoneCode(ctx context.Context, req *TLCodeGetPhoneCode) (*PhoneCodeTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeGetPhoneCode not implemented")
}
func (*UnimplementedRPCCodeServer) CodeDeletePhoneCode(ctx context.Context, req *TLCodeDeletePhoneCode) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeDeletePhoneCode not implemented")
}
func (*UnimplementedRPCCodeServer) CodeUpdatePhoneCodeData(ctx context.Context, req *TLCodeUpdatePhoneCodeData) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeUpdatePhoneCodeData not implemented")
}

func RegisterRPCCodeServer(s *grpc.Server, srv RPCCodeServer) {
	s.RegisterService(&_RPCCode_serviceDesc, srv)
}

func _RPCCode_CodeCreatePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLCodeCreatePhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCodeServer).CodeCreatePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/code.RPCCode/CodeCreatePhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCodeServer).CodeCreatePhoneCode(ctx, req.(*TLCodeCreatePhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCode_CodeGetPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLCodeGetPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCodeServer).CodeGetPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/code.RPCCode/CodeGetPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCodeServer).CodeGetPhoneCode(ctx, req.(*TLCodeGetPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCode_CodeDeletePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLCodeDeletePhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCodeServer).CodeDeletePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/code.RPCCode/CodeDeletePhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCodeServer).CodeDeletePhoneCode(ctx, req.(*TLCodeDeletePhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCode_CodeUpdatePhoneCodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLCodeUpdatePhoneCodeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCodeServer).CodeUpdatePhoneCodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/code.RPCCode/CodeUpdatePhoneCodeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCodeServer).CodeUpdatePhoneCodeData(ctx, req.(*TLCodeUpdatePhoneCodeData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCCode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "code.RPCCode",
	HandlerType: (*RPCCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "code_createPhoneCode",
			Handler:    _RPCCode_CodeCreatePhoneCode_Handler,
		},
		{
			MethodName: "code_getPhoneCode",
			Handler:    _RPCCode_CodeGetPhoneCode_Handler,
		},
		{
			MethodName: "code_deletePhoneCode",
			Handler:    _RPCCode_CodeDeletePhoneCode_Handler,
		},
		{
			MethodName: "code_updatePhoneCodeData",
			Handler:    _RPCCode_CodeUpdatePhoneCodeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code.tl.proto",
}

func (m *PhoneCodeTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCodeTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneCodeTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x70
	}
	if m.NextCodeType != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.NextCodeType))
		i--
		dAtA[i] = 0x68
	}
	if len(m.FlashCallPattern) > 0 {
		i -= len(m.FlashCallPattern)
		copy(dAtA[i:], m.FlashCallPattern)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.FlashCallPattern)))
		i--
		dAtA[i] = 0x62
	}
	if m.SentCodeType != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.SentCodeType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PhoneCodeExtraData) > 0 {
		i -= len(m.PhoneCodeExtraData)
		copy(dAtA[i:], m.PhoneCodeExtraData)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.PhoneCodeExtraData)))
		i--
		dAtA[i] = 0x52
	}
	if m.PhoneCodeExpired != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.PhoneCodeExpired))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PhoneNumberRegistered {
		i--
		if m.PhoneNumberRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SessionId != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneCodeTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneCodeTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneCodeTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodeTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLCodeCreatePhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLCodeCreatePhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLCodeCreatePhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if m.NextCodeType != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.NextCodeType))
		i--
		dAtA[i] = 0x40
	}
	if m.SentCodeType != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.SentCodeType))
		i--
		dAtA[i] = 0x38
	}
	if m.PhoneNumberRegistered {
		i--
		if m.PhoneNumberRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SessionId != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLCodeGetPhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLCodeGetPhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLCodeGetPhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x22
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLCodeDeletePhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLCodeDeletePhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLCodeDeletePhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x22
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLCodeUpdatePhoneCodeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLCodeUpdatePhoneCodeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLCodeUpdatePhoneCodeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CodeData != nil {
		{
			size, err := m.CodeData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodeTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCodeTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x22
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintCodeTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCodeTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovCodeTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PhoneCodeTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovCodeTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovCodeTl(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovCodeTl(uint64(m.SessionId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.PhoneNumberRegistered {
		n += 2
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.PhoneCodeExpired != 0 {
		n += 1 + sovCodeTl(uint64(m.PhoneCodeExpired))
	}
	l = len(m.PhoneCodeExtraData)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.SentCodeType != 0 {
		n += 1 + sovCodeTl(uint64(m.SentCodeType))
	}
	l = len(m.FlashCallPattern)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.NextCodeType != 0 {
		n += 1 + sovCodeTl(uint64(m.NextCodeType))
	}
	if m.State != 0 {
		n += 1 + sovCodeTl(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLPhoneCodeTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLCodeCreatePhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovCodeTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovCodeTl(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovCodeTl(uint64(m.SessionId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.PhoneNumberRegistered {
		n += 2
	}
	if m.SentCodeType != 0 {
		n += 1 + sovCodeTl(uint64(m.SentCodeType))
	}
	if m.NextCodeType != 0 {
		n += 1 + sovCodeTl(uint64(m.NextCodeType))
	}
	if m.State != 0 {
		n += 1 + sovCodeTl(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLCodeGetPhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovCodeTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovCodeTl(uint64(m.AuthKeyId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLCodeDeletePhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovCodeTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovCodeTl(uint64(m.AuthKeyId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLCodeUpdatePhoneCodeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovCodeTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovCodeTl(uint64(m.AuthKeyId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.CodeData != nil {
		l = m.CodeData.Size()
		n += 1 + l + sovCodeTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCodeTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCodeTl(x uint64) (n int) {
	return sovCodeTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PhoneCodeTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodeTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCodeTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCodeTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumberRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneNumberRegistered = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeExpired", wireType)
			}
			m.PhoneCodeExpired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneCodeExpired |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeExtraData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeExtraData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentCodeType", wireType)
			}
			m.SentCodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentCodeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashCallPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlashCallPattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCodeType", wireType)
			}
			m.NextCodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCodeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodeTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCodeTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneCodeTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodeTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phoneCodeTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phoneCodeTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &PhoneCodeTransaction{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodeTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCodeTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLCodeCreatePhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodeTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_code_createPhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_code_createPhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumberRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneNumberRegistered = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentCodeType", wireType)
			}
			m.SentCodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentCodeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCodeType", wireType)
			}
			m.NextCodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCodeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodeTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCodeTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLCodeGetPhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodeTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_code_getPhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_code_getPhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodeTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCodeTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLCodeDeletePhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodeTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_code_deletePhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_code_deletePhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodeTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCodeTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLCodeUpdatePhoneCodeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodeTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_code_updatePhoneCodeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_code_updatePhoneCodeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodeTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodeTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CodeData == nil {
				m.CodeData = &PhoneCodeTransaction{}
			}
			if err := m.CodeData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodeTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCodeTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodeTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodeTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodeTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodeTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCodeTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCodeTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCodeTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodeTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCodeTl = fmt.Errorf("proto: unexpected end of group")
)
