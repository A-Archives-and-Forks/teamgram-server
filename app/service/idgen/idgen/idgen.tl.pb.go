// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: idgen.tl.proto

package idgen

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                   TLConstructor = 0
	CRC32_inputId                   TLConstructor = -1963845268
	CRC32_inputIds                  TLConstructor = 2133352380
	CRC32_inputSeqId                TLConstructor = -850215987
	CRC32_inputNSeqId               TLConstructor = 2058448257
	CRC32_idVal                     TLConstructor = -1065859893
	CRC32_idVals                    TLConstructor = 473672294
	CRC32_seqIdVal                  TLConstructor = 704937224
	CRC32_idgen_nextId              TLConstructor = -1099886560
	CRC32_idgen_nextIds             TLConstructor = 1204121518
	CRC32_idgen_getCurrentSeqId     TLConstructor = -1654936704
	CRC32_idgen_setCurrentSeqId     TLConstructor = -852747923
	CRC32_idgen_getNextSeqId        TLConstructor = -160339608
	CRC32_idgen_getNextNSeqId       TLConstructor = -1479226258
	CRC32_idgen_getNextIdValList    TLConstructor = -1434062537
	CRC32_idgen_getCurrentSeqIdList TLConstructor = -769020349
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	-1963845268: "CRC32_inputId",
	2133352380:  "CRC32_inputIds",
	-850215987:  "CRC32_inputSeqId",
	2058448257:  "CRC32_inputNSeqId",
	-1065859893: "CRC32_idVal",
	473672294:   "CRC32_idVals",
	704937224:   "CRC32_seqIdVal",
	-1099886560: "CRC32_idgen_nextId",
	1204121518:  "CRC32_idgen_nextIds",
	-1654936704: "CRC32_idgen_getCurrentSeqId",
	-852747923:  "CRC32_idgen_setCurrentSeqId",
	-160339608:  "CRC32_idgen_getNextSeqId",
	-1479226258: "CRC32_idgen_getNextNSeqId",
	-1434062537: "CRC32_idgen_getNextIdValList",
	-769020349:  "CRC32_idgen_getCurrentSeqIdList",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                   0,
	"CRC32_inputId":                   -1963845268,
	"CRC32_inputIds":                  2133352380,
	"CRC32_inputSeqId":                -850215987,
	"CRC32_inputNSeqId":               2058448257,
	"CRC32_idVal":                     -1065859893,
	"CRC32_idVals":                    473672294,
	"CRC32_seqIdVal":                  704937224,
	"CRC32_idgen_nextId":              -1099886560,
	"CRC32_idgen_nextIds":             1204121518,
	"CRC32_idgen_getCurrentSeqId":     -1654936704,
	"CRC32_idgen_setCurrentSeqId":     -852747923,
	"CRC32_idgen_getNextSeqId":        -160339608,
	"CRC32_idgen_getNextNSeqId":       -1479226258,
	"CRC32_idgen_getNextIdValList":    -1434062537,
	"CRC32_idgen_getCurrentSeqIdList": -769020349,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{0}
}

// IdVal <--
//   - TL_idVal
//   - TL_idVals
//   - TL_seqIdVal
type IdVal struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Id_INT64             int64         `protobuf:"varint,3,opt,name=id_INT64,json=idINT64,proto3" json:"id_INT64,omitempty"`
	Id_VECTORINT64       []int64       `protobuf:"varint,4,rep,packed,name=id_VECTORINT64,json=idVECTORINT64,proto3" json:"id_VECTORINT64,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IdVal) Reset()         { *m = IdVal{} }
func (m *IdVal) String() string { return proto.CompactTextString(m) }
func (*IdVal) ProtoMessage()    {}
func (*IdVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{0}
}
func (m *IdVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdVal.Merge(m, src)
}
func (m *IdVal) XXX_Size() int {
	return m.Size()
}
func (m *IdVal) XXX_DiscardUnknown() {
	xxx_messageInfo_IdVal.DiscardUnknown(m)
}

var xxx_messageInfo_IdVal proto.InternalMessageInfo

func (m *IdVal) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *IdVal) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *IdVal) GetId_INT64() int64 {
	if m != nil {
		return m.Id_INT64
	}
	return 0
}

func (m *IdVal) GetId_VECTORINT64() []int64 {
	if m != nil {
		return m.Id_VECTORINT64
	}
	return nil
}

type TLIdVal struct {
	Data2                *IdVal   `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLIdVal) Reset()         { *m = TLIdVal{} }
func (m *TLIdVal) String() string { return proto.CompactTextString(m) }
func (*TLIdVal) ProtoMessage()    {}
func (*TLIdVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{1}
}
func (m *TLIdVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdVal.Merge(m, src)
}
func (m *TLIdVal) XXX_Size() int {
	return m.Size()
}
func (m *TLIdVal) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdVal.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdVal proto.InternalMessageInfo

func (m *TLIdVal) GetData2() *IdVal {
	if m != nil {
		return m.Data2
	}
	return nil
}

type TLIdVals struct {
	Data2                *IdVal   `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLIdVals) Reset()         { *m = TLIdVals{} }
func (m *TLIdVals) String() string { return proto.CompactTextString(m) }
func (*TLIdVals) ProtoMessage()    {}
func (*TLIdVals) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{2}
}
func (m *TLIdVals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdVals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdVals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdVals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdVals.Merge(m, src)
}
func (m *TLIdVals) XXX_Size() int {
	return m.Size()
}
func (m *TLIdVals) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdVals.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdVals proto.InternalMessageInfo

func (m *TLIdVals) GetData2() *IdVal {
	if m != nil {
		return m.Data2
	}
	return nil
}

type TLSeqIdVal struct {
	Data2                *IdVal   `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSeqIdVal) Reset()         { *m = TLSeqIdVal{} }
func (m *TLSeqIdVal) String() string { return proto.CompactTextString(m) }
func (*TLSeqIdVal) ProtoMessage()    {}
func (*TLSeqIdVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{3}
}
func (m *TLSeqIdVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSeqIdVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSeqIdVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSeqIdVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSeqIdVal.Merge(m, src)
}
func (m *TLSeqIdVal) XXX_Size() int {
	return m.Size()
}
func (m *TLSeqIdVal) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSeqIdVal.DiscardUnknown(m)
}

var xxx_messageInfo_TLSeqIdVal proto.InternalMessageInfo

func (m *TLSeqIdVal) GetData2() *IdVal {
	if m != nil {
		return m.Data2
	}
	return nil
}

// InputId <--
//   - TL_inputId
//   - TL_inputIds
//   - TL_inputSeqId
//   - TL_inputNSeqId
type InputId struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Num                  int32         `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Key                  string        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	N                    int32         `protobuf:"varint,5,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InputId) Reset()         { *m = InputId{} }
func (m *InputId) String() string { return proto.CompactTextString(m) }
func (*InputId) ProtoMessage()    {}
func (*InputId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{4}
}
func (m *InputId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputId.Merge(m, src)
}
func (m *InputId) XXX_Size() int {
	return m.Size()
}
func (m *InputId) XXX_DiscardUnknown() {
	xxx_messageInfo_InputId.DiscardUnknown(m)
}

var xxx_messageInfo_InputId proto.InternalMessageInfo

func (m *InputId) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *InputId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *InputId) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *InputId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InputId) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type TLInputId struct {
	Data2                *InputId `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLInputId) Reset()         { *m = TLInputId{} }
func (m *TLInputId) String() string { return proto.CompactTextString(m) }
func (*TLInputId) ProtoMessage()    {}
func (*TLInputId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{5}
}
func (m *TLInputId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInputId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInputId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInputId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInputId.Merge(m, src)
}
func (m *TLInputId) XXX_Size() int {
	return m.Size()
}
func (m *TLInputId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInputId.DiscardUnknown(m)
}

var xxx_messageInfo_TLInputId proto.InternalMessageInfo

func (m *TLInputId) GetData2() *InputId {
	if m != nil {
		return m.Data2
	}
	return nil
}

type TLInputIds struct {
	Data2                *InputId `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLInputIds) Reset()         { *m = TLInputIds{} }
func (m *TLInputIds) String() string { return proto.CompactTextString(m) }
func (*TLInputIds) ProtoMessage()    {}
func (*TLInputIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{6}
}
func (m *TLInputIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInputIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInputIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInputIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInputIds.Merge(m, src)
}
func (m *TLInputIds) XXX_Size() int {
	return m.Size()
}
func (m *TLInputIds) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInputIds.DiscardUnknown(m)
}

var xxx_messageInfo_TLInputIds proto.InternalMessageInfo

func (m *TLInputIds) GetData2() *InputId {
	if m != nil {
		return m.Data2
	}
	return nil
}

type TLInputSeqId struct {
	Data2                *InputId `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLInputSeqId) Reset()         { *m = TLInputSeqId{} }
func (m *TLInputSeqId) String() string { return proto.CompactTextString(m) }
func (*TLInputSeqId) ProtoMessage()    {}
func (*TLInputSeqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{7}
}
func (m *TLInputSeqId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInputSeqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInputSeqId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInputSeqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInputSeqId.Merge(m, src)
}
func (m *TLInputSeqId) XXX_Size() int {
	return m.Size()
}
func (m *TLInputSeqId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInputSeqId.DiscardUnknown(m)
}

var xxx_messageInfo_TLInputSeqId proto.InternalMessageInfo

func (m *TLInputSeqId) GetData2() *InputId {
	if m != nil {
		return m.Data2
	}
	return nil
}

type TLInputNSeqId struct {
	Data2                *InputId `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLInputNSeqId) Reset()         { *m = TLInputNSeqId{} }
func (m *TLInputNSeqId) String() string { return proto.CompactTextString(m) }
func (*TLInputNSeqId) ProtoMessage()    {}
func (*TLInputNSeqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{8}
}
func (m *TLInputNSeqId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInputNSeqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInputNSeqId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInputNSeqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInputNSeqId.Merge(m, src)
}
func (m *TLInputNSeqId) XXX_Size() int {
	return m.Size()
}
func (m *TLInputNSeqId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInputNSeqId.DiscardUnknown(m)
}

var xxx_messageInfo_TLInputNSeqId proto.InternalMessageInfo

func (m *TLInputNSeqId) GetData2() *InputId {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLIdgenNextId struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenNextId) Reset()         { *m = TLIdgenNextId{} }
func (m *TLIdgenNextId) String() string { return proto.CompactTextString(m) }
func (*TLIdgenNextId) ProtoMessage()    {}
func (*TLIdgenNextId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{9}
}
func (m *TLIdgenNextId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenNextId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenNextId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenNextId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenNextId.Merge(m, src)
}
func (m *TLIdgenNextId) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenNextId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenNextId.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenNextId proto.InternalMessageInfo

func (m *TLIdgenNextId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

// --------------------------------------------------------------------------------------------
type TLIdgenNextIds struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Num                  int32         `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenNextIds) Reset()         { *m = TLIdgenNextIds{} }
func (m *TLIdgenNextIds) String() string { return proto.CompactTextString(m) }
func (*TLIdgenNextIds) ProtoMessage()    {}
func (*TLIdgenNextIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{10}
}
func (m *TLIdgenNextIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenNextIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenNextIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenNextIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenNextIds.Merge(m, src)
}
func (m *TLIdgenNextIds) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenNextIds) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenNextIds.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenNextIds proto.InternalMessageInfo

func (m *TLIdgenNextIds) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLIdgenNextIds) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLIdgenGetCurrentSeqId struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Key                  string        `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenGetCurrentSeqId) Reset()         { *m = TLIdgenGetCurrentSeqId{} }
func (m *TLIdgenGetCurrentSeqId) String() string { return proto.CompactTextString(m) }
func (*TLIdgenGetCurrentSeqId) ProtoMessage()    {}
func (*TLIdgenGetCurrentSeqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{11}
}
func (m *TLIdgenGetCurrentSeqId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenGetCurrentSeqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenGetCurrentSeqId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenGetCurrentSeqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenGetCurrentSeqId.Merge(m, src)
}
func (m *TLIdgenGetCurrentSeqId) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenGetCurrentSeqId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenGetCurrentSeqId.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenGetCurrentSeqId proto.InternalMessageInfo

func (m *TLIdgenGetCurrentSeqId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLIdgenGetCurrentSeqId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLIdgenSetCurrentSeqId struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Key                  string        `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Id                   int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenSetCurrentSeqId) Reset()         { *m = TLIdgenSetCurrentSeqId{} }
func (m *TLIdgenSetCurrentSeqId) String() string { return proto.CompactTextString(m) }
func (*TLIdgenSetCurrentSeqId) ProtoMessage()    {}
func (*TLIdgenSetCurrentSeqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{12}
}
func (m *TLIdgenSetCurrentSeqId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenSetCurrentSeqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenSetCurrentSeqId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenSetCurrentSeqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenSetCurrentSeqId.Merge(m, src)
}
func (m *TLIdgenSetCurrentSeqId) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenSetCurrentSeqId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenSetCurrentSeqId.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenSetCurrentSeqId proto.InternalMessageInfo

func (m *TLIdgenSetCurrentSeqId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLIdgenSetCurrentSeqId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TLIdgenSetCurrentSeqId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLIdgenGetNextSeqId struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Key                  string        `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenGetNextSeqId) Reset()         { *m = TLIdgenGetNextSeqId{} }
func (m *TLIdgenGetNextSeqId) String() string { return proto.CompactTextString(m) }
func (*TLIdgenGetNextSeqId) ProtoMessage()    {}
func (*TLIdgenGetNextSeqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{13}
}
func (m *TLIdgenGetNextSeqId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenGetNextSeqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenGetNextSeqId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenGetNextSeqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenGetNextSeqId.Merge(m, src)
}
func (m *TLIdgenGetNextSeqId) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenGetNextSeqId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenGetNextSeqId.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenGetNextSeqId proto.InternalMessageInfo

func (m *TLIdgenGetNextSeqId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLIdgenGetNextSeqId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLIdgenGetNextNSeqId struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Key                  string        `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	N                    int32         `protobuf:"varint,4,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenGetNextNSeqId) Reset()         { *m = TLIdgenGetNextNSeqId{} }
func (m *TLIdgenGetNextNSeqId) String() string { return proto.CompactTextString(m) }
func (*TLIdgenGetNextNSeqId) ProtoMessage()    {}
func (*TLIdgenGetNextNSeqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{14}
}
func (m *TLIdgenGetNextNSeqId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenGetNextNSeqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenGetNextNSeqId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenGetNextNSeqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenGetNextNSeqId.Merge(m, src)
}
func (m *TLIdgenGetNextNSeqId) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenGetNextNSeqId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenGetNextNSeqId.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenGetNextNSeqId proto.InternalMessageInfo

func (m *TLIdgenGetNextNSeqId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLIdgenGetNextNSeqId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TLIdgenGetNextNSeqId) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLIdgenGetNextIdValList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Id                   []*InputId    `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenGetNextIdValList) Reset()         { *m = TLIdgenGetNextIdValList{} }
func (m *TLIdgenGetNextIdValList) String() string { return proto.CompactTextString(m) }
func (*TLIdgenGetNextIdValList) ProtoMessage()    {}
func (*TLIdgenGetNextIdValList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{15}
}
func (m *TLIdgenGetNextIdValList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenGetNextIdValList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenGetNextIdValList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenGetNextIdValList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenGetNextIdValList.Merge(m, src)
}
func (m *TLIdgenGetNextIdValList) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenGetNextIdValList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenGetNextIdValList.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenGetNextIdValList proto.InternalMessageInfo

func (m *TLIdgenGetNextIdValList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLIdgenGetNextIdValList) GetId() []*InputId {
	if m != nil {
		return m.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLIdgenGetCurrentSeqIdList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=idgen.TLConstructor" json:"constructor,omitempty"`
	Id                   []*InputId    `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLIdgenGetCurrentSeqIdList) Reset()         { *m = TLIdgenGetCurrentSeqIdList{} }
func (m *TLIdgenGetCurrentSeqIdList) String() string { return proto.CompactTextString(m) }
func (*TLIdgenGetCurrentSeqIdList) ProtoMessage()    {}
func (*TLIdgenGetCurrentSeqIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{16}
}
func (m *TLIdgenGetCurrentSeqIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLIdgenGetCurrentSeqIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLIdgenGetCurrentSeqIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLIdgenGetCurrentSeqIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLIdgenGetCurrentSeqIdList.Merge(m, src)
}
func (m *TLIdgenGetCurrentSeqIdList) XXX_Size() int {
	return m.Size()
}
func (m *TLIdgenGetCurrentSeqIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLIdgenGetCurrentSeqIdList.DiscardUnknown(m)
}

var xxx_messageInfo_TLIdgenGetCurrentSeqIdList proto.InternalMessageInfo

func (m *TLIdgenGetCurrentSeqIdList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLIdgenGetCurrentSeqIdList) GetId() []*InputId {
	if m != nil {
		return m.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_Long struct {
	Datas                []int64  `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector_Long) Reset()         { *m = Vector_Long{} }
func (m *Vector_Long) String() string { return proto.CompactTextString(m) }
func (*Vector_Long) ProtoMessage()    {}
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{17}
}
func (m *Vector_Long) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_Long) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_Long.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_Long) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_Long.Merge(m, src)
}
func (m *Vector_Long) XXX_Size() int {
	return m.Size()
}
func (m *Vector_Long) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_Long.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_Long proto.InternalMessageInfo

func (m *Vector_Long) GetDatas() []int64 {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_IdVal struct {
	Datas                []*IdVal `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector_IdVal) Reset()         { *m = Vector_IdVal{} }
func (m *Vector_IdVal) String() string { return proto.CompactTextString(m) }
func (*Vector_IdVal) ProtoMessage()    {}
func (*Vector_IdVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875902fed70331d, []int{18}
}
func (m *Vector_IdVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_IdVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_IdVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_IdVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_IdVal.Merge(m, src)
}
func (m *Vector_IdVal) XXX_Size() int {
	return m.Size()
}
func (m *Vector_IdVal) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_IdVal.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_IdVal proto.InternalMessageInfo

func (m *Vector_IdVal) GetDatas() []*IdVal {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterEnum("idgen.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*IdVal)(nil), "idgen.IdVal")
	proto.RegisterType((*TLIdVal)(nil), "idgen.TL_idVal")
	proto.RegisterType((*TLIdVals)(nil), "idgen.TL_idVals")
	proto.RegisterType((*TLSeqIdVal)(nil), "idgen.TL_seqIdVal")
	proto.RegisterType((*InputId)(nil), "idgen.InputId")
	proto.RegisterType((*TLInputId)(nil), "idgen.TL_inputId")
	proto.RegisterType((*TLInputIds)(nil), "idgen.TL_inputIds")
	proto.RegisterType((*TLInputSeqId)(nil), "idgen.TL_inputSeqId")
	proto.RegisterType((*TLInputNSeqId)(nil), "idgen.TL_inputNSeqId")
	proto.RegisterType((*TLIdgenNextId)(nil), "idgen.TL_idgen_nextId")
	proto.RegisterType((*TLIdgenNextIds)(nil), "idgen.TL_idgen_nextIds")
	proto.RegisterType((*TLIdgenGetCurrentSeqId)(nil), "idgen.TL_idgen_getCurrentSeqId")
	proto.RegisterType((*TLIdgenSetCurrentSeqId)(nil), "idgen.TL_idgen_setCurrentSeqId")
	proto.RegisterType((*TLIdgenGetNextSeqId)(nil), "idgen.TL_idgen_getNextSeqId")
	proto.RegisterType((*TLIdgenGetNextNSeqId)(nil), "idgen.TL_idgen_getNextNSeqId")
	proto.RegisterType((*TLIdgenGetNextIdValList)(nil), "idgen.TL_idgen_getNextIdValList")
	proto.RegisterType((*TLIdgenGetCurrentSeqIdList)(nil), "idgen.TL_idgen_getCurrentSeqIdList")
	proto.RegisterType((*Vector_Long)(nil), "idgen.Vector_Long")
	proto.RegisterType((*Vector_IdVal)(nil), "idgen.Vector_IdVal")
}

func init() { proto.RegisterFile("idgen.tl.proto", fileDescriptor_6875902fed70331d) }

var fileDescriptor_6875902fed70331d = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x88, 0x1b, 0x55,
	0x18, 0xcf, 0x6c, 0x12, 0x77, 0xfb, 0xe5, 0x8f, 0xd3, 0xb7, 0xdb, 0x35, 0x99, 0x6e, 0xb3, 0x61,
	0x6a, 0x25, 0x8a, 0x4d, 0x30, 0x5b, 0x17, 0x41, 0xf0, 0xd0, 0xa8, 0x30, 0x1a, 0xa7, 0x3a, 0xc6,
	0x2d, 0x88, 0x30, 0xcc, 0x66, 0x9e, 0xd3, 0xc1, 0xcd, 0xcc, 0x38, 0x6f, 0x52, 0xbb, 0x37, 0xc5,
	0x4b, 0x3d, 0xf6, 0x20, 0x16, 0x4f, 0x15, 0x41, 0x3c, 0x89, 0xd4, 0x83, 0x17, 0xa9, 0x07, 0x2d,
	0x14, 0x45, 0x28, 0xda, 0xd2, 0x83, 0x82, 0xee, 0x1e, 0x44, 0x8b, 0x2e, 0x82, 0x07, 0x6d, 0x55,
	0x22, 0xf3, 0xe6, 0x4f, 0x26, 0xd3, 0x49, 0x1b, 0xeb, 0xee, 0x25, 0xbc, 0xf7, 0x7e, 0xbf, 0xef,
	0xdf, 0xef, 0xbd, 0xef, 0xcb, 0x40, 0x51, 0x57, 0x35, 0x6c, 0xd4, 0x9d, 0xb5, 0xba, 0x65, 0x9b,
	0x8e, 0x89, 0xb2, 0x74, 0xcf, 0x1d, 0xd4, 0x74, 0xe7, 0x58, 0x7f, 0xb5, 0xde, 0x35, 0x7b, 0x0d,
	0xcd, 0xd4, 0xcc, 0x06, 0x45, 0x57, 0xfb, 0x2f, 0xd2, 0x1d, 0xdd, 0xd0, 0x95, 0x67, 0xc5, 0x55,
	0x34, 0xd3, 0xd4, 0xd6, 0xf0, 0x90, 0xf5, 0x8a, 0xad, 0x58, 0x16, 0xb6, 0x89, 0x8f, 0x73, 0xa4,
	0x7b, 0x0c, 0xf7, 0x14, 0x37, 0x4c, 0xd7, 0xb4, 0xb1, 0xec, 0xac, 0x5b, 0x38, 0xc0, 0xca, 0x43,
	0xcc, 0xb1, 0x15, 0x83, 0x58, 0xa6, 0xed, 0xf8, 0xd0, 0xdc, 0x10, 0x22, 0xeb, 0x46, 0xd7, 0x3b,
	0xe5, 0xdf, 0x67, 0x20, 0x2b, 0xa8, 0x2b, 0xca, 0x1a, 0x3a, 0x00, 0x45, 0xcb, 0xc6, 0xaa, 0xde,
	0x55, 0x1c, 0x2c, 0x1b, 0x4a, 0x0f, 0x97, 0x98, 0x2a, 0x53, 0xdb, 0x25, 0x15, 0xc2, 0x53, 0x51,
	0xe9, 0x61, 0xb4, 0x0c, 0xb9, 0xae, 0x69, 0x10, 0xc7, 0xee, 0x77, 0x1d, 0xd3, 0x2e, 0x4d, 0x55,
	0x99, 0x5a, 0xb1, 0x39, 0x57, 0xf7, 0x2a, 0xef, 0xb4, 0x5b, 0x43, 0x4c, 0x8a, 0x12, 0x51, 0x19,
	0x66, 0x74, 0x55, 0x16, 0xc4, 0xce, 0xf2, 0xa1, 0x52, 0xba, 0xca, 0xd4, 0xd2, 0xd2, 0xb4, 0xae,
	0xd2, 0xad, 0x1b, 0x59, 0x57, 0xe5, 0x95, 0xc7, 0x5a, 0x9d, 0x23, 0x92, 0x47, 0xc8, 0x54, 0xd3,
	0xb5, 0xb4, 0x54, 0xd0, 0xd5, 0xc8, 0x21, 0x5f, 0x87, 0x99, 0x4e, 0x5b, 0xd6, 0x69, 0xb2, 0x3c,
	0x64, 0x55, 0xc5, 0x51, 0x9a, 0x34, 0xc7, 0x5c, 0x33, 0xef, 0xc7, 0xa7, 0x95, 0x48, 0x1e, 0xc4,
	0x37, 0x60, 0x57, 0xc0, 0x27, 0x13, 0x19, 0x3c, 0x00, 0xb9, 0x4e, 0x5b, 0x26, 0xf8, 0x65, 0x61,
	0xe2, 0x18, 0x6f, 0x33, 0x30, 0x2d, 0x18, 0x56, 0xdf, 0x11, 0xd4, 0x9d, 0x16, 0x90, 0x85, 0xb4,
	0xd1, 0xef, 0x51, 0xed, 0xb2, 0x92, 0xbb, 0x74, 0x4f, 0x5e, 0xc2, 0xeb, 0xa5, 0x0c, 0x8d, 0xe2,
	0x2e, 0x51, 0x1e, 0x18, 0xa3, 0x94, 0xa5, 0x0c, 0xc6, 0xe0, 0x9b, 0x00, 0xae, 0x00, 0x7e, 0x7a,
	0x77, 0x8f, 0x96, 0x53, 0x0c, 0xca, 0xf1, 0xe0, 0xa0, 0xa0, 0x25, 0xaa, 0x81, 0x6f, 0x43, 0x26,
	0x34, 0x7a, 0x10, 0x0a, 0x81, 0xd1, 0xb3, 0xae, 0x7a, 0x13, 0x9a, 0x2d, 0x43, 0x31, 0x30, 0x13,
	0xff, 0x8b, 0x9d, 0x00, 0x77, 0xd2, 0x8b, 0xd5, 0xb0, 0x21, 0x1b, 0xf8, 0x84, 0x5b, 0x5c, 0x4c,
	0x54, 0x66, 0x42, 0x51, 0xf9, 0x17, 0x80, 0x8d, 0xb9, 0x22, 0xb7, 0xeb, 0xeb, 0xc6, 0x0b, 0xe2,
	0x55, 0x28, 0x85, 0xde, 0x35, 0xec, 0xb4, 0xfa, 0xb6, 0x8d, 0x0d, 0x5f, 0xa2, 0xff, 0x11, 0xc5,
	0xbd, 0xf4, 0x74, 0x78, 0xe9, 0xbc, 0x13, 0x89, 0x42, 0x76, 0x2a, 0x0a, 0x2a, 0xc2, 0x94, 0xae,
	0xd2, 0xb7, 0x96, 0x96, 0xa6, 0x74, 0x95, 0x57, 0x60, 0x4f, 0xb4, 0x36, 0x11, 0x9f, 0xd8, 0xf6,
	0xc2, 0x2c, 0x98, 0x8f, 0x87, 0x10, 0xb7, 0xbb, 0x2c, 0xda, 0x31, 0x99, 0xa0, 0x63, 0x08, 0x94,
	0xe3, 0x11, 0x69, 0xbb, 0xb7, 0x75, 0xe2, 0xdc, 0x76, 0xd0, 0x0a, 0x55, 0x2e, 0x5d, 0x4d, 0x27,
	0xbc, 0x68, 0x57, 0xc9, 0xe3, 0xb0, 0x30, 0xee, 0x95, 0xec, 0x68, 0xdc, 0xfd, 0x90, 0x5b, 0xc1,
	0x2e, 0x53, 0x6e, 0x9b, 0x86, 0x86, 0xe6, 0xbc, 0xde, 0x23, 0x25, 0x86, 0x0e, 0x5f, 0x6f, 0xc3,
	0x37, 0x21, 0xef, 0x93, 0x46, 0x86, 0xa2, 0xc7, 0x4a, 0x1c, 0x8a, 0xe4, 0xbe, 0xd3, 0x19, 0x77,
	0x1e, 0x44, 0xf2, 0x42, 0xbb, 0xa1, 0xd0, 0x92, 0x5a, 0x4b, 0x4d, 0xf9, 0x39, 0xf1, 0x49, 0xf1,
	0xc8, 0x51, 0x91, 0x4d, 0x21, 0x2e, 0x38, 0xf2, 0x67, 0x0d, 0xfb, 0xcb, 0xd9, 0x0b, 0x57, 0xfe,
	0x1c, 0x0c, 0x06, 0x03, 0x06, 0xcd, 0x43, 0x71, 0x04, 0x23, 0xec, 0x27, 0x9f, 0xbe, 0x73, 0x6d,
	0x1a, 0xed, 0x03, 0x36, 0x72, 0x4e, 0x15, 0x62, 0xbf, 0xfa, 0xe3, 0x8b, 0xab, 0x7f, 0x7b, 0x66,
	0x65, 0xd8, 0x1d, 0x81, 0xbd, 0xa7, 0xc2, 0xbe, 0xf6, 0xed, 0xf9, 0xcb, 0xd3, 0xa8, 0x04, 0x39,
	0x1f, 0x72, 0x13, 0x65, 0xbf, 0x7c, 0x63, 0xe3, 0x75, 0xdf, 0x68, 0x0e, 0xf2, 0x11, 0x84, 0xb0,
	0x3f, 0x5e, 0xda, 0xda, 0x88, 0x64, 0x10, 0xfc, 0x1b, 0xb0, 0x27, 0xaf, 0x9f, 0xba, 0x38, 0x85,
	0x16, 0x01, 0x05, 0xec, 0xe1, 0xc8, 0x60, 0xcf, 0x9c, 0xf9, 0xfc, 0xf7, 0xbf, 0x3c, 0x77, 0x7b,
	0x61, 0xf6, 0x46, 0x02, 0x61, 0x3f, 0xf8, 0xfe, 0xcd, 0x73, 0x19, 0x54, 0x83, 0xbd, 0x51, 0x30,
	0x76, 0xd9, 0xec, 0xab, 0x57, 0xb6, 0xae, 0x5e, 0xf3, 0xdc, 0xc4, 0x98, 0xb1, 0xb6, 0x66, 0x7f,
	0x3d, 0xfb, 0xe1, 0xcf, 0x7e, 0xfe, 0x07, 0xa0, 0x14, 0xf3, 0x19, 0xb6, 0x22, 0xfb, 0xd3, 0xd7,
	0xe7, 0x3f, 0x1a, 0x78, 0xb4, 0x7b, 0xa0, 0x9c, 0x40, 0xf3, 0x35, 0xda, 0x3a, 0xfd, 0xcd, 0xb9,
	0xeb, 0x1e, 0xef, 0x5e, 0x58, 0x48, 0xe0, 0x85, 0x4d, 0xc0, 0x7e, 0xbc, 0xf9, 0xd6, 0x25, 0x9f,
	0x7a, 0x3f, 0x2c, 0xde, 0xa4, 0x1a, 0xca, 0xfe, 0xec, 0xbb, 0xf7, 0x4e, 0xfd, 0x43, 0xd9, 0x5c,
	0xe6, 0xe4, 0xbb, 0x95, 0x54, 0xf3, 0x72, 0x06, 0x66, 0xa4, 0xa7, 0x5b, 0x82, 0x6b, 0x81, 0x1e,
	0x82, 0xfc, 0xc8, 0x10, 0x9f, 0x0f, 0xdf, 0xf4, 0x88, 0x7a, 0x5c, 0xb1, 0xde, 0x73, 0xe8, 0xd7,
	0x4a, 0x5d, 0x30, 0x9c, 0xe5, 0x43, 0x7c, 0x0a, 0x3d, 0x02, 0x85, 0xd1, 0x99, 0x7d, 0x57, 0xb2,
	0x29, 0xe1, 0x90, 0x0f, 0x44, 0x5e, 0x3a, 0x9f, 0x42, 0x4f, 0xc0, 0x9e, 0xe4, 0xa9, 0xbc, 0x18,
	0xf7, 0x13, 0x23, 0x24, 0xe4, 0x22, 0x04, 0xbe, 0xc8, 0xad, 0x7c, 0xc5, 0x08, 0x5c, 0x21, 0xf4,
	0x75, 0xd8, 0x34, 0xd7, 0xf8, 0x14, 0x7a, 0x14, 0x50, 0xc2, 0x40, 0x5d, 0x48, 0xc8, 0x29, 0x44,
	0x13, 0x12, 0x7a, 0x1c, 0x66, 0x93, 0x66, 0xe6, 0xbe, 0x31, 0x6e, 0xc4, 0x71, 0x7e, 0x9e, 0x81,
	0xf9, 0x31, 0x93, 0xb0, 0x3a, 0xc6, 0x55, 0xc8, 0xe0, 0x66, 0x47, 0x65, 0xa7, 0x00, 0x9f, 0x42,
	0x47, 0xa1, 0x3c, 0x7e, 0xce, 0xed, 0xbf, 0x85, 0xf6, 0x37, 0x71, 0x7c, 0xf8, 0xa9, 0xdf, 0x36,
	0x2a, 0xcc, 0x85, 0xcd, 0x0a, 0x73, 0x71, 0xb3, 0xc2, 0xfc, 0xb0, 0x59, 0x61, 0x9e, 0x7f, 0x38,
	0xf2, 0xd1, 0xed, 0x60, 0xa5, 0xa7, 0xd9, 0xca, 0x70, 0x71, 0x90, 0x60, 0xfb, 0x38, 0xb6, 0x1b,
	0x8a, 0x65, 0x35, 0xdc, 0xa5, 0xde, 0xc5, 0x0d, 0xea, 0xd7, 0xfb, 0x5d, 0xbd, 0x83, 0x2a, 0xb1,
	0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x65, 0xe9, 0x75, 0xd1, 0x0b, 0x00, 0x00,
}

func (this *IdVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&idgen.IdVal{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id_INT64: "+fmt.Sprintf("%#v", this.Id_INT64)+",\n")
	s = append(s, "Id_VECTORINT64: "+fmt.Sprintf("%#v", this.Id_VECTORINT64)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLIdVal{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdVals) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLIdVals{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSeqIdVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLSeqIdVal{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InputId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&idgen.InputId{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "N: "+fmt.Sprintf("%#v", this.N)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInputId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLInputId{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInputIds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLInputIds{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInputSeqId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLInputSeqId{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInputNSeqId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLInputNSeqId{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenNextId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.TLIdgenNextId{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenNextIds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&idgen.TLIdgenNextIds{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenGetCurrentSeqId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&idgen.TLIdgenGetCurrentSeqId{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenSetCurrentSeqId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&idgen.TLIdgenSetCurrentSeqId{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenGetNextSeqId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&idgen.TLIdgenGetNextSeqId{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenGetNextNSeqId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&idgen.TLIdgenGetNextNSeqId{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "N: "+fmt.Sprintf("%#v", this.N)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenGetNextIdValList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&idgen.TLIdgenGetNextIdValList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLIdgenGetCurrentSeqIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&idgen.TLIdgenGetCurrentSeqIdList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_Long) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.Vector_Long{")
	s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_IdVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&idgen.Vector_IdVal{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIdgenTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCIdgenClient is the client API for RPCIdgen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCIdgenClient interface {
	IdgenNextId(ctx context.Context, in *TLIdgenNextId, opts ...grpc.CallOption) (*mtproto.Int64, error)
	IdgenNextIds(ctx context.Context, in *TLIdgenNextIds, opts ...grpc.CallOption) (*Vector_Long, error)
	IdgenGetCurrentSeqId(ctx context.Context, in *TLIdgenGetCurrentSeqId, opts ...grpc.CallOption) (*mtproto.Int64, error)
	IdgenSetCurrentSeqId(ctx context.Context, in *TLIdgenSetCurrentSeqId, opts ...grpc.CallOption) (*mtproto.Bool, error)
	IdgenGetNextSeqId(ctx context.Context, in *TLIdgenGetNextSeqId, opts ...grpc.CallOption) (*mtproto.Int64, error)
	IdgenGetNextNSeqId(ctx context.Context, in *TLIdgenGetNextNSeqId, opts ...grpc.CallOption) (*mtproto.Int64, error)
	IdgenGetNextIdValList(ctx context.Context, in *TLIdgenGetNextIdValList, opts ...grpc.CallOption) (*Vector_IdVal, error)
	IdgenGetCurrentSeqIdList(ctx context.Context, in *TLIdgenGetCurrentSeqIdList, opts ...grpc.CallOption) (*Vector_IdVal, error)
}

type rPCIdgenClient struct {
	cc *grpc.ClientConn
}

func NewRPCIdgenClient(cc *grpc.ClientConn) RPCIdgenClient {
	return &rPCIdgenClient{cc}
}

func (c *rPCIdgenClient) IdgenNextId(ctx context.Context, in *TLIdgenNextId, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_nextId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIdgenClient) IdgenNextIds(ctx context.Context, in *TLIdgenNextIds, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_nextIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIdgenClient) IdgenGetCurrentSeqId(ctx context.Context, in *TLIdgenGetCurrentSeqId, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_getCurrentSeqId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIdgenClient) IdgenSetCurrentSeqId(ctx context.Context, in *TLIdgenSetCurrentSeqId, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_setCurrentSeqId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIdgenClient) IdgenGetNextSeqId(ctx context.Context, in *TLIdgenGetNextSeqId, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_getNextSeqId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIdgenClient) IdgenGetNextNSeqId(ctx context.Context, in *TLIdgenGetNextNSeqId, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_getNextNSeqId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIdgenClient) IdgenGetNextIdValList(ctx context.Context, in *TLIdgenGetNextIdValList, opts ...grpc.CallOption) (*Vector_IdVal, error) {
	out := new(Vector_IdVal)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_getNextIdValList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIdgenClient) IdgenGetCurrentSeqIdList(ctx context.Context, in *TLIdgenGetCurrentSeqIdList, opts ...grpc.CallOption) (*Vector_IdVal, error) {
	out := new(Vector_IdVal)
	err := c.cc.Invoke(ctx, "/idgen.RPCIdgen/idgen_getCurrentSeqIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCIdgenServer is the server API for RPCIdgen service.
type RPCIdgenServer interface {
	IdgenNextId(context.Context, *TLIdgenNextId) (*mtproto.Int64, error)
	IdgenNextIds(context.Context, *TLIdgenNextIds) (*Vector_Long, error)
	IdgenGetCurrentSeqId(context.Context, *TLIdgenGetCurrentSeqId) (*mtproto.Int64, error)
	IdgenSetCurrentSeqId(context.Context, *TLIdgenSetCurrentSeqId) (*mtproto.Bool, error)
	IdgenGetNextSeqId(context.Context, *TLIdgenGetNextSeqId) (*mtproto.Int64, error)
	IdgenGetNextNSeqId(context.Context, *TLIdgenGetNextNSeqId) (*mtproto.Int64, error)
	IdgenGetNextIdValList(context.Context, *TLIdgenGetNextIdValList) (*Vector_IdVal, error)
	IdgenGetCurrentSeqIdList(context.Context, *TLIdgenGetCurrentSeqIdList) (*Vector_IdVal, error)
}

// UnimplementedRPCIdgenServer can be embedded to have forward compatible implementations.
type UnimplementedRPCIdgenServer struct {
}

func (*UnimplementedRPCIdgenServer) IdgenNextId(ctx context.Context, req *TLIdgenNextId) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenNextId not implemented")
}
func (*UnimplementedRPCIdgenServer) IdgenNextIds(ctx context.Context, req *TLIdgenNextIds) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenNextIds not implemented")
}
func (*UnimplementedRPCIdgenServer) IdgenGetCurrentSeqId(ctx context.Context, req *TLIdgenGetCurrentSeqId) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenGetCurrentSeqId not implemented")
}
func (*UnimplementedRPCIdgenServer) IdgenSetCurrentSeqId(ctx context.Context, req *TLIdgenSetCurrentSeqId) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenSetCurrentSeqId not implemented")
}
func (*UnimplementedRPCIdgenServer) IdgenGetNextSeqId(ctx context.Context, req *TLIdgenGetNextSeqId) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenGetNextSeqId not implemented")
}
func (*UnimplementedRPCIdgenServer) IdgenGetNextNSeqId(ctx context.Context, req *TLIdgenGetNextNSeqId) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenGetNextNSeqId not implemented")
}
func (*UnimplementedRPCIdgenServer) IdgenGetNextIdValList(ctx context.Context, req *TLIdgenGetNextIdValList) (*Vector_IdVal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenGetNextIdValList not implemented")
}
func (*UnimplementedRPCIdgenServer) IdgenGetCurrentSeqIdList(ctx context.Context, req *TLIdgenGetCurrentSeqIdList) (*Vector_IdVal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdgenGetCurrentSeqIdList not implemented")
}

func RegisterRPCIdgenServer(s *grpc.Server, srv RPCIdgenServer) {
	s.RegisterService(&_RPCIdgen_serviceDesc, srv)
}

func _RPCIdgen_IdgenNextId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenNextId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenNextId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenNextId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenNextId(ctx, req.(*TLIdgenNextId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIdgen_IdgenNextIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenNextIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenNextIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenNextIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenNextIds(ctx, req.(*TLIdgenNextIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIdgen_IdgenGetCurrentSeqId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenGetCurrentSeqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenGetCurrentSeqId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenGetCurrentSeqId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenGetCurrentSeqId(ctx, req.(*TLIdgenGetCurrentSeqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIdgen_IdgenSetCurrentSeqId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenSetCurrentSeqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenSetCurrentSeqId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenSetCurrentSeqId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenSetCurrentSeqId(ctx, req.(*TLIdgenSetCurrentSeqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIdgen_IdgenGetNextSeqId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenGetNextSeqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenGetNextSeqId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenGetNextSeqId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenGetNextSeqId(ctx, req.(*TLIdgenGetNextSeqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIdgen_IdgenGetNextNSeqId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenGetNextNSeqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenGetNextNSeqId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenGetNextNSeqId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenGetNextNSeqId(ctx, req.(*TLIdgenGetNextNSeqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIdgen_IdgenGetNextIdValList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenGetNextIdValList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenGetNextIdValList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenGetNextIdValList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenGetNextIdValList(ctx, req.(*TLIdgenGetNextIdValList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIdgen_IdgenGetCurrentSeqIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLIdgenGetCurrentSeqIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIdgenServer).IdgenGetCurrentSeqIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idgen.RPCIdgen/IdgenGetCurrentSeqIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIdgenServer).IdgenGetCurrentSeqIdList(ctx, req.(*TLIdgenGetCurrentSeqIdList))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCIdgen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idgen.RPCIdgen",
	HandlerType: (*RPCIdgenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "idgen_nextId",
			Handler:    _RPCIdgen_IdgenNextId_Handler,
		},
		{
			MethodName: "idgen_nextIds",
			Handler:    _RPCIdgen_IdgenNextIds_Handler,
		},
		{
			MethodName: "idgen_getCurrentSeqId",
			Handler:    _RPCIdgen_IdgenGetCurrentSeqId_Handler,
		},
		{
			MethodName: "idgen_setCurrentSeqId",
			Handler:    _RPCIdgen_IdgenSetCurrentSeqId_Handler,
		},
		{
			MethodName: "idgen_getNextSeqId",
			Handler:    _RPCIdgen_IdgenGetNextSeqId_Handler,
		},
		{
			MethodName: "idgen_getNextNSeqId",
			Handler:    _RPCIdgen_IdgenGetNextNSeqId_Handler,
		},
		{
			MethodName: "idgen_getNextIdValList",
			Handler:    _RPCIdgen_IdgenGetNextIdValList_Handler,
		},
		{
			MethodName: "idgen_getCurrentSeqIdList",
			Handler:    _RPCIdgen_IdgenGetCurrentSeqIdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idgen.tl.proto",
}

func (m *IdVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id_VECTORINT64) > 0 {
		dAtA2 := make([]byte, len(m.Id_VECTORINT64)*10)
		var j1 int
		for _, num1 := range m.Id_VECTORINT64 {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintIdgenTl(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.Id_INT64 != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Id_INT64))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintIdgenTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLIdVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdgenTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLIdVals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdVals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdVals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdgenTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSeqIdVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSeqIdVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSeqIdVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdgenTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InputId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.N != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.N))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintIdgenTl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if m.Num != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintIdgenTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInputId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInputId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInputId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdgenTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInputIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInputIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInputIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdgenTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInputSeqId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInputSeqId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInputSeqId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdgenTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInputNSeqId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInputNSeqId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInputNSeqId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdgenTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenNextId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenNextId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenNextId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenNextIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenNextIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenNextIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Num != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenGetCurrentSeqId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenGetCurrentSeqId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenGetCurrentSeqId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintIdgenTl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenSetCurrentSeqId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenSetCurrentSeqId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenSetCurrentSeqId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintIdgenTl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenGetNextSeqId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenGetNextSeqId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenGetNextSeqId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintIdgenTl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenGetNextNSeqId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenGetNextNSeqId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenGetNextNSeqId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.N != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.N))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintIdgenTl(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenGetNextIdValList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenGetNextIdValList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenGetNextIdValList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdgenTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLIdgenGetCurrentSeqIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLIdgenGetCurrentSeqIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLIdgenGetCurrentSeqIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdgenTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Constructor != 0 {
		i = encodeVarintIdgenTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vector_Long) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_Long) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_Long) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		dAtA11 := make([]byte, len(m.Datas)*10)
		var j10 int
		for _, num1 := range m.Datas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintIdgenTl(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vector_IdVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_IdVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_IdVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdgenTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdgenTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdgenTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	if m.Id_INT64 != 0 {
		n += 1 + sovIdgenTl(uint64(m.Id_INT64))
	}
	if len(m.Id_VECTORINT64) > 0 {
		l = 0
		for _, e := range m.Id_VECTORINT64 {
			l += sovIdgenTl(uint64(e))
		}
		n += 1 + sovIdgenTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdVals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSeqIdVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InputId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	if m.Num != 0 {
		n += 1 + sovIdgenTl(uint64(m.Num))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.N != 0 {
		n += 1 + sovIdgenTl(uint64(m.N))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInputId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInputIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInputSeqId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInputNSeqId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenNextId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenNextIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	if m.Num != 0 {
		n += 1 + sovIdgenTl(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenGetCurrentSeqId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenSetCurrentSeqId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovIdgenTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenGetNextSeqId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenGetNextNSeqId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovIdgenTl(uint64(l))
	}
	if m.N != 0 {
		n += 1 + sovIdgenTl(uint64(m.N))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenGetNextIdValList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovIdgenTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLIdgenGetCurrentSeqIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovIdgenTl(uint64(m.Constructor))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovIdgenTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_Long) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		l = 0
		for _, e := range m.Datas {
			l += sovIdgenTl(uint64(e))
		}
		n += 1 + sovIdgenTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_IdVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovIdgenTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIdgenTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdgenTl(x uint64) (n int) {
	return sovIdgenTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id_INT64", wireType)
			}
			m.Id_INT64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id_INT64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdgenTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id_VECTORINT64 = append(m.Id_VECTORINT64, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdgenTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdgenTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthIdgenTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id_VECTORINT64) == 0 {
					m.Id_VECTORINT64 = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdgenTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id_VECTORINT64 = append(m.Id_VECTORINT64, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id_VECTORINT64", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &IdVal{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdVals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idVals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idVals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &IdVal{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSeqIdVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_seqIdVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_seqIdVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &IdVal{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInputId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inputId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inputId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &InputId{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInputIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inputIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inputIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &InputId{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInputSeqId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inputSeqId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inputSeqId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &InputId{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInputNSeqId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inputNSeqId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inputNSeqId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &InputId{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenNextId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_nextId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_nextId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenNextIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_nextIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_nextIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenGetCurrentSeqId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_getCurrentSeqId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_getCurrentSeqId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenSetCurrentSeqId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_setCurrentSeqId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_setCurrentSeqId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenGetNextSeqId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_getNextSeqId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_getNextSeqId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenGetNextNSeqId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_getNextNSeqId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_getNextNSeqId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenGetNextIdValList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_getNextIdValList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_getNextIdValList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputId{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLIdgenGetCurrentSeqIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_idgen_getCurrentSeqIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_idgen_getCurrentSeqIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputId{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_Long) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_Long: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_Long: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdgenTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Datas = append(m.Datas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdgenTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdgenTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthIdgenTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Datas) == 0 {
					m.Datas = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdgenTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Datas = append(m.Datas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_IdVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_IdVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_IdVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdgenTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &IdVal{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdgenTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdgenTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdgenTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdgenTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdgenTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdgenTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdgenTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdgenTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdgenTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdgenTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdgenTl = fmt.Errorf("proto: unexpected end of group")
)
