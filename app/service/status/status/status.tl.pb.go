// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: status.tl.proto

package status

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                           TLConstructor = 0
	CRC32_sessionEntry                      TLConstructor = 392473649
	CRC32_userSessionEntryList              TLConstructor = -269700200
	CRC32_status_setSessionOnline           TLConstructor = 1381075919
	CRC32_status_setSessionOffline          TLConstructor = 631663196
	CRC32_status_getUserOnlineSessions      TLConstructor = -406788659
	CRC32_status_getUsersOnlineSessionsList TLConstructor = -2009385532
	CRC32_status_getChannelOnlineUsers      TLConstructor = 1166257237
	CRC32_status_setUserChannelsOnline      TLConstructor = -851901363
	CRC32_status_setUserChannelsOffline     TLConstructor = 1822646698
	CRC32_status_setChannelUserOffline      TLConstructor = -997471364
	CRC32_status_setChannelUsersOnline      TLConstructor = -1499734793
	CRC32_status_setChannelOffline          TLConstructor = 1266112245
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	392473649:   "CRC32_sessionEntry",
	-269700200:  "CRC32_userSessionEntryList",
	1381075919:  "CRC32_status_setSessionOnline",
	631663196:   "CRC32_status_setSessionOffline",
	-406788659:  "CRC32_status_getUserOnlineSessions",
	-2009385532: "CRC32_status_getUsersOnlineSessionsList",
	1166257237:  "CRC32_status_getChannelOnlineUsers",
	-851901363:  "CRC32_status_setUserChannelsOnline",
	1822646698:  "CRC32_status_setUserChannelsOffline",
	-997471364:  "CRC32_status_setChannelUserOffline",
	-1499734793: "CRC32_status_setChannelUsersOnline",
	1266112245:  "CRC32_status_setChannelOffline",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                           0,
	"CRC32_sessionEntry":                      392473649,
	"CRC32_userSessionEntryList":              -269700200,
	"CRC32_status_setSessionOnline":           1381075919,
	"CRC32_status_setSessionOffline":          631663196,
	"CRC32_status_getUserOnlineSessions":      -406788659,
	"CRC32_status_getUsersOnlineSessionsList": -2009385532,
	"CRC32_status_getChannelOnlineUsers":      1166257237,
	"CRC32_status_setUserChannelsOnline":      -851901363,
	"CRC32_status_setUserChannelsOffline":     1822646698,
	"CRC32_status_setChannelUserOffline":      -997471364,
	"CRC32_status_setChannelUsersOnline":      -1499734793,
	"CRC32_status_setChannelOffline":          1266112245,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{0}
}

// SessionEntry <--
//   - TL_sessionEntry
type SessionEntry struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Gateway              string        `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Expired              int64         `protobuf:"varint,6,opt,name=expired,proto3" json:"expired,omitempty"`
	Layer                int32         `protobuf:"varint,7,opt,name=layer,proto3" json:"layer,omitempty"`
	PermAuthKeyId        int64         `protobuf:"varint,8,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	Client               string        `protobuf:"bytes,9,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SessionEntry) Reset()         { *m = SessionEntry{} }
func (m *SessionEntry) String() string { return proto.CompactTextString(m) }
func (*SessionEntry) ProtoMessage()    {}
func (*SessionEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{0}
}
func (m *SessionEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionEntry.Merge(m, src)
}
func (m *SessionEntry) XXX_Size() int {
	return m.Size()
}
func (m *SessionEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SessionEntry proto.InternalMessageInfo

func (m *SessionEntry) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *SessionEntry) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *SessionEntry) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SessionEntry) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *SessionEntry) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *SessionEntry) GetExpired() int64 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *SessionEntry) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *SessionEntry) GetPermAuthKeyId() int64 {
	if m != nil {
		return m.PermAuthKeyId
	}
	return 0
}

func (m *SessionEntry) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type TLSessionEntry struct {
	Data2                *SessionEntry `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLSessionEntry) Reset()         { *m = TLSessionEntry{} }
func (m *TLSessionEntry) String() string { return proto.CompactTextString(m) }
func (*TLSessionEntry) ProtoMessage()    {}
func (*TLSessionEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{1}
}
func (m *TLSessionEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionEntry.Merge(m, src)
}
func (m *TLSessionEntry) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionEntry.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionEntry proto.InternalMessageInfo

func (m *TLSessionEntry) GetData2() *SessionEntry {
	if m != nil {
		return m.Data2
	}
	return nil
}

// UserSessionEntryList <--
//   - TL_userSessionEntryList
type UserSessionEntryList struct {
	PredicateName        string          `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor   `protobuf:"varint,2,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId               int64           `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserSessions         []*SessionEntry `protobuf:"bytes,4,rep,name=user_sessions,json=userSessions,proto3" json:"user_sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserSessionEntryList) Reset()         { *m = UserSessionEntryList{} }
func (m *UserSessionEntryList) String() string { return proto.CompactTextString(m) }
func (*UserSessionEntryList) ProtoMessage()    {}
func (*UserSessionEntryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{2}
}
func (m *UserSessionEntryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSessionEntryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSessionEntryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSessionEntryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSessionEntryList.Merge(m, src)
}
func (m *UserSessionEntryList) XXX_Size() int {
	return m.Size()
}
func (m *UserSessionEntryList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSessionEntryList.DiscardUnknown(m)
}

var xxx_messageInfo_UserSessionEntryList proto.InternalMessageInfo

func (m *UserSessionEntryList) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *UserSessionEntryList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *UserSessionEntryList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserSessionEntryList) GetUserSessions() []*SessionEntry {
	if m != nil {
		return m.UserSessions
	}
	return nil
}

type TLUserSessionEntryList struct {
	Data2                *UserSessionEntryList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLUserSessionEntryList) Reset()         { *m = TLUserSessionEntryList{} }
func (m *TLUserSessionEntryList) String() string { return proto.CompactTextString(m) }
func (*TLUserSessionEntryList) ProtoMessage()    {}
func (*TLUserSessionEntryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{3}
}
func (m *TLUserSessionEntryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSessionEntryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSessionEntryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSessionEntryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSessionEntryList.Merge(m, src)
}
func (m *TLUserSessionEntryList) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSessionEntryList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSessionEntryList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSessionEntryList proto.InternalMessageInfo

func (m *TLUserSessionEntryList) GetData2() *UserSessionEntryList {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetSessionOnline struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Session              *SessionEntry `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusSetSessionOnline) Reset()         { *m = TLStatusSetSessionOnline{} }
func (m *TLStatusSetSessionOnline) String() string { return proto.CompactTextString(m) }
func (*TLStatusSetSessionOnline) ProtoMessage()    {}
func (*TLStatusSetSessionOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{4}
}
func (m *TLStatusSetSessionOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusSetSessionOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusSetSessionOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusSetSessionOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusSetSessionOnline.Merge(m, src)
}
func (m *TLStatusSetSessionOnline) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusSetSessionOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusSetSessionOnline.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusSetSessionOnline proto.InternalMessageInfo

func (m *TLStatusSetSessionOnline) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusSetSessionOnline) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLStatusSetSessionOnline) GetSession() *SessionEntry {
	if m != nil {
		return m.Session
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetSessionOffline struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusSetSessionOffline) Reset()         { *m = TLStatusSetSessionOffline{} }
func (m *TLStatusSetSessionOffline) String() string { return proto.CompactTextString(m) }
func (*TLStatusSetSessionOffline) ProtoMessage()    {}
func (*TLStatusSetSessionOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{5}
}
func (m *TLStatusSetSessionOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusSetSessionOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusSetSessionOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusSetSessionOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusSetSessionOffline.Merge(m, src)
}
func (m *TLStatusSetSessionOffline) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusSetSessionOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusSetSessionOffline.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusSetSessionOffline proto.InternalMessageInfo

func (m *TLStatusSetSessionOffline) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusSetSessionOffline) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLStatusSetSessionOffline) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusGetUserOnlineSessions struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusGetUserOnlineSessions) Reset()         { *m = TLStatusGetUserOnlineSessions{} }
func (m *TLStatusGetUserOnlineSessions) String() string { return proto.CompactTextString(m) }
func (*TLStatusGetUserOnlineSessions) ProtoMessage()    {}
func (*TLStatusGetUserOnlineSessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{6}
}
func (m *TLStatusGetUserOnlineSessions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusGetUserOnlineSessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusGetUserOnlineSessions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusGetUserOnlineSessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusGetUserOnlineSessions.Merge(m, src)
}
func (m *TLStatusGetUserOnlineSessions) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusGetUserOnlineSessions) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusGetUserOnlineSessions.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusGetUserOnlineSessions proto.InternalMessageInfo

func (m *TLStatusGetUserOnlineSessions) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusGetUserOnlineSessions) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusGetUsersOnlineSessionsList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	Users                []int64       `protobuf:"varint,3,rep,packed,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusGetUsersOnlineSessionsList) Reset()         { *m = TLStatusGetUsersOnlineSessionsList{} }
func (m *TLStatusGetUsersOnlineSessionsList) String() string { return proto.CompactTextString(m) }
func (*TLStatusGetUsersOnlineSessionsList) ProtoMessage()    {}
func (*TLStatusGetUsersOnlineSessionsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{7}
}
func (m *TLStatusGetUsersOnlineSessionsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusGetUsersOnlineSessionsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusGetUsersOnlineSessionsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusGetUsersOnlineSessionsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusGetUsersOnlineSessionsList.Merge(m, src)
}
func (m *TLStatusGetUsersOnlineSessionsList) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusGetUsersOnlineSessionsList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusGetUsersOnlineSessionsList.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusGetUsersOnlineSessionsList proto.InternalMessageInfo

func (m *TLStatusGetUsersOnlineSessionsList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusGetUsersOnlineSessionsList) GetUsers() []int64 {
	if m != nil {
		return m.Users
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusGetChannelOnlineUsers struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId            int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusGetChannelOnlineUsers) Reset()         { *m = TLStatusGetChannelOnlineUsers{} }
func (m *TLStatusGetChannelOnlineUsers) String() string { return proto.CompactTextString(m) }
func (*TLStatusGetChannelOnlineUsers) ProtoMessage()    {}
func (*TLStatusGetChannelOnlineUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{8}
}
func (m *TLStatusGetChannelOnlineUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusGetChannelOnlineUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusGetChannelOnlineUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusGetChannelOnlineUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusGetChannelOnlineUsers.Merge(m, src)
}
func (m *TLStatusGetChannelOnlineUsers) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusGetChannelOnlineUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusGetChannelOnlineUsers.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusGetChannelOnlineUsers proto.InternalMessageInfo

func (m *TLStatusGetChannelOnlineUsers) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusGetChannelOnlineUsers) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusSetUserChannelsOnline struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channels             []int64       `protobuf:"varint,4,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusSetUserChannelsOnline) Reset()         { *m = TLStatusSetUserChannelsOnline{} }
func (m *TLStatusSetUserChannelsOnline) String() string { return proto.CompactTextString(m) }
func (*TLStatusSetUserChannelsOnline) ProtoMessage()    {}
func (*TLStatusSetUserChannelsOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{9}
}
func (m *TLStatusSetUserChannelsOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusSetUserChannelsOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusSetUserChannelsOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusSetUserChannelsOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusSetUserChannelsOnline.Merge(m, src)
}
func (m *TLStatusSetUserChannelsOnline) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusSetUserChannelsOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusSetUserChannelsOnline.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusSetUserChannelsOnline proto.InternalMessageInfo

func (m *TLStatusSetUserChannelsOnline) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusSetUserChannelsOnline) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLStatusSetUserChannelsOnline) GetChannels() []int64 {
	if m != nil {
		return m.Channels
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetUserChannelsOffline struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channels             []int64       `protobuf:"varint,4,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusSetUserChannelsOffline) Reset()         { *m = TLStatusSetUserChannelsOffline{} }
func (m *TLStatusSetUserChannelsOffline) String() string { return proto.CompactTextString(m) }
func (*TLStatusSetUserChannelsOffline) ProtoMessage()    {}
func (*TLStatusSetUserChannelsOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{10}
}
func (m *TLStatusSetUserChannelsOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusSetUserChannelsOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusSetUserChannelsOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusSetUserChannelsOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusSetUserChannelsOffline.Merge(m, src)
}
func (m *TLStatusSetUserChannelsOffline) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusSetUserChannelsOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusSetUserChannelsOffline.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusSetUserChannelsOffline proto.InternalMessageInfo

func (m *TLStatusSetUserChannelsOffline) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusSetUserChannelsOffline) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLStatusSetUserChannelsOffline) GetChannels() []int64 {
	if m != nil {
		return m.Channels
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetChannelUserOffline struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId            int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId               int64         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusSetChannelUserOffline) Reset()         { *m = TLStatusSetChannelUserOffline{} }
func (m *TLStatusSetChannelUserOffline) String() string { return proto.CompactTextString(m) }
func (*TLStatusSetChannelUserOffline) ProtoMessage()    {}
func (*TLStatusSetChannelUserOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{11}
}
func (m *TLStatusSetChannelUserOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusSetChannelUserOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusSetChannelUserOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusSetChannelUserOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusSetChannelUserOffline.Merge(m, src)
}
func (m *TLStatusSetChannelUserOffline) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusSetChannelUserOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusSetChannelUserOffline.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusSetChannelUserOffline proto.InternalMessageInfo

func (m *TLStatusSetChannelUserOffline) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusSetChannelUserOffline) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TLStatusSetChannelUserOffline) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusSetChannelUsersOnline struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId            int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Id                   []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusSetChannelUsersOnline) Reset()         { *m = TLStatusSetChannelUsersOnline{} }
func (m *TLStatusSetChannelUsersOnline) String() string { return proto.CompactTextString(m) }
func (*TLStatusSetChannelUsersOnline) ProtoMessage()    {}
func (*TLStatusSetChannelUsersOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{12}
}
func (m *TLStatusSetChannelUsersOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusSetChannelUsersOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusSetChannelUsersOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusSetChannelUsersOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusSetChannelUsersOnline.Merge(m, src)
}
func (m *TLStatusSetChannelUsersOnline) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusSetChannelUsersOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusSetChannelUsersOnline.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusSetChannelUsersOnline proto.InternalMessageInfo

func (m *TLStatusSetChannelUsersOnline) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusSetChannelUsersOnline) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TLStatusSetChannelUsersOnline) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetChannelOffline struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId            int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLStatusSetChannelOffline) Reset()         { *m = TLStatusSetChannelOffline{} }
func (m *TLStatusSetChannelOffline) String() string { return proto.CompactTextString(m) }
func (*TLStatusSetChannelOffline) ProtoMessage()    {}
func (*TLStatusSetChannelOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{13}
}
func (m *TLStatusSetChannelOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatusSetChannelOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatusSetChannelOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatusSetChannelOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatusSetChannelOffline.Merge(m, src)
}
func (m *TLStatusSetChannelOffline) XXX_Size() int {
	return m.Size()
}
func (m *TLStatusSetChannelOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatusSetChannelOffline.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatusSetChannelOffline proto.InternalMessageInfo

func (m *TLStatusSetChannelOffline) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLStatusSetChannelOffline) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_UserSessionEntryList struct {
	Datas                []*UserSessionEntryList `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Vector_UserSessionEntryList) Reset()         { *m = Vector_UserSessionEntryList{} }
func (m *Vector_UserSessionEntryList) String() string { return proto.CompactTextString(m) }
func (*Vector_UserSessionEntryList) ProtoMessage()    {}
func (*Vector_UserSessionEntryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{14}
}
func (m *Vector_UserSessionEntryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_UserSessionEntryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_UserSessionEntryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_UserSessionEntryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_UserSessionEntryList.Merge(m, src)
}
func (m *Vector_UserSessionEntryList) XXX_Size() int {
	return m.Size()
}
func (m *Vector_UserSessionEntryList) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_UserSessionEntryList.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_UserSessionEntryList proto.InternalMessageInfo

func (m *Vector_UserSessionEntryList) GetDatas() []*UserSessionEntryList {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_Long struct {
	Datas                []int64  `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector_Long) Reset()         { *m = Vector_Long{} }
func (m *Vector_Long) String() string { return proto.CompactTextString(m) }
func (*Vector_Long) ProtoMessage()    {}
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2279bebff9f187, []int{15}
}
func (m *Vector_Long) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_Long) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_Long.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_Long) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_Long.Merge(m, src)
}
func (m *Vector_Long) XXX_Size() int {
	return m.Size()
}
func (m *Vector_Long) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_Long.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_Long proto.InternalMessageInfo

func (m *Vector_Long) GetDatas() []int64 {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterEnum("status.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*SessionEntry)(nil), "status.SessionEntry")
	proto.RegisterType((*TLSessionEntry)(nil), "status.TL_sessionEntry")
	proto.RegisterType((*UserSessionEntryList)(nil), "status.UserSessionEntryList")
	proto.RegisterType((*TLUserSessionEntryList)(nil), "status.TL_userSessionEntryList")
	proto.RegisterType((*TLStatusSetSessionOnline)(nil), "status.TL_status_setSessionOnline")
	proto.RegisterType((*TLStatusSetSessionOffline)(nil), "status.TL_status_setSessionOffline")
	proto.RegisterType((*TLStatusGetUserOnlineSessions)(nil), "status.TL_status_getUserOnlineSessions")
	proto.RegisterType((*TLStatusGetUsersOnlineSessionsList)(nil), "status.TL_status_getUsersOnlineSessionsList")
	proto.RegisterType((*TLStatusGetChannelOnlineUsers)(nil), "status.TL_status_getChannelOnlineUsers")
	proto.RegisterType((*TLStatusSetUserChannelsOnline)(nil), "status.TL_status_setUserChannelsOnline")
	proto.RegisterType((*TLStatusSetUserChannelsOffline)(nil), "status.TL_status_setUserChannelsOffline")
	proto.RegisterType((*TLStatusSetChannelUserOffline)(nil), "status.TL_status_setChannelUserOffline")
	proto.RegisterType((*TLStatusSetChannelUsersOnline)(nil), "status.TL_status_setChannelUsersOnline")
	proto.RegisterType((*TLStatusSetChannelOffline)(nil), "status.TL_status_setChannelOffline")
	proto.RegisterType((*Vector_UserSessionEntryList)(nil), "status.Vector_UserSessionEntryList")
	proto.RegisterType((*Vector_Long)(nil), "status.Vector_Long")
}

func init() { proto.RegisterFile("status.tl.proto", fileDescriptor_ac2279bebff9f187) }

var fileDescriptor_ac2279bebff9f187 = []byte{
	// 1102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x68, 0x1c, 0x55,
	0x18, 0xdf, 0xc9, 0xfe, 0x49, 0xf3, 0xa5, 0xdb, 0x8e, 0xcf, 0x68, 0xc6, 0x49, 0xb3, 0x5d, 0x27,
	0xd6, 0x2c, 0xd1, 0xee, 0xc2, 0x56, 0x10, 0x0f, 0x3d, 0xd8, 0xe0, 0x21, 0x74, 0xdd, 0xd4, 0x6d,
	0xa2, 0xd2, 0x83, 0xc3, 0x64, 0xf6, 0x65, 0x32, 0xb8, 0x3b, 0x33, 0xcc, 0x7b, 0x6b, 0xbb, 0x67,
	0x2f, 0xf5, 0xe0, 0x1f, 0x72, 0xf0, 0xcf, 0xc5, 0x8b, 0x9e, 0xa4, 0x45, 0x2c, 0x82, 0x88, 0x20,
	0x88, 0x22, 0xa2, 0x14, 0x3d, 0x28, 0x14, 0x54, 0xd0, 0xa0, 0x88, 0x28, 0xe8, 0x45, 0x14, 0x29,
	0xae, 0xcc, 0x9b, 0xd9, 0x9d, 0xdd, 0xcc, 0x9b, 0xd9, 0xd2, 0x18, 0x3c, 0x65, 0xde, 0xfb, 0x7e,
	0xef, 0xfb, 0xfd, 0xbe, 0xef, 0x7b, 0xef, 0xfb, 0x36, 0x70, 0x98, 0x50, 0x8d, 0x76, 0x48, 0x99,
	0xb6, 0xca, 0x8e, 0x6b, 0x53, 0x1b, 0xe5, 0xfc, 0x0d, 0xf9, 0xb8, 0x61, 0xd2, 0xad, 0xce, 0x46,
	0x59, 0xb7, 0xdb, 0x15, 0xc3, 0x36, 0xec, 0x0a, 0x33, 0x6f, 0x74, 0x36, 0xd9, 0x8a, 0x2d, 0xd8,
	0x97, 0x7f, 0x4c, 0x2e, 0x18, 0xb6, 0x6d, 0xb4, 0x70, 0x88, 0x3a, 0xef, 0x6a, 0x8e, 0x83, 0x5d,
	0x12, 0xd8, 0x65, 0xa2, 0x6f, 0xe1, 0xb6, 0xe6, 0xf1, 0xe8, 0xb6, 0x8b, 0x55, 0xda, 0x75, 0x70,
	0xdf, 0x76, 0x47, 0x68, 0xa3, 0xae, 0x66, 0x11, 0xc7, 0x76, 0x69, 0x60, 0x9a, 0x09, 0x4d, 0xa4,
	0x6b, 0xe9, 0xfe, 0xae, 0x72, 0x65, 0x02, 0x0e, 0x9e, 0xc5, 0x84, 0x98, 0xb6, 0xf5, 0x90, 0x45,
	0xdd, 0x2e, 0x3a, 0x06, 0x87, 0x1c, 0x17, 0x37, 0x4d, 0x5d, 0xa3, 0x58, 0xb5, 0xb4, 0x36, 0x96,
	0x84, 0xa2, 0x50, 0x9a, 0x6a, 0xe4, 0x07, 0xbb, 0x75, 0xad, 0x8d, 0xd1, 0xfd, 0x30, 0xad, 0xdb,
	0x16, 0xa1, 0x6e, 0x47, 0xa7, 0xb6, 0x2b, 0x4d, 0x14, 0x85, 0xd2, 0xa1, 0xea, 0x6d, 0xe5, 0x20,
	0x05, 0x6b, 0xb5, 0xe5, 0xd0, 0xd8, 0x18, 0x46, 0xa2, 0x59, 0x98, 0xec, 0x10, 0xec, 0xaa, 0x66,
	0x53, 0x4a, 0x17, 0x85, 0x52, 0xba, 0x91, 0xf3, 0x96, 0x2b, 0x4d, 0x54, 0x80, 0x69, 0xad, 0x43,
	0xb7, 0xd4, 0x27, 0x71, 0xd7, 0x33, 0x66, 0x98, 0x71, 0xca, 0xdb, 0x3a, 0x8d, 0xbb, 0x2b, 0x4d,
	0x24, 0xc1, 0xa4, 0xa1, 0x51, 0x7c, 0x5e, 0xeb, 0x4a, 0x59, 0xa6, 0xa8, 0xbf, 0xf4, 0x2c, 0xf8,
	0x82, 0x63, 0xba, 0xb8, 0x29, 0xe5, 0xd8, 0xa9, 0xfe, 0x12, 0xcd, 0x40, 0xb6, 0xa5, 0x75, 0xb1,
	0x2b, 0x4d, 0x16, 0x85, 0x52, 0xb6, 0xe1, 0x2f, 0xd0, 0x22, 0x88, 0x0e, 0x76, 0xdb, 0xea, 0x30,
	0xdd, 0x01, 0x76, 0x30, 0xef, 0xed, 0x3f, 0x38, 0xa0, 0xbc, 0x1d, 0x72, 0x7a, 0xcb, 0xc4, 0x16,
	0x95, 0xa6, 0x18, 0x63, 0xb0, 0x52, 0x4e, 0xc2, 0xe1, 0xb5, 0x9a, 0x4a, 0x86, 0xd3, 0xb6, 0x04,
	0xd9, 0xa6, 0x46, 0xb5, 0x2a, 0xcb, 0xd6, 0x74, 0x75, 0xa6, 0x9f, 0x89, 0xe1, 0xdc, 0x36, 0x7c,
	0x88, 0xf2, 0xa9, 0x00, 0x33, 0xeb, 0x04, 0xbb, 0xc3, 0xb6, 0x9a, 0x49, 0xe8, 0xff, 0x97, 0xfb,
	0x07, 0x20, 0xcf, 0x0c, 0x41, 0x48, 0x44, 0xca, 0x14, 0xd3, 0xb1, 0x51, 0x1c, 0xec, 0x84, 0xda,
	0x89, 0xf2, 0x30, 0xcc, 0xae, 0xd5, 0xd4, 0x0e, 0x2f, 0x9c, 0xea, 0x68, 0x4e, 0x8e, 0xf4, 0xbd,
	0xf1, 0x62, 0xef, 0xe7, 0xe6, 0x55, 0x01, 0x64, 0x2f, 0xb7, 0x0c, 0xa9, 0x12, 0x4c, 0x03, 0xe0,
	0xaa, 0xd5, 0x32, 0xad, 0x48, 0xe8, 0xc2, 0xde, 0x43, 0x2f, 0xc3, 0x64, 0x10, 0x35, 0xbb, 0x72,
	0x71, 0x41, 0xf7, 0x41, 0xca, 0xf3, 0x02, 0xcc, 0x71, 0x05, 0x6e, 0x6e, 0xee, 0x93, 0xc2, 0x31,
	0x0f, 0x43, 0x21, 0x70, 0x34, 0x14, 0x64, 0x60, 0xea, 0xa5, 0xd7, 0x4f, 0x57, 0xbf, 0x48, 0xff,
	0xbd, 0x28, 0xa5, 0x03, 0x77, 0x45, 0x48, 0xc9, 0x28, 0x2b, 0xbb, 0x03, 0x37, 0xcd, 0x3c, 0x03,
	0x59, 0x8f, 0x8a, 0x48, 0xe9, 0x62, 0xba, 0x94, 0x6e, 0xf8, 0x0b, 0xa5, 0xbb, 0x2b, 0xd6, 0xe5,
	0x2d, 0xcd, 0xb2, 0x70, 0xcb, 0x27, 0x66, 0x1a, 0x6e, 0x9e, 0x71, 0x1e, 0x40, 0xf7, 0xdd, 0x85,
	0xe1, 0x4e, 0x05, 0x3b, 0x2b, 0x4d, 0xaf, 0xf0, 0x47, 0x47, 0x0a, 0xef, 0xd1, 0x05, 0xfc, 0x64,
	0xdf, 0xae, 0xa7, 0x0c, 0x07, 0x02, 0x09, 0xfe, 0xa3, 0x4c, 0x37, 0x06, 0x6b, 0xe5, 0x05, 0x01,
	0x8a, 0xf1, 0x8a, 0xf6, 0xed, 0x3e, 0x26, 0x49, 0xda, 0xde, 0x9d, 0xa4, 0x40, 0x0e, 0xbb, 0x93,
	0x7b, 0x55, 0x94, 0x5c, 0xa0, 0x61, 0xc1, 0x99, 0x91, 0xbb, 0xfa, 0x4c, 0x82, 0xa8, 0x3d, 0x57,
	0x6e, 0x8c, 0xa8, 0x43, 0x30, 0xc1, 0xf4, 0x78, 0x69, 0x9a, 0x30, 0xbd, 0x77, 0x33, 0xc7, 0x93,
	0xb2, 0xcf, 0xb9, 0x51, 0x1e, 0x81, 0xb9, 0x47, 0xb1, 0x07, 0x54, 0xd7, 0x13, 0x3a, 0x35, 0x91,
	0x04, 0xd6, 0xf7, 0x6f, 0xa0, 0x53, 0x13, 0x65, 0x01, 0xa6, 0x03, 0x97, 0x35, 0xdb, 0x32, 0xbc,
	0xf7, 0x1a, 0xba, 0x48, 0x07, 0xa0, 0xa5, 0x77, 0x32, 0x90, 0x1f, 0x51, 0x8d, 0x6e, 0x81, 0xfc,
	0x72, 0x63, 0xf9, 0x44, 0x55, 0x5d, 0xaf, 0x9f, 0xae, 0xaf, 0x3e, 0x56, 0x17, 0x53, 0x48, 0x06,
	0xe4, 0x6f, 0x0d, 0x4f, 0x54, 0xf1, 0xad, 0x6b, 0xdb, 0xef, 0x09, 0x68, 0x11, 0x64, 0xdf, 0xc6,
	0x9b, 0x30, 0xe2, 0xcb, 0x3f, 0x5d, 0xe9, 0xfd, 0xd3, 0xeb, 0xf5, 0x7a, 0x02, 0x3a, 0x06, 0xf3,
	0x81, 0x13, 0xfe, 0xe8, 0x10, 0x3f, 0x7f, 0xe9, 0xe3, 0xed, 0x2c, 0xba, 0x1b, 0x0a, 0x71, 0x30,
	0xbf, 0x04, 0xe2, 0x37, 0x5f, 0xbe, 0x72, 0x79, 0x02, 0x55, 0x40, 0x19, 0xc1, 0x71, 0xfb, 0xaa,
	0x78, 0xf5, 0xb3, 0xa7, 0xdf, 0x0f, 0xf8, 0xef, 0x83, 0x45, 0xde, 0x01, 0x4e, 0x4f, 0x14, 0x3f,
	0xfa, 0xe5, 0xd7, 0x0f, 0xfe, 0xf2, 0x4f, 0x2d, 0x45, 0x69, 0xa2, 0x2d, 0x4d, 0xfc, 0xea, 0xda,
	0x73, 0x97, 0x32, 0x11, 0x49, 0xdc, 0x16, 0x24, 0x5e, 0xbd, 0xf8, 0xc3, 0xcf, 0xd7, 0x7d, 0xe7,
	0xf7, 0xc0, 0x42, 0xe2, 0x81, 0x20, 0xe0, 0x37, 0x3e, 0x7c, 0xf6, 0xc7, 0x1c, 0xcf, 0x7b, 0xf4,
	0xed, 0x8a, 0xd7, 0x5f, 0x7c, 0xf3, 0xf5, 0xc0, 0x7b, 0xf2, 0x81, 0xbe, 0x9c, 0x3f, 0xdf, 0xfd,
	0xed, 0xed, 0xbf, 0xfd, 0x03, 0x9c, 0xd4, 0x8f, 0xde, 0x7e, 0xf1, 0x8f, 0xcb, 0xdf, 0x7e, 0x9d,
	0x91, 0x33, 0x17, 0x5f, 0x2b, 0xa4, 0xaa, 0x97, 0x26, 0x61, 0xaa, 0x71, 0x66, 0xf9, 0x2c, 0xc3,
	0xa2, 0x3a, 0xcc, 0xc6, 0xfd, 0x24, 0x50, 0xc2, 0xd7, 0x11, 0x57, 0x7b, 0x39, 0x5f, 0x6e, 0x53,
	0xf6, 0x7b, 0xb7, 0x7c, 0xca, 0xb6, 0x5b, 0x4a, 0x0a, 0x9d, 0x01, 0x29, 0x76, 0x82, 0x2f, 0x24,
	0x3a, 0xf4, 0x41, 0x51, 0x8f, 0x06, 0x1c, 0x49, 0x1c, 0xc1, 0x8b, 0x51, 0xaf, 0x5c, 0xa0, 0x9c,
	0xf8, 0xf8, 0x94, 0x14, 0xba, 0x00, 0x77, 0x8e, 0x1f, 0xbb, 0xf7, 0xc6, 0xb2, 0x71, 0xd0, 0xf2,
	0x20, 0xe2, 0x84, 0x1e, 0xa1, 0xa4, 0xd0, 0x13, 0xc3, 0x21, 0x72, 0x26, 0x2f, 0x3f, 0xc4, 0x28,
	0x50, 0xbe, 0x75, 0x17, 0x9f, 0xd7, 0x40, 0x94, 0x14, 0x7a, 0x7c, 0xe0, 0x9f, 0x3f, 0x5d, 0x17,
	0xb9, 0x85, 0x89, 0x02, 0xa3, 0xc5, 0x39, 0x07, 0xf3, 0xc9, 0x53, 0xb2, 0x34, 0xde, 0x75, 0x5c,
	0xe1, 0x47, 0x54, 0x73, 0xc6, 0x1d, 0x5f, 0x75, 0x14, 0x78, 0xe3, 0x9e, 0x93, 0xf3, 0x11, 0x05,
	0x8e, 0xb9, 0xfe, 0xbb, 0x46, 0xd0, 0x42, 0x92, 0xd7, 0x38, 0xad, 0xa7, 0x56, 0x7f, 0xff, 0xbe,
	0x20, 0x7c, 0xb2, 0x53, 0x10, 0xbe, 0xd8, 0x29, 0x08, 0xdf, 0xed, 0x14, 0x84, 0x73, 0x27, 0x87,
	0xfe, 0xeb, 0xa5, 0x58, 0x6b, 0x1b, 0xae, 0x16, 0x7e, 0x1c, 0x27, 0xd8, 0x7d, 0x0a, 0xbb, 0x15,
	0xcd, 0x71, 0x2a, 0xde, 0xa7, 0xa9, 0xe3, 0x8a, 0x4f, 0x16, 0xfc, 0xd9, 0xc8, 0x31, 0xf7, 0x27,
	0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xac, 0xaf, 0x57, 0x56, 0x56, 0x0f, 0x00, 0x00,
}

func (this *SessionEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&status.SessionEntry{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "Gateway: "+fmt.Sprintf("%#v", this.Gateway)+",\n")
	s = append(s, "Expired: "+fmt.Sprintf("%#v", this.Expired)+",\n")
	s = append(s, "Layer: "+fmt.Sprintf("%#v", this.Layer)+",\n")
	s = append(s, "PermAuthKeyId: "+fmt.Sprintf("%#v", this.PermAuthKeyId)+",\n")
	s = append(s, "Client: "+fmt.Sprintf("%#v", this.Client)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&status.TLSessionEntry{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserSessionEntryList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&status.UserSessionEntryList{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.UserSessions != nil {
		s = append(s, "UserSessions: "+fmt.Sprintf("%#v", this.UserSessions)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSessionEntryList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&status.TLUserSessionEntryList{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusSetSessionOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&status.TLStatusSetSessionOnline{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Session != nil {
		s = append(s, "Session: "+fmt.Sprintf("%#v", this.Session)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusSetSessionOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&status.TLStatusSetSessionOffline{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusGetUserOnlineSessions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&status.TLStatusGetUserOnlineSessions{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusGetUsersOnlineSessionsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&status.TLStatusGetUsersOnlineSessionsList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusGetChannelOnlineUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&status.TLStatusGetChannelOnlineUsers{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusSetUserChannelsOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&status.TLStatusSetUserChannelsOnline{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Channels: "+fmt.Sprintf("%#v", this.Channels)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusSetUserChannelsOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&status.TLStatusSetUserChannelsOffline{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Channels: "+fmt.Sprintf("%#v", this.Channels)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusSetChannelUserOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&status.TLStatusSetChannelUserOffline{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusSetChannelUsersOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&status.TLStatusSetChannelUsersOnline{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLStatusSetChannelOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&status.TLStatusSetChannelOffline{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_UserSessionEntryList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&status.Vector_UserSessionEntryList{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_Long) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&status.Vector_Long{")
	s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStatusTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCStatusClient is the client API for RPCStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCStatusClient interface {
	StatusSetSessionOnline(ctx context.Context, in *TLStatusSetSessionOnline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetSessionOffline(ctx context.Context, in *TLStatusSetSessionOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusGetUserOnlineSessions(ctx context.Context, in *TLStatusGetUserOnlineSessions, opts ...grpc.CallOption) (*UserSessionEntryList, error)
	StatusGetUsersOnlineSessionsList(ctx context.Context, in *TLStatusGetUsersOnlineSessionsList, opts ...grpc.CallOption) (*Vector_UserSessionEntryList, error)
	StatusGetChannelOnlineUsers(ctx context.Context, in *TLStatusGetChannelOnlineUsers, opts ...grpc.CallOption) (*Vector_Long, error)
	StatusSetUserChannelsOnline(ctx context.Context, in *TLStatusSetUserChannelsOnline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetUserChannelsOffline(ctx context.Context, in *TLStatusSetUserChannelsOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetChannelUserOffline(ctx context.Context, in *TLStatusSetChannelUserOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetChannelUsersOnline(ctx context.Context, in *TLStatusSetChannelUsersOnline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetChannelOffline(ctx context.Context, in *TLStatusSetChannelOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type rPCStatusClient struct {
	cc *grpc.ClientConn
}

func NewRPCStatusClient(cc *grpc.ClientConn) RPCStatusClient {
	return &rPCStatusClient{cc}
}

func (c *rPCStatusClient) StatusSetSessionOnline(ctx context.Context, in *TLStatusSetSessionOnline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_setSessionOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetSessionOffline(ctx context.Context, in *TLStatusSetSessionOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_setSessionOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusGetUserOnlineSessions(ctx context.Context, in *TLStatusGetUserOnlineSessions, opts ...grpc.CallOption) (*UserSessionEntryList, error) {
	out := new(UserSessionEntryList)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_getUserOnlineSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusGetUsersOnlineSessionsList(ctx context.Context, in *TLStatusGetUsersOnlineSessionsList, opts ...grpc.CallOption) (*Vector_UserSessionEntryList, error) {
	out := new(Vector_UserSessionEntryList)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_getUsersOnlineSessionsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusGetChannelOnlineUsers(ctx context.Context, in *TLStatusGetChannelOnlineUsers, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_getChannelOnlineUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetUserChannelsOnline(ctx context.Context, in *TLStatusSetUserChannelsOnline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_setUserChannelsOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetUserChannelsOffline(ctx context.Context, in *TLStatusSetUserChannelsOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_setUserChannelsOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetChannelUserOffline(ctx context.Context, in *TLStatusSetChannelUserOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_setChannelUserOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetChannelUsersOnline(ctx context.Context, in *TLStatusSetChannelUsersOnline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_setChannelUsersOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetChannelOffline(ctx context.Context, in *TLStatusSetChannelOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/status.RPCStatus/status_setChannelOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStatusServer is the server API for RPCStatus service.
type RPCStatusServer interface {
	StatusSetSessionOnline(context.Context, *TLStatusSetSessionOnline) (*mtproto.Bool, error)
	StatusSetSessionOffline(context.Context, *TLStatusSetSessionOffline) (*mtproto.Bool, error)
	StatusGetUserOnlineSessions(context.Context, *TLStatusGetUserOnlineSessions) (*UserSessionEntryList, error)
	StatusGetUsersOnlineSessionsList(context.Context, *TLStatusGetUsersOnlineSessionsList) (*Vector_UserSessionEntryList, error)
	StatusGetChannelOnlineUsers(context.Context, *TLStatusGetChannelOnlineUsers) (*Vector_Long, error)
	StatusSetUserChannelsOnline(context.Context, *TLStatusSetUserChannelsOnline) (*mtproto.Bool, error)
	StatusSetUserChannelsOffline(context.Context, *TLStatusSetUserChannelsOffline) (*mtproto.Bool, error)
	StatusSetChannelUserOffline(context.Context, *TLStatusSetChannelUserOffline) (*mtproto.Bool, error)
	StatusSetChannelUsersOnline(context.Context, *TLStatusSetChannelUsersOnline) (*mtproto.Bool, error)
	StatusSetChannelOffline(context.Context, *TLStatusSetChannelOffline) (*mtproto.Bool, error)
}

// UnimplementedRPCStatusServer can be embedded to have forward compatible implementations.
type UnimplementedRPCStatusServer struct {
}

func (*UnimplementedRPCStatusServer) StatusSetSessionOnline(ctx context.Context, req *TLStatusSetSessionOnline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetSessionOnline not implemented")
}
func (*UnimplementedRPCStatusServer) StatusSetSessionOffline(ctx context.Context, req *TLStatusSetSessionOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetSessionOffline not implemented")
}
func (*UnimplementedRPCStatusServer) StatusGetUserOnlineSessions(ctx context.Context, req *TLStatusGetUserOnlineSessions) (*UserSessionEntryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusGetUserOnlineSessions not implemented")
}
func (*UnimplementedRPCStatusServer) StatusGetUsersOnlineSessionsList(ctx context.Context, req *TLStatusGetUsersOnlineSessionsList) (*Vector_UserSessionEntryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusGetUsersOnlineSessionsList not implemented")
}
func (*UnimplementedRPCStatusServer) StatusGetChannelOnlineUsers(ctx context.Context, req *TLStatusGetChannelOnlineUsers) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusGetChannelOnlineUsers not implemented")
}
func (*UnimplementedRPCStatusServer) StatusSetUserChannelsOnline(ctx context.Context, req *TLStatusSetUserChannelsOnline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetUserChannelsOnline not implemented")
}
func (*UnimplementedRPCStatusServer) StatusSetUserChannelsOffline(ctx context.Context, req *TLStatusSetUserChannelsOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetUserChannelsOffline not implemented")
}
func (*UnimplementedRPCStatusServer) StatusSetChannelUserOffline(ctx context.Context, req *TLStatusSetChannelUserOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetChannelUserOffline not implemented")
}
func (*UnimplementedRPCStatusServer) StatusSetChannelUsersOnline(ctx context.Context, req *TLStatusSetChannelUsersOnline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetChannelUsersOnline not implemented")
}
func (*UnimplementedRPCStatusServer) StatusSetChannelOffline(ctx context.Context, req *TLStatusSetChannelOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetChannelOffline not implemented")
}

func RegisterRPCStatusServer(s *grpc.Server, srv RPCStatusServer) {
	s.RegisterService(&_RPCStatus_serviceDesc, srv)
}

func _RPCStatus_StatusSetSessionOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetSessionOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetSessionOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusSetSessionOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetSessionOnline(ctx, req.(*TLStatusSetSessionOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetSessionOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetSessionOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetSessionOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusSetSessionOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetSessionOffline(ctx, req.(*TLStatusSetSessionOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusGetUserOnlineSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusGetUserOnlineSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusGetUserOnlineSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusGetUserOnlineSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusGetUserOnlineSessions(ctx, req.(*TLStatusGetUserOnlineSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusGetUsersOnlineSessionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusGetUsersOnlineSessionsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusGetUsersOnlineSessionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusGetUsersOnlineSessionsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusGetUsersOnlineSessionsList(ctx, req.(*TLStatusGetUsersOnlineSessionsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusGetChannelOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusGetChannelOnlineUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusGetChannelOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusGetChannelOnlineUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusGetChannelOnlineUsers(ctx, req.(*TLStatusGetChannelOnlineUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetUserChannelsOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetUserChannelsOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetUserChannelsOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusSetUserChannelsOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetUserChannelsOnline(ctx, req.(*TLStatusSetUserChannelsOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetUserChannelsOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetUserChannelsOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetUserChannelsOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusSetUserChannelsOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetUserChannelsOffline(ctx, req.(*TLStatusSetUserChannelsOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetChannelUserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetChannelUserOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetChannelUserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusSetChannelUserOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetChannelUserOffline(ctx, req.(*TLStatusSetChannelUserOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetChannelUsersOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetChannelUsersOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetChannelUsersOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusSetChannelUsersOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetChannelUsersOnline(ctx, req.(*TLStatusSetChannelUsersOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetChannelOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetChannelOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetChannelOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.RPCStatus/StatusSetChannelOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetChannelOffline(ctx, req.(*TLStatusSetChannelOffline))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "status.RPCStatus",
	HandlerType: (*RPCStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "status_setSessionOnline",
			Handler:    _RPCStatus_StatusSetSessionOnline_Handler,
		},
		{
			MethodName: "status_setSessionOffline",
			Handler:    _RPCStatus_StatusSetSessionOffline_Handler,
		},
		{
			MethodName: "status_getUserOnlineSessions",
			Handler:    _RPCStatus_StatusGetUserOnlineSessions_Handler,
		},
		{
			MethodName: "status_getUsersOnlineSessionsList",
			Handler:    _RPCStatus_StatusGetUsersOnlineSessionsList_Handler,
		},
		{
			MethodName: "status_getChannelOnlineUsers",
			Handler:    _RPCStatus_StatusGetChannelOnlineUsers_Handler,
		},
		{
			MethodName: "status_setUserChannelsOnline",
			Handler:    _RPCStatus_StatusSetUserChannelsOnline_Handler,
		},
		{
			MethodName: "status_setUserChannelsOffline",
			Handler:    _RPCStatus_StatusSetUserChannelsOffline_Handler,
		},
		{
			MethodName: "status_setChannelUserOffline",
			Handler:    _RPCStatus_StatusSetChannelUserOffline_Handler,
		},
		{
			MethodName: "status_setChannelUsersOnline",
			Handler:    _RPCStatus_StatusSetChannelUsersOnline_Handler,
		},
		{
			MethodName: "status_setChannelOffline",
			Handler:    _RPCStatus_StatusSetChannelOffline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status.tl.proto",
}

func (m *SessionEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintStatusTl(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PermAuthKeyId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.PermAuthKeyId))
		i--
		dAtA[i] = 0x40
	}
	if m.Layer != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x38
	}
	if m.Expired != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Expired))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintStatusTl(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintStatusTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatusTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSessionEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSessionEntryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSessionEntryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserSessions) > 0 {
		for iNdEx := len(m.UserSessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserSessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatusTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintStatusTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSessionEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSessionEntryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSessionEntryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatusTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusSetSessionOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusSetSessionOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusSetSessionOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatusTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusSetSessionOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusSetSessionOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusSetSessionOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusGetUserOnlineSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusGetUserOnlineSessions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusGetUserOnlineSessions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusGetUsersOnlineSessionsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusGetUsersOnlineSessionsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusGetUsersOnlineSessionsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Users) > 0 {
		dAtA5 := make([]byte, len(m.Users)*10)
		var j4 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintStatusTl(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusGetChannelOnlineUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusGetChannelOnlineUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusGetChannelOnlineUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChannelId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusSetUserChannelsOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusSetUserChannelsOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusSetUserChannelsOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channels) > 0 {
		dAtA7 := make([]byte, len(m.Channels)*10)
		var j6 int
		for _, num1 := range m.Channels {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintStatusTl(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusSetUserChannelsOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusSetUserChannelsOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusSetUserChannelsOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channels) > 0 {
		dAtA9 := make([]byte, len(m.Channels)*10)
		var j8 int
		for _, num1 := range m.Channels {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintStatusTl(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusSetChannelUserOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusSetChannelUserOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusSetChannelUserOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChannelId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusSetChannelUsersOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusSetChannelUsersOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusSetChannelUsersOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA11 := make([]byte, len(m.Id)*10)
		var j10 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintStatusTl(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x22
	}
	if m.ChannelId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatusSetChannelOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatusSetChannelOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatusSetChannelOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChannelId != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintStatusTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vector_UserSessionEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_UserSessionEntryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_UserSessionEntryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatusTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_Long) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_Long) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_Long) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		dAtA13 := make([]byte, len(m.Datas)*10)
		var j12 int
		for _, num1 := range m.Datas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintStatusTl(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatusTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatusTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovStatusTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovStatusTl(uint64(m.AuthKeyId))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovStatusTl(uint64(l))
	}
	if m.Expired != 0 {
		n += 1 + sovStatusTl(uint64(m.Expired))
	}
	if m.Layer != 0 {
		n += 1 + sovStatusTl(uint64(m.Layer))
	}
	if m.PermAuthKeyId != 0 {
		n += 1 + sovStatusTl(uint64(m.PermAuthKeyId))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovStatusTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovStatusTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserSessionEntryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovStatusTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if len(m.UserSessions) > 0 {
		for _, e := range m.UserSessions {
			l = e.Size()
			n += 1 + l + sovStatusTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSessionEntryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovStatusTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusSetSessionOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovStatusTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusSetSessionOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovStatusTl(uint64(m.AuthKeyId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusGetUserOnlineSessions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusGetUsersOnlineSessionsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovStatusTl(uint64(e))
		}
		n += 1 + sovStatusTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusGetChannelOnlineUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.ChannelId != 0 {
		n += 1 + sovStatusTl(uint64(m.ChannelId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusSetUserChannelsOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if len(m.Channels) > 0 {
		l = 0
		for _, e := range m.Channels {
			l += sovStatusTl(uint64(e))
		}
		n += 1 + sovStatusTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusSetUserChannelsOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if len(m.Channels) > 0 {
		l = 0
		for _, e := range m.Channels {
			l += sovStatusTl(uint64(e))
		}
		n += 1 + sovStatusTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusSetChannelUserOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.ChannelId != 0 {
		n += 1 + sovStatusTl(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovStatusTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusSetChannelUsersOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.ChannelId != 0 {
		n += 1 + sovStatusTl(uint64(m.ChannelId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovStatusTl(uint64(e))
		}
		n += 1 + sovStatusTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLStatusSetChannelOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovStatusTl(uint64(m.Constructor))
	}
	if m.ChannelId != 0 {
		n += 1 + sovStatusTl(uint64(m.ChannelId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_UserSessionEntryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovStatusTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_Long) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		l = 0
		for _, e := range m.Datas {
			l += sovStatusTl(uint64(e))
		}
		n += 1 + sovStatusTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStatusTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatusTl(x uint64) (n int) {
	return sovStatusTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			m.Expired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expired |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermAuthKeyId", wireType)
			}
			m.PermAuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermAuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_sessionEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_sessionEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &SessionEntry{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSessionEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSessionEntryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSessionEntryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSessions = append(m.UserSessions, &SessionEntry{})
			if err := m.UserSessions[len(m.UserSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSessionEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_userSessionEntryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_userSessionEntryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &UserSessionEntryList{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusSetSessionOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_setSessionOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_setSessionOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &SessionEntry{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusSetSessionOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_setSessionOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_setSessionOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusGetUserOnlineSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_getUserOnlineSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_getUserOnlineSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusGetUsersOnlineSessionsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_getUsersOnlineSessionsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_getUsersOnlineSessionsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatusTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatusTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Users) == 0 {
					m.Users = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatusTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusGetChannelOnlineUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_getChannelOnlineUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_getChannelOnlineUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusSetUserChannelsOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_setUserChannelsOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_setUserChannelsOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channels = append(m.Channels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatusTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatusTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Channels) == 0 {
					m.Channels = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatusTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channels = append(m.Channels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusSetUserChannelsOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_setUserChannelsOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_setUserChannelsOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channels = append(m.Channels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatusTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatusTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Channels) == 0 {
					m.Channels = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatusTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channels = append(m.Channels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusSetChannelUserOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_setChannelUserOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_setChannelUserOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusSetChannelUsersOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_setChannelUsersOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_setChannelUsersOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatusTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatusTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatusTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatusSetChannelOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_status_setChannelOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_status_setChannelOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_UserSessionEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_UserSessionEntryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_UserSessionEntryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatusTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &UserSessionEntryList{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_Long) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_Long: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_Long: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Datas = append(m.Datas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatusTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatusTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatusTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Datas) == 0 {
					m.Datas = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatusTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Datas = append(m.Datas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatusTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatusTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatusTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatusTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatusTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatusTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatusTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatusTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatusTl = fmt.Errorf("proto: unexpected end of group")
)
