//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: inbox.tl.proto

package inbox

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                           TLConstructor = 0
	TLConstructor_CRC32_inboxMessageData                  TLConstructor = 1002286548
	TLConstructor_CRC32_inboxMessageId                    TLConstructor = -963460705
	TLConstructor_CRC32_inbox_sendUserMessageToInbox      TLConstructor = -208741709
	TLConstructor_CRC32_inbox_sendChatMessageToInbox      TLConstructor = -1760197438
	TLConstructor_CRC32_inbox_sendUserMultiMessageToInbox TLConstructor = -1782288007
	TLConstructor_CRC32_inbox_sendChatMultiMessageToInbox TLConstructor = -694455924
	TLConstructor_CRC32_inbox_editUserMessageToInbox      TLConstructor = 1559967656
	TLConstructor_CRC32_inbox_editChatMessageToInbox      TLConstructor = 2031122959
	TLConstructor_CRC32_inbox_deleteMessagesToInbox       TLConstructor = -2061734348
	TLConstructor_CRC32_inbox_deleteUserHistoryToInbox    TLConstructor = 336232792
	TLConstructor_CRC32_inbox_deleteChatHistoryToInbox    TLConstructor = -659905022
	TLConstructor_CRC32_inbox_readUserMediaUnreadToInbox  TLConstructor = 364970827
	TLConstructor_CRC32_inbox_readChatMediaUnreadToInbox  TLConstructor = 1430347220
	TLConstructor_CRC32_inbox_updateHistoryReaded         TLConstructor = -1010283296
	TLConstructor_CRC32_inbox_updatePinnedMessage         TLConstructor = -1452528908
	TLConstructor_CRC32_inbox_unpinAllMessages            TLConstructor = 589079137
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		1002286548:  "CRC32_inboxMessageData",
		-963460705:  "CRC32_inboxMessageId",
		-208741709:  "CRC32_inbox_sendUserMessageToInbox",
		-1760197438: "CRC32_inbox_sendChatMessageToInbox",
		-1782288007: "CRC32_inbox_sendUserMultiMessageToInbox",
		-694455924:  "CRC32_inbox_sendChatMultiMessageToInbox",
		1559967656:  "CRC32_inbox_editUserMessageToInbox",
		2031122959:  "CRC32_inbox_editChatMessageToInbox",
		-2061734348: "CRC32_inbox_deleteMessagesToInbox",
		336232792:   "CRC32_inbox_deleteUserHistoryToInbox",
		-659905022:  "CRC32_inbox_deleteChatHistoryToInbox",
		364970827:   "CRC32_inbox_readUserMediaUnreadToInbox",
		1430347220:  "CRC32_inbox_readChatMediaUnreadToInbox",
		-1010283296: "CRC32_inbox_updateHistoryReaded",
		-1452528908: "CRC32_inbox_updatePinnedMessage",
		589079137:   "CRC32_inbox_unpinAllMessages",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                           0,
		"CRC32_inboxMessageData":                  1002286548,
		"CRC32_inboxMessageId":                    -963460705,
		"CRC32_inbox_sendUserMessageToInbox":      -208741709,
		"CRC32_inbox_sendChatMessageToInbox":      -1760197438,
		"CRC32_inbox_sendUserMultiMessageToInbox": -1782288007,
		"CRC32_inbox_sendChatMultiMessageToInbox": -694455924,
		"CRC32_inbox_editUserMessageToInbox":      1559967656,
		"CRC32_inbox_editChatMessageToInbox":      2031122959,
		"CRC32_inbox_deleteMessagesToInbox":       -2061734348,
		"CRC32_inbox_deleteUserHistoryToInbox":    336232792,
		"CRC32_inbox_deleteChatHistoryToInbox":    -659905022,
		"CRC32_inbox_readUserMediaUnreadToInbox":  364970827,
		"CRC32_inbox_readChatMediaUnreadToInbox":  1430347220,
		"CRC32_inbox_updateHistoryReaded":         -1010283296,
		"CRC32_inbox_updatePinnedMessage":         -1452528908,
		"CRC32_inbox_unpinAllMessages":            589079137,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_inbox_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_inbox_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{0}
}

// InboxMessageData <--
//   - TL_inboxMessageData
type InboxMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName   string           `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor     TLConstructor    `protobuf:"varint,2,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	RandomId        int64            `protobuf:"varint,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	DialogMessageId int64            `protobuf:"varint,4,opt,name=dialog_message_id,json=dialogMessageId,proto3" json:"dialog_message_id,omitempty"`
	Message         *mtproto.Message `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InboxMessageData) Reset() {
	*x = InboxMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboxMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxMessageData) ProtoMessage() {}

func (x *InboxMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxMessageData.ProtoReflect.Descriptor instead.
func (*InboxMessageData) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{0}
}

func (x *InboxMessageData) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *InboxMessageData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *InboxMessageData) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *InboxMessageData) GetDialogMessageId() int64 {
	if x != nil {
		return x.DialogMessageId
	}
	return 0
}

func (x *InboxMessageData) GetMessage() *mtproto.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type TLInboxMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *InboxMessageData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLInboxMessageData) Reset() {
	*x = TLInboxMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxMessageData) ProtoMessage() {}

func (x *TLInboxMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxMessageData.ProtoReflect.Descriptor instead.
func (*TLInboxMessageData) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLInboxMessageData) GetData2() *InboxMessageData {
	if x != nil {
		return x.Data2
	}
	return nil
}

// InboxMessageId <--
//   - TL_inboxMessageId
type InboxMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName   string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor     TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	Id              int32         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	DialogMessageId int64         `protobuf:"varint,4,opt,name=dialog_message_id,json=dialogMessageId,proto3" json:"dialog_message_id,omitempty"`
}

func (x *InboxMessageId) Reset() {
	*x = InboxMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboxMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxMessageId) ProtoMessage() {}

func (x *InboxMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxMessageId.ProtoReflect.Descriptor instead.
func (*InboxMessageId) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{2}
}

func (x *InboxMessageId) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *InboxMessageId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *InboxMessageId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InboxMessageId) GetDialogMessageId() int64 {
	if x != nil {
		return x.DialogMessageId
	}
	return 0
}

type TLInboxMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *InboxMessageId `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLInboxMessageId) Reset() {
	*x = TLInboxMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxMessageId) ProtoMessage() {}

func (x *TLInboxMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxMessageId.ProtoReflect.Descriptor instead.
func (*TLInboxMessageId) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLInboxMessageId) GetData2() *InboxMessageId {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxSendUserMessageToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64             `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId  int64             `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	Message     *InboxMessageData `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TLInboxSendUserMessageToInbox) Reset() {
	*x = TLInboxSendUserMessageToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxSendUserMessageToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxSendUserMessageToInbox) ProtoMessage() {}

func (x *TLInboxSendUserMessageToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxSendUserMessageToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxSendUserMessageToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{4}
}

func (x *TLInboxSendUserMessageToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxSendUserMessageToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxSendUserMessageToInbox) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

func (x *TLInboxSendUserMessageToInbox) GetMessage() *InboxMessageData {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxSendChatMessageToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64             `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId  int64             `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Message     *InboxMessageData `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TLInboxSendChatMessageToInbox) Reset() {
	*x = TLInboxSendChatMessageToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxSendChatMessageToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxSendChatMessageToInbox) ProtoMessage() {}

func (x *TLInboxSendChatMessageToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxSendChatMessageToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxSendChatMessageToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLInboxSendChatMessageToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxSendChatMessageToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxSendChatMessageToInbox) GetPeerChatId() int64 {
	if x != nil {
		return x.PeerChatId
	}
	return 0
}

func (x *TLInboxSendChatMessageToInbox) GetMessage() *InboxMessageData {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxSendUserMultiMessageToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64               `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId  int64               `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	Message     []*InboxMessageData `protobuf:"bytes,5,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *TLInboxSendUserMultiMessageToInbox) Reset() {
	*x = TLInboxSendUserMultiMessageToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxSendUserMultiMessageToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxSendUserMultiMessageToInbox) ProtoMessage() {}

func (x *TLInboxSendUserMultiMessageToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxSendUserMultiMessageToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxSendUserMultiMessageToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLInboxSendUserMultiMessageToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxSendUserMultiMessageToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxSendUserMultiMessageToInbox) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

func (x *TLInboxSendUserMultiMessageToInbox) GetMessage() []*InboxMessageData {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxSendChatMultiMessageToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64               `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId  int64               `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Message     []*InboxMessageData `protobuf:"bytes,5,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *TLInboxSendChatMultiMessageToInbox) Reset() {
	*x = TLInboxSendChatMultiMessageToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxSendChatMultiMessageToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxSendChatMultiMessageToInbox) ProtoMessage() {}

func (x *TLInboxSendChatMultiMessageToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxSendChatMultiMessageToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxSendChatMultiMessageToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLInboxSendChatMultiMessageToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxSendChatMultiMessageToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxSendChatMultiMessageToInbox) GetPeerChatId() int64 {
	if x != nil {
		return x.PeerChatId
	}
	return 0
}

func (x *TLInboxSendChatMultiMessageToInbox) GetMessage() []*InboxMessageData {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxEditUserMessageToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64            `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId  int64            `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	Message     *mtproto.Message `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TLInboxEditUserMessageToInbox) Reset() {
	*x = TLInboxEditUserMessageToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxEditUserMessageToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxEditUserMessageToInbox) ProtoMessage() {}

func (x *TLInboxEditUserMessageToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxEditUserMessageToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxEditUserMessageToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLInboxEditUserMessageToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxEditUserMessageToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxEditUserMessageToInbox) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

func (x *TLInboxEditUserMessageToInbox) GetMessage() *mtproto.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxEditChatMessageToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64            `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId  int64            `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Message     *mtproto.Message `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TLInboxEditChatMessageToInbox) Reset() {
	*x = TLInboxEditChatMessageToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxEditChatMessageToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxEditChatMessageToInbox) ProtoMessage() {}

func (x *TLInboxEditChatMessageToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxEditChatMessageToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxEditChatMessageToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLInboxEditChatMessageToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxEditChatMessageToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxEditChatMessageToInbox) GetPeerChatId() int64 {
	if x != nil {
		return x.PeerChatId
	}
	return 0
}

func (x *TLInboxEditChatMessageToInbox) GetMessage() *mtproto.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxDeleteMessagesToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Id          []int64       `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLInboxDeleteMessagesToInbox) Reset() {
	*x = TLInboxDeleteMessagesToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxDeleteMessagesToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxDeleteMessagesToInbox) ProtoMessage() {}

func (x *TLInboxDeleteMessagesToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxDeleteMessagesToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxDeleteMessagesToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLInboxDeleteMessagesToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxDeleteMessagesToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxDeleteMessagesToInbox) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLInboxDeleteMessagesToInbox) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLInboxDeleteMessagesToInbox) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxDeleteUserHistoryToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId  int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	JustClear   bool          `protobuf:"varint,5,opt,name=just_clear,json=justClear,proto3" json:"just_clear,omitempty"`
	MaxId       int32         `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *TLInboxDeleteUserHistoryToInbox) Reset() {
	*x = TLInboxDeleteUserHistoryToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxDeleteUserHistoryToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxDeleteUserHistoryToInbox) ProtoMessage() {}

func (x *TLInboxDeleteUserHistoryToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxDeleteUserHistoryToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxDeleteUserHistoryToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLInboxDeleteUserHistoryToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxDeleteUserHistoryToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxDeleteUserHistoryToInbox) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

func (x *TLInboxDeleteUserHistoryToInbox) GetJustClear() bool {
	if x != nil {
		return x.JustClear
	}
	return false
}

func (x *TLInboxDeleteUserHistoryToInbox) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLInboxDeleteChatHistoryToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId  int64         `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	MaxId       int32         `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *TLInboxDeleteChatHistoryToInbox) Reset() {
	*x = TLInboxDeleteChatHistoryToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxDeleteChatHistoryToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxDeleteChatHistoryToInbox) ProtoMessage() {}

func (x *TLInboxDeleteChatHistoryToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxDeleteChatHistoryToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxDeleteChatHistoryToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLInboxDeleteChatHistoryToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxDeleteChatHistoryToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxDeleteChatHistoryToInbox) GetPeerChatId() int64 {
	if x != nil {
		return x.PeerChatId
	}
	return 0
}

func (x *TLInboxDeleteChatHistoryToInbox) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLInboxReadUserMediaUnreadToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64             `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId  int64             `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	Id          []*InboxMessageId `protobuf:"bytes,5,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *TLInboxReadUserMediaUnreadToInbox) Reset() {
	*x = TLInboxReadUserMediaUnreadToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxReadUserMediaUnreadToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxReadUserMediaUnreadToInbox) ProtoMessage() {}

func (x *TLInboxReadUserMediaUnreadToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxReadUserMediaUnreadToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxReadUserMediaUnreadToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLInboxReadUserMediaUnreadToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxReadUserMediaUnreadToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxReadUserMediaUnreadToInbox) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

func (x *TLInboxReadUserMediaUnreadToInbox) GetId() []*InboxMessageId {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxReadChatMediaUnreadToInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64             `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId  int64             `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Id          []*InboxMessageId `protobuf:"bytes,5,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *TLInboxReadChatMediaUnreadToInbox) Reset() {
	*x = TLInboxReadChatMediaUnreadToInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxReadChatMediaUnreadToInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxReadChatMediaUnreadToInbox) ProtoMessage() {}

func (x *TLInboxReadChatMediaUnreadToInbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxReadChatMediaUnreadToInbox.ProtoReflect.Descriptor instead.
func (*TLInboxReadChatMediaUnreadToInbox) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLInboxReadChatMediaUnreadToInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxReadChatMediaUnreadToInbox) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxReadChatMediaUnreadToInbox) GetPeerChatId() int64 {
	if x != nil {
		return x.PeerChatId
	}
	return 0
}

func (x *TLInboxReadChatMediaUnreadToInbox) GetId() []*InboxMessageId {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLInboxUpdateHistoryReaded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId      int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MaxId       int32         `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Sender      int64         `protobuf:"varint,7,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *TLInboxUpdateHistoryReaded) Reset() {
	*x = TLInboxUpdateHistoryReaded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxUpdateHistoryReaded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxUpdateHistoryReaded) ProtoMessage() {}

func (x *TLInboxUpdateHistoryReaded) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxUpdateHistoryReaded.ProtoReflect.Descriptor instead.
func (*TLInboxUpdateHistoryReaded) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLInboxUpdateHistoryReaded) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxUpdateHistoryReaded) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLInboxUpdateHistoryReaded) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLInboxUpdateHistoryReaded) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLInboxUpdateHistoryReaded) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLInboxUpdateHistoryReaded) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLInboxUpdatePinnedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor     TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	UserId          int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Unpin           bool          `protobuf:"varint,4,opt,name=unpin,proto3" json:"unpin,omitempty"`
	PeerType        int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId          int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Id              int32         `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	DialogMessageId int64         `protobuf:"varint,8,opt,name=dialog_message_id,json=dialogMessageId,proto3" json:"dialog_message_id,omitempty"`
}

func (x *TLInboxUpdatePinnedMessage) Reset() {
	*x = TLInboxUpdatePinnedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxUpdatePinnedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxUpdatePinnedMessage) ProtoMessage() {}

func (x *TLInboxUpdatePinnedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxUpdatePinnedMessage.ProtoReflect.Descriptor instead.
func (*TLInboxUpdatePinnedMessage) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLInboxUpdatePinnedMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxUpdatePinnedMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLInboxUpdatePinnedMessage) GetUnpin() bool {
	if x != nil {
		return x.Unpin
	}
	return false
}

func (x *TLInboxUpdatePinnedMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLInboxUpdatePinnedMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLInboxUpdatePinnedMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLInboxUpdatePinnedMessage) GetDialogMessageId() int64 {
	if x != nil {
		return x.DialogMessageId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLInboxUnpinAllMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLInboxUnpinAllMessages) Reset() {
	*x = TLInboxUnpinAllMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLInboxUnpinAllMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInboxUnpinAllMessages) ProtoMessage() {}

func (x *TLInboxUnpinAllMessages) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInboxUnpinAllMessages.ProtoReflect.Descriptor instead.
func (*TLInboxUnpinAllMessages) Descriptor() ([]byte, []int) {
	return file_inbox_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLInboxUnpinAllMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInboxUnpinAllMessages) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLInboxUnpinAllMessages) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLInboxUnpinAllMessages) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLInboxUnpinAllMessages) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

var File_inbox_tl_proto protoreflect.FileDescriptor

var file_inbox_tl_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a,
	0x13, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x40, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x22, 0xc7, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12,
	0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1e,
	0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x61, 0x78, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x61, 0x78, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x36,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22,
	0xf7, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x19, 0x54, 0x4c,
	0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x2a, 0xfe,
	0x05, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0xd4, 0xdb,
	0xf6, 0xdd, 0x03, 0x12, 0x21, 0x0a, 0x14, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x10, 0x9f, 0x83, 0xcb, 0xb4,
	0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0xb3, 0xb5, 0xbb,
	0x9c, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0xc2, 0x89,
	0xd6, 0xb8, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x34, 0x0a, 0x27, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x10, 0xf9, 0xe2, 0x91, 0xae, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x34,
	0x0a, 0x27, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0x8c, 0xe3, 0xed, 0xb4, 0xfd, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0xa8, 0xef, 0xec, 0xe7, 0x05,
	0x12, 0x2a, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0x8f, 0xf4, 0xc1, 0xc8, 0x07, 0x12, 0x2e, 0x0a, 0x21,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x10, 0xb4, 0xdc, 0xf1, 0xa8, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x24,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x49,
	0x6e, 0x62, 0x6f, 0x78, 0x10, 0xd8, 0x82, 0xaa, 0xa0, 0x01, 0x12, 0x31, 0x0a, 0x24, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x10, 0x82, 0xcc, 0xaa, 0xc5, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2e, 0x0a,
	0x26, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0xcb, 0x86, 0x84, 0xae, 0x01, 0x12, 0x2e, 0x0a,
	0x26, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0xd4, 0xbb, 0x85, 0xaa, 0x05, 0x12, 0x2c, 0x0a,
	0x1f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x64,
	0x10, 0xe0, 0x99, 0xa1, 0x9e, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xf4,
	0xd5, 0xb0, 0xcb, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x10, 0xe1, 0xc4, 0xf2, 0x98, 0x02, 0x32,
	0xfa, 0x09, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x57, 0x0a, 0x1c,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x26, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49,
	0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c,
	0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x21, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x21, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54,
	0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49,
	0x6e, 0x62, 0x6f, 0x78, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x1c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x26, 0x2e,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1b, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c,
	0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x1e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12,
	0x28, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1e, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x28, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x20, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x2a, 0x2e, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x20, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x2a, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x19, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x54,
	0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x19,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x16, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x2e, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x43, 0x5a, 0x41,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67,
	0x72, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2f, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inbox_tl_proto_rawDescOnce sync.Once
	file_inbox_tl_proto_rawDescData = file_inbox_tl_proto_rawDesc
)

func file_inbox_tl_proto_rawDescGZIP() []byte {
	file_inbox_tl_proto_rawDescOnce.Do(func() {
		file_inbox_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_inbox_tl_proto_rawDescData)
	})
	return file_inbox_tl_proto_rawDescData
}

var file_inbox_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_inbox_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_inbox_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                         // 0: inbox.TLConstructor
	(*InboxMessageData)(nil),                   // 1: inbox.InboxMessageData
	(*TLInboxMessageData)(nil),                 // 2: inbox.TL_inboxMessageData
	(*InboxMessageId)(nil),                     // 3: inbox.InboxMessageId
	(*TLInboxMessageId)(nil),                   // 4: inbox.TL_inboxMessageId
	(*TLInboxSendUserMessageToInbox)(nil),      // 5: inbox.TL_inbox_sendUserMessageToInbox
	(*TLInboxSendChatMessageToInbox)(nil),      // 6: inbox.TL_inbox_sendChatMessageToInbox
	(*TLInboxSendUserMultiMessageToInbox)(nil), // 7: inbox.TL_inbox_sendUserMultiMessageToInbox
	(*TLInboxSendChatMultiMessageToInbox)(nil), // 8: inbox.TL_inbox_sendChatMultiMessageToInbox
	(*TLInboxEditUserMessageToInbox)(nil),      // 9: inbox.TL_inbox_editUserMessageToInbox
	(*TLInboxEditChatMessageToInbox)(nil),      // 10: inbox.TL_inbox_editChatMessageToInbox
	(*TLInboxDeleteMessagesToInbox)(nil),       // 11: inbox.TL_inbox_deleteMessagesToInbox
	(*TLInboxDeleteUserHistoryToInbox)(nil),    // 12: inbox.TL_inbox_deleteUserHistoryToInbox
	(*TLInboxDeleteChatHistoryToInbox)(nil),    // 13: inbox.TL_inbox_deleteChatHistoryToInbox
	(*TLInboxReadUserMediaUnreadToInbox)(nil),  // 14: inbox.TL_inbox_readUserMediaUnreadToInbox
	(*TLInboxReadChatMediaUnreadToInbox)(nil),  // 15: inbox.TL_inbox_readChatMediaUnreadToInbox
	(*TLInboxUpdateHistoryReaded)(nil),         // 16: inbox.TL_inbox_updateHistoryReaded
	(*TLInboxUpdatePinnedMessage)(nil),         // 17: inbox.TL_inbox_updatePinnedMessage
	(*TLInboxUnpinAllMessages)(nil),            // 18: inbox.TL_inbox_unpinAllMessages
	(*mtproto.Message)(nil),                    // 19: mtproto.Message
	(*mtproto.Void)(nil),                       // 20: mtproto.Void
}
var file_inbox_tl_proto_depIdxs = []int32{
	0,  // 0: inbox.InboxMessageData.constructor:type_name -> inbox.TLConstructor
	19, // 1: inbox.InboxMessageData.message:type_name -> mtproto.Message
	1,  // 2: inbox.TL_inboxMessageData.data2:type_name -> inbox.InboxMessageData
	0,  // 3: inbox.InboxMessageId.constructor:type_name -> inbox.TLConstructor
	3,  // 4: inbox.TL_inboxMessageId.data2:type_name -> inbox.InboxMessageId
	0,  // 5: inbox.TL_inbox_sendUserMessageToInbox.constructor:type_name -> inbox.TLConstructor
	1,  // 6: inbox.TL_inbox_sendUserMessageToInbox.message:type_name -> inbox.InboxMessageData
	0,  // 7: inbox.TL_inbox_sendChatMessageToInbox.constructor:type_name -> inbox.TLConstructor
	1,  // 8: inbox.TL_inbox_sendChatMessageToInbox.message:type_name -> inbox.InboxMessageData
	0,  // 9: inbox.TL_inbox_sendUserMultiMessageToInbox.constructor:type_name -> inbox.TLConstructor
	1,  // 10: inbox.TL_inbox_sendUserMultiMessageToInbox.message:type_name -> inbox.InboxMessageData
	0,  // 11: inbox.TL_inbox_sendChatMultiMessageToInbox.constructor:type_name -> inbox.TLConstructor
	1,  // 12: inbox.TL_inbox_sendChatMultiMessageToInbox.message:type_name -> inbox.InboxMessageData
	0,  // 13: inbox.TL_inbox_editUserMessageToInbox.constructor:type_name -> inbox.TLConstructor
	19, // 14: inbox.TL_inbox_editUserMessageToInbox.message:type_name -> mtproto.Message
	0,  // 15: inbox.TL_inbox_editChatMessageToInbox.constructor:type_name -> inbox.TLConstructor
	19, // 16: inbox.TL_inbox_editChatMessageToInbox.message:type_name -> mtproto.Message
	0,  // 17: inbox.TL_inbox_deleteMessagesToInbox.constructor:type_name -> inbox.TLConstructor
	0,  // 18: inbox.TL_inbox_deleteUserHistoryToInbox.constructor:type_name -> inbox.TLConstructor
	0,  // 19: inbox.TL_inbox_deleteChatHistoryToInbox.constructor:type_name -> inbox.TLConstructor
	0,  // 20: inbox.TL_inbox_readUserMediaUnreadToInbox.constructor:type_name -> inbox.TLConstructor
	3,  // 21: inbox.TL_inbox_readUserMediaUnreadToInbox.id:type_name -> inbox.InboxMessageId
	0,  // 22: inbox.TL_inbox_readChatMediaUnreadToInbox.constructor:type_name -> inbox.TLConstructor
	3,  // 23: inbox.TL_inbox_readChatMediaUnreadToInbox.id:type_name -> inbox.InboxMessageId
	0,  // 24: inbox.TL_inbox_updateHistoryReaded.constructor:type_name -> inbox.TLConstructor
	0,  // 25: inbox.TL_inbox_updatePinnedMessage.constructor:type_name -> inbox.TLConstructor
	0,  // 26: inbox.TL_inbox_unpinAllMessages.constructor:type_name -> inbox.TLConstructor
	5,  // 27: inbox.RPCInbox.inbox_sendUserMessageToInbox:input_type -> inbox.TL_inbox_sendUserMessageToInbox
	6,  // 28: inbox.RPCInbox.inbox_sendChatMessageToInbox:input_type -> inbox.TL_inbox_sendChatMessageToInbox
	7,  // 29: inbox.RPCInbox.inbox_sendUserMultiMessageToInbox:input_type -> inbox.TL_inbox_sendUserMultiMessageToInbox
	8,  // 30: inbox.RPCInbox.inbox_sendChatMultiMessageToInbox:input_type -> inbox.TL_inbox_sendChatMultiMessageToInbox
	9,  // 31: inbox.RPCInbox.inbox_editUserMessageToInbox:input_type -> inbox.TL_inbox_editUserMessageToInbox
	10, // 32: inbox.RPCInbox.inbox_editChatMessageToInbox:input_type -> inbox.TL_inbox_editChatMessageToInbox
	11, // 33: inbox.RPCInbox.inbox_deleteMessagesToInbox:input_type -> inbox.TL_inbox_deleteMessagesToInbox
	12, // 34: inbox.RPCInbox.inbox_deleteUserHistoryToInbox:input_type -> inbox.TL_inbox_deleteUserHistoryToInbox
	13, // 35: inbox.RPCInbox.inbox_deleteChatHistoryToInbox:input_type -> inbox.TL_inbox_deleteChatHistoryToInbox
	14, // 36: inbox.RPCInbox.inbox_readUserMediaUnreadToInbox:input_type -> inbox.TL_inbox_readUserMediaUnreadToInbox
	15, // 37: inbox.RPCInbox.inbox_readChatMediaUnreadToInbox:input_type -> inbox.TL_inbox_readChatMediaUnreadToInbox
	16, // 38: inbox.RPCInbox.inbox_updateHistoryReaded:input_type -> inbox.TL_inbox_updateHistoryReaded
	17, // 39: inbox.RPCInbox.inbox_updatePinnedMessage:input_type -> inbox.TL_inbox_updatePinnedMessage
	18, // 40: inbox.RPCInbox.inbox_unpinAllMessages:input_type -> inbox.TL_inbox_unpinAllMessages
	20, // 41: inbox.RPCInbox.inbox_sendUserMessageToInbox:output_type -> mtproto.Void
	20, // 42: inbox.RPCInbox.inbox_sendChatMessageToInbox:output_type -> mtproto.Void
	20, // 43: inbox.RPCInbox.inbox_sendUserMultiMessageToInbox:output_type -> mtproto.Void
	20, // 44: inbox.RPCInbox.inbox_sendChatMultiMessageToInbox:output_type -> mtproto.Void
	20, // 45: inbox.RPCInbox.inbox_editUserMessageToInbox:output_type -> mtproto.Void
	20, // 46: inbox.RPCInbox.inbox_editChatMessageToInbox:output_type -> mtproto.Void
	20, // 47: inbox.RPCInbox.inbox_deleteMessagesToInbox:output_type -> mtproto.Void
	20, // 48: inbox.RPCInbox.inbox_deleteUserHistoryToInbox:output_type -> mtproto.Void
	20, // 49: inbox.RPCInbox.inbox_deleteChatHistoryToInbox:output_type -> mtproto.Void
	20, // 50: inbox.RPCInbox.inbox_readUserMediaUnreadToInbox:output_type -> mtproto.Void
	20, // 51: inbox.RPCInbox.inbox_readChatMediaUnreadToInbox:output_type -> mtproto.Void
	20, // 52: inbox.RPCInbox.inbox_updateHistoryReaded:output_type -> mtproto.Void
	20, // 53: inbox.RPCInbox.inbox_updatePinnedMessage:output_type -> mtproto.Void
	20, // 54: inbox.RPCInbox.inbox_unpinAllMessages:output_type -> mtproto.Void
	41, // [41:55] is the sub-list for method output_type
	27, // [27:41] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_inbox_tl_proto_init() }
func file_inbox_tl_proto_init() {
	if File_inbox_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inbox_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboxMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboxMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxSendUserMessageToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxSendChatMessageToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxSendUserMultiMessageToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxSendChatMultiMessageToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxEditUserMessageToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxEditChatMessageToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxDeleteMessagesToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxDeleteUserHistoryToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxDeleteChatHistoryToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxReadUserMediaUnreadToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxReadChatMediaUnreadToInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxUpdateHistoryReaded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxUpdatePinnedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_tl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLInboxUnpinAllMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inbox_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inbox_tl_proto_goTypes,
		DependencyIndexes: file_inbox_tl_proto_depIdxs,
		EnumInfos:         file_inbox_tl_proto_enumTypes,
		MessageInfos:      file_inbox_tl_proto_msgTypes,
	}.Build()
	File_inbox_tl_proto = out.File
	file_inbox_tl_proto_rawDesc = nil
	file_inbox_tl_proto_goTypes = nil
	file_inbox_tl_proto_depIdxs = nil
}
